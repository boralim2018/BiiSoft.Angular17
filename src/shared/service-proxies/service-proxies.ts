//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    isTenantAvailable(body: IsTenantAvailableInput | undefined): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsTenantAvailable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsTenantAvailable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IsTenantAvailableOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IsTenantAvailableOutput>;
        }));
    }

    protected processIsTenantAvailable(response: HttpResponseBase): Observable<IsTenantAvailableOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IsTenantAvailableOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterInput | undefined): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RegisterOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RegisterOutput>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    resetPassword(body: ResetPasswordInput | undefined): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResetPasswordOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResetPasswordOutput>;
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<ResetPasswordOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResetPasswordOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    resolveTenantId(body: ResolveTenantIdInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResolveTenantId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResolveTenantId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResolveTenantId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processResolveTenantId(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    sendPasswordResetCode(body: SendPasswordResetCodeInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendPasswordResetCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendPasswordResetCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSendPasswordResetCode(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    impersonate(body: ImpersonateInput | undefined): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImpersonate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImpersonate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ImpersonateOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ImpersonateOutput>;
        }));
    }

    protected processImpersonate(response: HttpResponseBase): Observable<ImpersonateOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImpersonateOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBackToImpersonator(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBackToImpersonator(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ImpersonateOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ImpersonateOutput>;
        }));
    }

    protected processBackToImpersonator(response: HttpResponseBase): Observable<ImpersonateOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImpersonateOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    switchToLinkedAccount(body: SwitchToLinkedAccountInput | undefined): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSwitchToLinkedAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSwitchToLinkedAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwitchToLinkedAccountOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwitchToLinkedAccountOutput>;
        }));
    }

    protected processSwitchToLinkedAccount(response: HttpResponseBase): Observable<SwitchToLinkedAccountOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SwitchToLinkedAccountOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changeLanguage(body: ChangeUserLanguageDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeLanguage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangeLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param userName (optional) 
     * @param serviceName (optional) 
     * @param methodName (optional) 
     * @param browserInfo (optional) 
     * @param hasException (optional) 
     * @param minExecutionDuration (optional) 
     * @param maxExecutionDuration (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getAuditLogs(startDate: moment.Moment | undefined, endDate: moment.Moment | undefined, userName: string | undefined, serviceName: string | undefined, methodName: string | undefined, browserInfo: string | undefined, hasException: boolean | undefined, minExecutionDuration: number | undefined, maxExecutionDuration: number | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<AuditLogListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
        if (serviceName === null)
            throw new Error("The parameter 'serviceName' cannot be null.");
        else if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&";
        if (methodName === null)
            throw new Error("The parameter 'methodName' cannot be null.");
        else if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&";
        if (browserInfo === null)
            throw new Error("The parameter 'browserInfo' cannot be null.");
        else if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&";
        if (hasException === null)
            throw new Error("The parameter 'hasException' cannot be null.");
        else if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&";
        if (minExecutionDuration === null)
            throw new Error("The parameter 'minExecutionDuration' cannot be null.");
        else if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
        if (maxExecutionDuration === null)
            throw new Error("The parameter 'maxExecutionDuration' cannot be null.");
        else if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuditLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuditLogs(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuditLogListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuditLogListDtoPagedResultDto>;
        }));
    }

    protected processGetAuditLogs(response: HttpResponseBase): Observable<AuditLogListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuditLogListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportAuditLogsInput | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class BatteryServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateBatteryInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Battery/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Battery/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Battery/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Battery/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Battery/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindBatteryDto> {
        let url_ = this.baseUrl + "/api/services/app/Battery/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindBatteryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindBatteryDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindBatteryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindBatteryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageBatteryInputDto | undefined): Observable<FindBatteryDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Battery/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindBatteryDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindBatteryDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindBatteryDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindBatteryDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<BatteryDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Battery/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BatteryDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BatteryDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<BatteryDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BatteryDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<BatteryListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Battery/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BatteryListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BatteryListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<BatteryListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BatteryListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelBatteryInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Battery/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Battery/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Battery/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateBatteryInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Battery/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class BranchServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateBranchInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Branch/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Branch/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Branch/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Branch/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Branch/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageBranchInputDto | undefined): Observable<FindBranchDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Branch/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindBranchDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindBranchDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindBranchDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindBranchDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<BranchDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Branch/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BranchDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BranchDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<BranchDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BranchDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<BranchListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Branch/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BranchListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BranchListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<BranchListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BranchListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelBranchInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Branch/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Branch/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Branch/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateBranchInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Branch/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CameraServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateCameraInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Camera/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Camera/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Camera/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Camera/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Camera/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindCameraDto> {
        let url_ = this.baseUrl + "/api/services/app/Camera/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCameraDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCameraDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindCameraDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCameraDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageCameraInputDto | undefined): Observable<FindCameraDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Camera/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCameraDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCameraDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindCameraDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCameraDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<CameraDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Camera/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CameraDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CameraDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<CameraDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CameraDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<CameraListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Camera/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CameraListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CameraListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<CameraListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CameraListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelCameraInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Camera/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Camera/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Camera/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateCameraInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Camera/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ChartOfAccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateChartOfAccountInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: FindChartOfAccountInputDto | undefined): Observable<FindChartOfAccountDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindChartOfAccountDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindChartOfAccountDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindChartOfAccountDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindChartOfAccountDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ChartOfAccountDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChartOfAccountDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChartOfAccountDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ChartOfAccountDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChartOfAccountDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param accountTypeFilter_Exclude (optional) 
     * @param accountTypeFilter_Ids (optional) 
     * @param subAccountTypeFilter_Exclude (optional) 
     * @param subAccountTypeFilter_Ids (optional) 
     * @param parentFilter_Exclude (optional) 
     * @param parentFilter_Ids (optional) 
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(accountTypeFilter_Exclude: boolean | undefined, accountTypeFilter_Ids: AccountType[] | undefined, subAccountTypeFilter_Exclude: boolean | undefined, subAccountTypeFilter_Ids: SubAccountType[] | undefined, parentFilter_Exclude: boolean | undefined, parentFilter_Ids: string[] | undefined, isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ChartOfAccountListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/GetList?";
        if (accountTypeFilter_Exclude === null)
            throw new Error("The parameter 'accountTypeFilter_Exclude' cannot be null.");
        else if (accountTypeFilter_Exclude !== undefined)
            url_ += "AccountTypeFilter.Exclude=" + encodeURIComponent("" + accountTypeFilter_Exclude) + "&";
        if (accountTypeFilter_Ids === null)
            throw new Error("The parameter 'accountTypeFilter_Ids' cannot be null.");
        else if (accountTypeFilter_Ids !== undefined)
            accountTypeFilter_Ids && accountTypeFilter_Ids.forEach(item => { url_ += "AccountTypeFilter.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (subAccountTypeFilter_Exclude === null)
            throw new Error("The parameter 'subAccountTypeFilter_Exclude' cannot be null.");
        else if (subAccountTypeFilter_Exclude !== undefined)
            url_ += "SubAccountTypeFilter.Exclude=" + encodeURIComponent("" + subAccountTypeFilter_Exclude) + "&";
        if (subAccountTypeFilter_Ids === null)
            throw new Error("The parameter 'subAccountTypeFilter_Ids' cannot be null.");
        else if (subAccountTypeFilter_Ids !== undefined)
            subAccountTypeFilter_Ids && subAccountTypeFilter_Ids.forEach(item => { url_ += "SubAccountTypeFilter.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (parentFilter_Exclude === null)
            throw new Error("The parameter 'parentFilter_Exclude' cannot be null.");
        else if (parentFilter_Exclude !== undefined)
            url_ += "ParentFilter.Exclude=" + encodeURIComponent("" + parentFilter_Exclude) + "&";
        if (parentFilter_Ids === null)
            throw new Error("The parameter 'parentFilter_Ids' cannot be null.");
        else if (parentFilter_Ids !== undefined)
            parentFilter_Ids && parentFilter_Ids.forEach(item => { url_ += "ParentFilter.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChartOfAccountListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChartOfAccountListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ChartOfAccountListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChartOfAccountListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelChartOfAccountInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateChartOfAccountInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ChartOfAccount/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CityProvinceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateCityProvinceInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageCityProvinceInputDto | undefined): Observable<FindCityProvinceDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCityProvinceDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCityProvinceDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindCityProvinceDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCityProvinceDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<CityProvinceDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CityProvinceDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CityProvinceDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<CityProvinceDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityProvinceDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param countries_Exclude (optional) 
     * @param countries_Ids (optional) 
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(countries_Exclude: boolean | undefined, countries_Ids: string[] | undefined, isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<CityProvinceListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/GetList?";
        if (countries_Exclude === null)
            throw new Error("The parameter 'countries_Exclude' cannot be null.");
        else if (countries_Exclude !== undefined)
            url_ += "Countries.Exclude=" + encodeURIComponent("" + countries_Exclude) + "&";
        if (countries_Ids === null)
            throw new Error("The parameter 'countries_Ids' cannot be null.");
        else if (countries_Ids !== undefined)
            countries_Ids && countries_Ids.forEach(item => { url_ += "Countries.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CityProvinceListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CityProvinceListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<CityProvinceListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityProvinceListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelCityProvinceInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateCityProvinceInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CityProvince/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ColorPatternServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateColorPatternInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindColorPatternDto> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindColorPatternDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindColorPatternDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindColorPatternDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindColorPatternDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageColorPatternInputDto | undefined): Observable<FindColorPatternDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindColorPatternDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindColorPatternDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindColorPatternDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindColorPatternDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ColorPatternDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ColorPatternDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ColorPatternDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ColorPatternDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ColorPatternDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ColorPatternListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ColorPatternListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ColorPatternListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ColorPatternListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ColorPatternListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelColorPatternInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateColorPatternInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorPattern/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAccountTypes(): Observable<AccountTypeNameValueDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetAccountTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccountTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccountTypes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountTypeNameValueDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountTypeNameValueDtoListResultDto>;
        }));
    }

    protected processGetAccountTypes(response: HttpResponseBase): Observable<AccountTypeNameValueDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountTypeNameValueDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param accountTypeFilter_Exclude (optional) 
     * @param accountTypeFilter_Ids (optional) 
     * @return OK
     */
    getSubAccountTypes(accountTypeFilter_Exclude: boolean | undefined, accountTypeFilter_Ids: AccountType[] | undefined): Observable<SubAccountTypeNameValueDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetSubAccountTypes?";
        if (accountTypeFilter_Exclude === null)
            throw new Error("The parameter 'accountTypeFilter_Exclude' cannot be null.");
        else if (accountTypeFilter_Exclude !== undefined)
            url_ += "AccountTypeFilter.Exclude=" + encodeURIComponent("" + accountTypeFilter_Exclude) + "&";
        if (accountTypeFilter_Ids === null)
            throw new Error("The parameter 'accountTypeFilter_Ids' cannot be null.");
        else if (accountTypeFilter_Ids !== undefined)
            accountTypeFilter_Ids && accountTypeFilter_Ids.forEach(item => { url_ += "AccountTypeFilter.Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSubAccountTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSubAccountTypes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SubAccountTypeNameValueDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SubAccountTypeNameValueDtoListResultDto>;
        }));
    }

    protected processGetSubAccountTypes(response: HttpResponseBase): Observable<SubAccountTypeNameValueDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SubAccountTypeNameValueDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param selectedTimeZones (optional) 
     * @param keyword (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getTimeZones(selectedTimeZones: string[] | undefined, keyword: string | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<StringPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetTimeZones?";
        if (selectedTimeZones === null)
            throw new Error("The parameter 'selectedTimeZones' cannot be null.");
        else if (selectedTimeZones !== undefined)
            selectedTimeZones && selectedTimeZones.forEach(item => { url_ += "SelectedTimeZones=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimeZones(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimeZones(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringPagedResultDto>;
        }));
    }

    protected processGetTimeZones(response: HttpResponseBase): Observable<StringPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getItemFieldSetting(): Observable<ItemFieldSettingDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetItemFieldSetting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetItemFieldSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetItemFieldSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemFieldSettingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemFieldSettingDto>;
        }));
    }

    protected processGetItemFieldSetting(response: HttpResponseBase): Observable<ItemFieldSettingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemFieldSettingDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CompanySettingServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrUpdateProfile(body: CreateUpdateBranchInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/CompanySetting/CreateOrUpdateProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateOrUpdateProfile(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrUpdateGeneralSetting(body: CreateUpdateCompanyGeneralSettingInputDto | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanySetting/CreateOrUpdateGeneralSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateGeneralSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateGeneralSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateOrUpdateGeneralSetting(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrUpdateAdvanceSetting(body: CreateUpdateCompanyAdvanceSettingInputDto | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanySetting/CreateOrUpdateAdvanceSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateAdvanceSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateAdvanceSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateOrUpdateAdvanceSetting(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrUpdateAccountSetting(body: CreateUpdateCompanyAccountSettingInputDto | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanySetting/CreateOrUpdateAccountSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateAccountSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateAccountSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateOrUpdateAccountSetting(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrUpdateTransactionNoSetting(body: CreateUpdateTransactionNoSettingInputDto[] | undefined): Observable<JournalTypeNameValueDto[]> {
        let url_ = this.baseUrl + "/api/services/app/CompanySetting/CreateOrUpdateTransactionNoSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateTransactionNoSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateTransactionNoSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JournalTypeNameValueDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JournalTypeNameValueDto[]>;
        }));
    }

    protected processCreateOrUpdateTransactionNoSetting(response: HttpResponseBase): Observable<JournalTypeNameValueDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(JournalTypeNameValueDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDetail(): Observable<CompanySettingDto> {
        let url_ = this.baseUrl + "/api/services/app/CompanySetting/GetDetail";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompanySettingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompanySettingDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<CompanySettingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanySettingDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ConfigurationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changeUiTheme(body: ChangeUiThemeInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Configuration/ChangeUiTheme";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeUiTheme(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeUiTheme(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangeUiTheme(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CountryServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateCountryInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Country/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageCountryInputDto | undefined): Observable<FindCountryDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Country/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCountryDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCountryDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindCountryDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCountryDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<CountryDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Country/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CountryDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CountryDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<CountryDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CountryDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param currencies_Exclude (optional) 
     * @param currencies_Ids (optional) 
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(currencies_Exclude: boolean | undefined, currencies_Ids: number[] | undefined, isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<CountryListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Country/GetList?";
        if (currencies_Exclude === null)
            throw new Error("The parameter 'currencies_Exclude' cannot be null.");
        else if (currencies_Exclude !== undefined)
            url_ += "Currencies.Exclude=" + encodeURIComponent("" + currencies_Exclude) + "&";
        if (currencies_Ids === null)
            throw new Error("The parameter 'currencies_Ids' cannot be null.");
        else if (currencies_Ids !== undefined)
            currencies_Ids && currencies_Ids.forEach(item => { url_ += "Currencies.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CountryListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CountryListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<CountryListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CountryListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelCountryInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Country/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Country/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateCountryInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CPUServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateCPUInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/CPU/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CPU/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CPU/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CPU/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CPU/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindCPUDto> {
        let url_ = this.baseUrl + "/api/services/app/CPU/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCPUDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCPUDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindCPUDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCPUDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageCPUInputDto | undefined): Observable<FindCPUDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/CPU/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCPUDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCPUDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindCPUDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCPUDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<CPUDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/CPU/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CPUDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CPUDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<CPUDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CPUDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<CPUListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/CPU/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CPUListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CPUListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<CPUListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CPUListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelCPUInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/CPU/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/CPU/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CPU/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateCPUInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CPU/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CurrencyServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateCurrencyInputDto | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Currency/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindCurrencyDto> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCurrencyDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCurrencyDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindCurrencyDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCurrencyDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageCurrencyInputDto | undefined): Observable<FindCurrencyDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Currency/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindCurrencyDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindCurrencyDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindCurrencyDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindCurrencyDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: number | undefined): Observable<CurrencyDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CurrencyDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CurrencyDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<CurrencyDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CurrencyDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<CurrencyListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CurrencyListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CurrencyListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<CurrencyListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CurrencyListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelCurrencyInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Currency/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Currency/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateCurrencyInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getEditions(keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<EditionListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions?";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EditionListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EditionListDtoPagedResultDto>;
        }));
    }

    protected processGetEditions(response: HttpResponseBase): Observable<EditionListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditionListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getEditionForEdit(id: number | undefined): Observable<GetEditionEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionForEdit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetEditionEditOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetEditionEditOutput>;
        }));
    }

    protected processGetEditionForEdit(response: HttpResponseBase): Observable<GetEditionEditOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetEditionEditOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getFeatures(): Observable<FlatFeatureDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetFeatures";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeatures(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FlatFeatureDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FlatFeatureDtoListResultDto>;
        }));
    }

    protected processGetFeatures(response: HttpResponseBase): Observable<FlatFeatureDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FlatFeatureDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrUpdateEdition(body: CreateOrUpdateEditionDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateEdition(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreateOrUpdateEdition(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteEdition(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEdition(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteEdition(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param selectedEditionId (optional) 
     * @param addAllItem (optional) 
     * @return OK
     */
    getEditionComboboxItems(selectedEditionId: number | undefined, addAllItem: boolean | undefined): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId === null)
            throw new Error("The parameter 'selectedEditionId' cannot be null.");
        else if (selectedEditionId !== undefined)
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&";
        if (addAllItem === null)
            throw new Error("The parameter 'addAllItem' cannot be null.");
        else if (addAllItem !== undefined)
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionComboboxItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionComboboxItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ComboboxItemDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ComboboxItemDto[]>;
        }));
    }

    protected processGetEditionComboboxItems(response: HttpResponseBase): Observable<ComboboxItemDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class FieldAServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateFieldAInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindFieldADto> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindFieldADto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindFieldADto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindFieldADto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindFieldADto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageFieldAInputDto | undefined): Observable<FindFieldADtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindFieldADtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindFieldADtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindFieldADtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindFieldADtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<FieldADetailDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldADetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldADetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<FieldADetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FieldADetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<FieldAListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldAListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldAListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<FieldAListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FieldAListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelFieldAInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateFieldAInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldA/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class FieldBServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateFieldBInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindFieldBDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindFieldBDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindFieldBDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindFieldBDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindFieldBDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageFieldBInputDto | undefined): Observable<FindFieldBDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindFieldBDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindFieldBDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindFieldBDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindFieldBDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<FieldBDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldBDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldBDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<FieldBDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FieldBDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<FieldBListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldBListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldBListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<FieldBListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FieldBListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelFieldBInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateFieldBInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldB/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class FieldCServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateFieldCInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindFieldCDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindFieldCDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindFieldCDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindFieldCDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindFieldCDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageFieldCInputDto | undefined): Observable<FindFieldCDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindFieldCDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindFieldCDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindFieldCDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindFieldCDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<FieldCDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldCDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldCDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<FieldCDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FieldCDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<FieldCListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldCListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldCListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<FieldCListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FieldCListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelFieldCInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateFieldCInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/FieldC/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class HDDServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateHDDInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/HDD/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HDD/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HDD/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HDD/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HDD/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindHDDDto> {
        let url_ = this.baseUrl + "/api/services/app/HDD/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindHDDDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindHDDDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindHDDDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindHDDDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageHDDInputDto | undefined): Observable<FindHDDDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/HDD/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindHDDDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindHDDDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindHDDDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindHDDDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<HDDDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/HDD/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HDDDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HDDDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<HDDDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HDDDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<HDDListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/HDD/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HDDListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HDDListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<HDDListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HDDListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelHDDInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/HDD/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/HDD/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HDD/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateHDDInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HDD/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HostSettingsEditDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HostSettingsEditDto>;
        }));
    }

    protected processGetAllSettings(response: HttpResponseBase): Observable<HostSettingsEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HostSettingsEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateAllSettings(body: HostSettingsEditDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAllSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAllSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateAllSettings(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    sendTestEmail(body: SendTestEmailInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendTestEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendTestEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSendTestEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ItemBrandServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateItemBrandInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindItemBrandDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemBrandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemBrandDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindItemBrandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemBrandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageItemBrandInputDto | undefined): Observable<FindItemBrandDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemBrandDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemBrandDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindItemBrandDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemBrandDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ItemBrandDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemBrandDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemBrandDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ItemBrandDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemBrandDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ItemBrandListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemBrandListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemBrandListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ItemBrandListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemBrandListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelItemBrandInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateItemBrandInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemBrand/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ItemGradeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateItemGradeInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindItemGradeDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemGradeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemGradeDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindItemGradeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemGradeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageItemGradeInputDto | undefined): Observable<FindItemGradeDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemGradeDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemGradeDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindItemGradeDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemGradeDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ItemGradeDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemGradeDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemGradeDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ItemGradeDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemGradeDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ItemGradeListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemGradeListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemGradeListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ItemGradeListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemGradeListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelItemGradeInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateItemGradeInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGrade/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ItemGroupServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateItemGroupInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindItemGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemGroupDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemGroupDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindItemGroupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemGroupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageItemGroupInputDto | undefined): Observable<FindItemGroupDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemGroupDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemGroupDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindItemGroupDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemGroupDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ItemGroupDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemGroupDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemGroupDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ItemGroupDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemGroupDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ItemGroupListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemGroupListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemGroupListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ItemGroupListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemGroupListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelItemGroupInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateItemGroupInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemGroup/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ItemModelServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateItemModelInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindItemModelDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemModelDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemModelDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindItemModelDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemModelDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageItemModelInputDto | undefined): Observable<FindItemModelDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemModelDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemModelDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindItemModelDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemModelDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ItemModelDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemModelDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemModelDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ItemModelDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemModelDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ItemModelListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemModelListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemModelListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ItemModelListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemModelListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelItemModelInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateItemModelInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemModel/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ItemSeriesServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateItemSeriesInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindItemSeriesDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemSeriesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemSeriesDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindItemSeriesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemSeriesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageItemSeriesInputDto | undefined): Observable<FindItemSeriesDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemSeriesDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemSeriesDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindItemSeriesDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemSeriesDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ItemSeriesDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemSeriesDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemSeriesDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ItemSeriesDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemSeriesDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ItemSeriesListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemSeriesListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemSeriesListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ItemSeriesListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemSeriesListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelItemSeriesInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateItemSeriesInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSeries/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ItemSizeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateItemSizeInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindItemSizeDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemSizeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemSizeDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindItemSizeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemSizeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageItemSizeInputDto | undefined): Observable<FindItemSizeDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindItemSizeDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindItemSizeDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindItemSizeDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindItemSizeDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ItemSizeDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemSizeDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemSizeDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ItemSizeDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemSizeDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ItemSizeListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemSizeListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemSizeListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ItemSizeListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemSizeListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelItemSizeInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateItemSizeInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ItemSize/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class KhanDistrictServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateKhanDistrictInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageKhanDistrictInputDto | undefined): Observable<FindKhanDistrictDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindKhanDistrictDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindKhanDistrictDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindKhanDistrictDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindKhanDistrictDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<KhanDistrictDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<KhanDistrictDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<KhanDistrictDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<KhanDistrictDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KhanDistrictDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param countries_Exclude (optional) 
     * @param countries_Ids (optional) 
     * @param cityProvinces_Exclude (optional) 
     * @param cityProvinces_Ids (optional) 
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(countries_Exclude: boolean | undefined, countries_Ids: string[] | undefined, cityProvinces_Exclude: boolean | undefined, cityProvinces_Ids: string[] | undefined, isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<KhanDistrictListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/GetList?";
        if (countries_Exclude === null)
            throw new Error("The parameter 'countries_Exclude' cannot be null.");
        else if (countries_Exclude !== undefined)
            url_ += "Countries.Exclude=" + encodeURIComponent("" + countries_Exclude) + "&";
        if (countries_Ids === null)
            throw new Error("The parameter 'countries_Ids' cannot be null.");
        else if (countries_Ids !== undefined)
            countries_Ids && countries_Ids.forEach(item => { url_ += "Countries.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (cityProvinces_Exclude === null)
            throw new Error("The parameter 'cityProvinces_Exclude' cannot be null.");
        else if (cityProvinces_Exclude !== undefined)
            url_ += "CityProvinces.Exclude=" + encodeURIComponent("" + cityProvinces_Exclude) + "&";
        if (cityProvinces_Ids === null)
            throw new Error("The parameter 'cityProvinces_Ids' cannot be null.");
        else if (cityProvinces_Ids !== undefined)
            cityProvinces_Ids && cityProvinces_Ids.forEach(item => { url_ += "CityProvinces.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<KhanDistrictListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<KhanDistrictListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<KhanDistrictListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KhanDistrictListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelKhanDistrictInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateKhanDistrictInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/KhanDistrict/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getLanguages(keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedLanguagesResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages?";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLanguages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLanguages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PagedLanguagesResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PagedLanguagesResultDto>;
        }));
    }

    protected processGetLanguages(response: HttpResponseBase): Observable<PagedLanguagesResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedLanguagesResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getLanguageForEdit(id: number | undefined): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLanguageForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLanguageForEdit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetLanguageForEditOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetLanguageForEditOutput>;
        }));
    }

    protected processGetLanguageForEdit(response: HttpResponseBase): Observable<GetLanguageForEditOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetLanguageForEditOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrUpdateLanguage(body: CreateOrUpdateLanguageInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateLanguage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreateOrUpdateLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteLanguage(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteLanguage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setDefaultLanguage(body: SetDefaultLanguageInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetDefaultLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetDefaultLanguage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetDefaultLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param baseLanguageName (optional) 
     * @param targetValueFilter (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getLanguageTexts(sourceName: string, baseLanguageName: string | undefined, targetLanguageName: string, targetValueFilter: string | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<LanguageTextListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (sourceName === undefined || sourceName === null)
            throw new Error("The parameter 'sourceName' must be defined and cannot be null.");
        else
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&";
        if (baseLanguageName === null)
            throw new Error("The parameter 'baseLanguageName' cannot be null.");
        else if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&";
        if (targetLanguageName === undefined || targetLanguageName === null)
            throw new Error("The parameter 'targetLanguageName' must be defined and cannot be null.");
        else
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&";
        if (targetValueFilter === null)
            throw new Error("The parameter 'targetValueFilter' cannot be null.");
        else if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLanguageTexts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLanguageTexts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LanguageTextListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LanguageTextListDtoPagedResultDto>;
        }));
    }

    protected processGetLanguageTexts(response: HttpResponseBase): Observable<LanguageTextListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LanguageTextListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateLanguageText(body: UpdateLanguageTextInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateLanguageText(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateLanguageText(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateLanguageText(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class LocationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateLocationInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Location/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageLocationInputDto | undefined): Observable<FindLocationDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Location/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindLocationDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindLocationDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindLocationDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindLocationDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<LocationDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Location/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LocationDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LocationDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<LocationDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LocationDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<LocationListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Location/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LocationListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LocationListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<LocationListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LocationListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelLocationInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Location/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Location/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateLocationInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getOrganizationUnits(): Observable<OrganizationUnitDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrganizationUnits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrganizationUnits(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrganizationUnitDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrganizationUnitDtoListResultDto>;
        }));
    }

    protected processGetOrganizationUnits(response: HttpResponseBase): Observable<OrganizationUnitDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getOrganizationUnitUsers(id: number | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<OrganizationUnitUserListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrganizationUnitUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrganizationUnitUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrganizationUnitUserListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrganizationUnitUserListDtoPagedResultDto>;
        }));
    }

    protected processGetOrganizationUnitUsers(response: HttpResponseBase): Observable<OrganizationUnitUserListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitUserListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createOrganizationUnit(body: CreateOrganizationUnitInput | undefined): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrganizationUnit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrganizationUnitDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrganizationUnitDto>;
        }));
    }

    protected processCreateOrganizationUnit(response: HttpResponseBase): Observable<OrganizationUnitDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateOrganizationUnit(body: UpdateOrganizationUnitInput | undefined): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrganizationUnit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrganizationUnitDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrganizationUnitDto>;
        }));
    }

    protected processUpdateOrganizationUnit(response: HttpResponseBase): Observable<OrganizationUnitDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    moveOrganizationUnit(body: MoveOrganizationUnitInput | undefined): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMoveOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMoveOrganizationUnit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrganizationUnitDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrganizationUnitDto>;
        }));
    }

    protected processMoveOrganizationUnit(response: HttpResponseBase): Observable<OrganizationUnitDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteOrganizationUnit(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteOrganizationUnit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteOrganizationUnit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param userId (optional) 
     * @param organizationUnitId (optional) 
     * @return OK
     */
    removeUserFromOrganizationUnit(userId: number | undefined, organizationUnitId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (organizationUnitId === null)
            throw new Error("The parameter 'organizationUnitId' cannot be null.");
        else if (organizationUnitId !== undefined)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveUserFromOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveUserFromOrganizationUnit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveUserFromOrganizationUnit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addUsersToOrganizationUnit(body: UsersToOrganizationUnitInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUsersToOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUsersToOrganizationUnit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddUsersToOrganizationUnit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    findUsers(body: FindOrganizationUnitUsersInput | undefined): Observable<NameValueDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NameValueDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NameValueDtoPagedResultDto>;
        }));
    }

    protected processFindUsers(response: HttpResponseBase): Observable<NameValueDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NameValueDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUserProfileForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUserProfileForEdit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CurrentUserProfileEditDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CurrentUserProfileEditDto>;
        }));
    }

    protected processGetCurrentUserProfileForEdit(response: HttpResponseBase): Observable<CurrentUserProfileEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CurrentUserProfileEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    updateGoogleAuthenticatorKey(): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateGoogleAuthenticatorKey";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateGoogleAuthenticatorKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateGoogleAuthenticatorKey(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UpdateGoogleAuthenticatorKeyOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UpdateGoogleAuthenticatorKeyOutput>;
        }));
    }

    protected processUpdateGoogleAuthenticatorKey(response: HttpResponseBase): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateGoogleAuthenticatorKeyOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    sendVerificationSms(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/SendVerificationSms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendVerificationSms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendVerificationSms(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSendVerificationSms(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    verifySmsCode(body: VerifySmsCodeInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/VerifySmsCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifySmsCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifySmsCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processVerifySmsCode(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateCurrentUserProfile(body: CurrentUserProfileEditDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCurrentUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCurrentUserProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateCurrentUserProfile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changePassword(body: ChangePasswordInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetPasswordComplexitySetting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPasswordComplexitySetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPasswordComplexitySetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPasswordComplexitySettingOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPasswordComplexitySettingOutput>;
        }));
    }

    protected processGetPasswordComplexitySetting(response: HttpResponseBase): Observable<GetPasswordComplexitySettingOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPasswordComplexitySettingOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class RAMServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateRAMInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/RAM/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/RAM/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/RAM/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/RAM/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/RAM/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindRAMDto> {
        let url_ = this.baseUrl + "/api/services/app/RAM/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindRAMDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindRAMDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindRAMDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindRAMDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageRAMInputDto | undefined): Observable<FindRAMDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/RAM/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindRAMDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindRAMDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindRAMDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindRAMDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<RAMDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/RAM/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RAMDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RAMDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<RAMDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RAMDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<RAMListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/RAM/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RAMListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RAMListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<RAMListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RAMListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelRAMInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/RAM/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/RAM/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/RAM/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateRAMInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/RAM/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateRoleDto | undefined): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<RoleDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param permission (optional) 
     * @return OK
     */
    getRoles(permission: string | undefined): Observable<RoleListDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (permission === null)
            throw new Error("The parameter 'permission' cannot be null.");
        else if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleListDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleListDtoListResultDto>;
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<RoleListDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleListDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getAll(keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<RoleDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleDtoPagedResultDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RoleDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: RoleDto | undefined): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RoleDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAllPermissions(): Observable<PermissionDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPermissions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PermissionDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PermissionDtoListResultDto>;
        }));
    }

    protected processGetAllPermissions(response: HttpResponseBase): Observable<PermissionDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermissionDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getRoleForEdit(id: number | undefined): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleForEdit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetRoleForEditOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetRoleForEditOutput>;
        }));
    }

    protected processGetRoleForEdit(response: HttpResponseBase): Observable<GetRoleForEditOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRoleForEditOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    get(id: number | undefined): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RoleDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class SangkatCommuneServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateSangkatCommuneInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageSangkatCommuneInputDto | undefined): Observable<FindSangkatCommuneDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindSangkatCommuneDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindSangkatCommuneDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindSangkatCommuneDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindSangkatCommuneDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<SangkatCommuneDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SangkatCommuneDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SangkatCommuneDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<SangkatCommuneDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SangkatCommuneDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param countries_Exclude (optional) 
     * @param countries_Ids (optional) 
     * @param cityProvinces_Exclude (optional) 
     * @param cityProvinces_Ids (optional) 
     * @param khanDistricts_Exclude (optional) 
     * @param khanDistricts_Ids (optional) 
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(countries_Exclude: boolean | undefined, countries_Ids: string[] | undefined, cityProvinces_Exclude: boolean | undefined, cityProvinces_Ids: string[] | undefined, khanDistricts_Exclude: boolean | undefined, khanDistricts_Ids: string[] | undefined, isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<SangkatCommuneListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/GetList?";
        if (countries_Exclude === null)
            throw new Error("The parameter 'countries_Exclude' cannot be null.");
        else if (countries_Exclude !== undefined)
            url_ += "Countries.Exclude=" + encodeURIComponent("" + countries_Exclude) + "&";
        if (countries_Ids === null)
            throw new Error("The parameter 'countries_Ids' cannot be null.");
        else if (countries_Ids !== undefined)
            countries_Ids && countries_Ids.forEach(item => { url_ += "Countries.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (cityProvinces_Exclude === null)
            throw new Error("The parameter 'cityProvinces_Exclude' cannot be null.");
        else if (cityProvinces_Exclude !== undefined)
            url_ += "CityProvinces.Exclude=" + encodeURIComponent("" + cityProvinces_Exclude) + "&";
        if (cityProvinces_Ids === null)
            throw new Error("The parameter 'cityProvinces_Ids' cannot be null.");
        else if (cityProvinces_Ids !== undefined)
            cityProvinces_Ids && cityProvinces_Ids.forEach(item => { url_ += "CityProvinces.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (khanDistricts_Exclude === null)
            throw new Error("The parameter 'khanDistricts_Exclude' cannot be null.");
        else if (khanDistricts_Exclude !== undefined)
            url_ += "KhanDistricts.Exclude=" + encodeURIComponent("" + khanDistricts_Exclude) + "&";
        if (khanDistricts_Ids === null)
            throw new Error("The parameter 'khanDistricts_Ids' cannot be null.");
        else if (khanDistricts_Ids !== undefined)
            khanDistricts_Ids && khanDistricts_Ids.forEach(item => { url_ += "KhanDistricts.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SangkatCommuneListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SangkatCommuneListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<SangkatCommuneListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SangkatCommuneListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelSangkatCommuneInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateSangkatCommuneInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SangkatCommune/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ScreenServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateScreenInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Screen/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Screen/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Screen/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Screen/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Screen/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindScreenDto> {
        let url_ = this.baseUrl + "/api/services/app/Screen/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindScreenDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindScreenDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindScreenDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindScreenDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageScreenInputDto | undefined): Observable<FindScreenDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Screen/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindScreenDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindScreenDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindScreenDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindScreenDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<ScreenDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Screen/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ScreenDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ScreenDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<ScreenDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScreenDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<ScreenListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Screen/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ScreenListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ScreenListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ScreenListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScreenListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelScreenInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Screen/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Screen/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Screen/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateScreenInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Screen/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentLoginInformations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentLoginInformations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetCurrentLoginInformationsOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetCurrentLoginInformationsOutput>;
        }));
    }

    protected processGetCurrentLoginInformations(response: HttpResponseBase): Observable<GetCurrentLoginInformationsOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCurrentLoginInformationsOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class TaxServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateTaxInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Tax/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tax/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tax/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tax/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tax/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindTaxDto> {
        let url_ = this.baseUrl + "/api/services/app/Tax/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindTaxDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindTaxDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindTaxDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindTaxDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageTaxInputDto | undefined): Observable<FindTaxDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Tax/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindTaxDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindTaxDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindTaxDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindTaxDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<TaxDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Tax/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TaxDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TaxDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<TaxDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaxDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<TaxListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Tax/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TaxListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TaxListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<TaxListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaxListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelTaxInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tax/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tax/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tax/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateTaxInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tax/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    get(id: number | undefined): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TenantDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TenantDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getAll(isActive: boolean | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<TenantDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetAll?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TenantDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TenantDtoPagedResultDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<TenantDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateTenantDto | undefined): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TenantDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TenantDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<TenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: TenantDto | undefined): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TenantDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TenantDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<TenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getTenantFeaturesForEdit(id: number | undefined): Observable<GetTenantFeaturesEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantFeaturesForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantFeaturesForEdit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetTenantFeaturesEditOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetTenantFeaturesEditOutput>;
        }));
    }

    protected processGetTenantFeaturesForEdit(response: HttpResponseBase): Observable<GetTenantFeaturesEditOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTenantFeaturesEditOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateTenantFeatures(body: UpdateTenantFeaturesInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTenantFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTenantFeatures(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateTenantFeatures(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    resetTenantSpecificFeatures(body: EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetTenantSpecificFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetTenantSpecificFeatures(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processResetTenantSpecificFeatures(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class TestServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param to (optional) 
     * @param subject (optional) 
     * @param message (optional) 
     * @param bodyHtml (optional) 
     * @return OK
     */
    testSendMail(to: string | undefined, subject: string | undefined, message: string | undefined, bodyHtml: boolean | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Test/TestSendMail?";
        if (to === null)
            throw new Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to) + "&";
        if (subject === null)
            throw new Error("The parameter 'subject' cannot be null.");
        else if (subject !== undefined)
            url_ += "subject=" + encodeURIComponent("" + subject) + "&";
        if (message === null)
            throw new Error("The parameter 'message' cannot be null.");
        else if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&";
        if (bodyHtml === null)
            throw new Error("The parameter 'bodyHtml' cannot be null.");
        else if (bodyHtml !== undefined)
            url_ += "bodyHtml=" + encodeURIComponent("" + bodyHtml) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestSendMail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestSendMail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTestSendMail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    pdfBacord(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Test/PdfBacord";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPdfBacord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPdfBacord(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPdfBacord(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    testPdf(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Test/TestPdf";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestPdf(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestPdf(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTestPdf(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    testHangfire(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Test/TestHangfire";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestHangfire(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestHangfire(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTestHangfire(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param records (optional) 
     * @return OK
     */
    testBulkInsert(records: number | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Test/TestBulkInsert?";
        if (records === null)
            throw new Error("The parameter 'records' cannot be null.");
        else if (records !== undefined)
            url_ += "records=" + encodeURIComponent("" + records) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestBulkInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestBulkInsert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processTestBulkInsert(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param orderBy (optional) 
     * @param skip (optional) 
     * @param take (optional) 
     * @return OK
     */
    getLinqSkipTake(orderBy: string | undefined, skip: number | undefined, take: number | undefined): Observable<TestModelOutput[]> {
        let url_ = this.baseUrl + "/api/services/app/Test/GetLinqSkipTake?";
        if (orderBy === null)
            throw new Error("The parameter 'orderBy' cannot be null.");
        else if (orderBy !== undefined)
            url_ += "orderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLinqSkipTake(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLinqSkipTake(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TestModelOutput[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TestModelOutput[]>;
        }));
    }

    protected processGetLinqSkipTake(response: HttpResponseBase): Observable<TestModelOutput[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TestModelOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    timeZones(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/Test/TimeZones";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTimeZones(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTimeZones(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processTimeZones(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param defaultTimezoneScope (optional) 
     * @return OK
     */
    getTimezones(defaultTimezoneScope: SettingScopes | undefined): Observable<NameValueDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope === null)
            throw new Error("The parameter 'defaultTimezoneScope' cannot be null.");
        else if (defaultTimezoneScope !== undefined)
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimezones(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimezones(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NameValueDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NameValueDtoListResultDto>;
        }));
    }

    protected processGetTimezones(response: HttpResponseBase): Observable<NameValueDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NameValueDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param selectedTimezoneId (optional) 
     * @return OK
     */
    getTimezoneComboboxItems(selectedTimezoneId: string | undefined): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId === null)
            throw new Error("The parameter 'selectedTimezoneId' cannot be null.");
        else if (selectedTimezoneId !== undefined)
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimezoneComboboxItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimezoneComboboxItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ComboboxItemDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ComboboxItemDto[]>;
        }));
    }

    protected processGetTimezoneComboboxItems(response: HttpResponseBase): Observable<ComboboxItemDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    authenticate(body: AuthenticateModel | undefined): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticateResultModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticateResultModel>;
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateResultModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResultModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param switchAccountToken (optional) 
     * @return OK
     */
    linkedAccountAuthenticate(switchAccountToken: string | undefined): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken === null)
            throw new Error("The parameter 'switchAccountToken' cannot be null.");
        else if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLinkedAccountAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLinkedAccountAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwitchedAccountAuthenticateResultModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwitchedAccountAuthenticateResultModel>;
        }));
    }

    protected processLinkedAccountAuthenticate(response: HttpResponseBase): Observable<SwitchedAccountAuthenticateResultModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SwitchedAccountAuthenticateResultModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param impersonationToken (optional) 
     * @return OK
     */
    impersonatedAuthenticate(impersonationToken: string | undefined): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken === null)
            throw new Error("The parameter 'impersonationToken' cannot be null.");
        else if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImpersonatedAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImpersonatedAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ImpersonatedAuthenticateResultModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ImpersonatedAuthenticateResultModel>;
        }));
    }

    protected processImpersonatedAuthenticate(response: HttpResponseBase): Observable<ImpersonatedAuthenticateResultModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImpersonatedAuthenticateResultModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    logOut(): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/LogOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogOut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogOut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLogOut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExternalAuthenticationProviders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExternalAuthenticationProviders(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExternalLoginProviderInfoModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExternalLoginProviderInfoModel[]>;
        }));
    }

    protected processGetExternalAuthenticationProviders(response: HttpResponseBase): Observable<ExternalLoginProviderInfoModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    externalAuthenticate(body: ExternalAuthenticateModel | undefined): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExternalAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExternalAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExternalAuthenticateResultModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExternalAuthenticateResultModel>;
        }));
    }

    protected processExternalAuthenticate(response: HttpResponseBase): Observable<ExternalAuthenticateResultModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExternalAuthenticateResultModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class UnitServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateUnitInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Unit/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Unit/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Unit/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Unit/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Unit/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/Unit/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindUnitDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindUnitDto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindUnitDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindUnitDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageUnitInputDto | undefined): Observable<FindUnitDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Unit/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindUnitDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindUnitDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindUnitDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindUnitDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<UnitDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Unit/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UnitDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UnitDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<UnitDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<UnitListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Unit/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UnitListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UnitListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<UnitListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelUnitInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Unit/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Unit/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Unit/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateUnitInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Unit/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    get(id: number | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    findUsers(body: FindUsersInput | undefined): Observable<UserSummaryDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/User/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserSummaryDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserSummaryDtoPagedResultDto>;
        }));
    }

    protected processFindUsers(response: HttpResponseBase): Observable<UserSummaryDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSummaryDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getAll(isActive: boolean | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<UserDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetAll?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoPagedResultDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUserDto | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: UserDto | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    activate(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Activate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActivate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processActivate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    deactivate(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Deactivate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeactivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeactivate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeactivate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getRoles(): Observable<RoleDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetRoles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleDtoListResultDto>;
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<RoleDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changePassword(body: ChangePasswordDto | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    resetPassword(body: ResetPasswordDto | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getUserPermissionsForEdit(id: number | undefined): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserPermissionsForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserPermissionsForEdit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetUserPermissionsForEditOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetUserPermissionsForEditOutput>;
        }));
    }

    protected processGetUserPermissionsForEdit(response: HttpResponseBase): Observable<GetUserPermissionsForEditOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserPermissionsForEditOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateUserPermissions(body: UpdateUserPermissionsInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserPermissions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateUserPermissions(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    resetUserSpecificPermissions(body: Int64EntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetUserSpecificPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetUserSpecificPermissions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processResetUserSpecificPermissions(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    linkToUser(body: LinkToUserInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLinkToUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLinkToUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLinkToUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getLinkedUsers(sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<LinkedUserDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLinkedUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLinkedUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LinkedUserDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LinkedUserDtoPagedResultDto>;
        }));
    }

    protected processGetLinkedUsers(response: HttpResponseBase): Observable<LinkedUserDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LinkedUserDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getRecentlyUsedLinkedUsers(): Observable<LinkedUserDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecentlyUsedLinkedUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecentlyUsedLinkedUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LinkedUserDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LinkedUserDtoListResultDto>;
        }));
    }

    protected processGetRecentlyUsedLinkedUsers(response: HttpResponseBase): Observable<LinkedUserDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LinkedUserDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    unlinkUser(body: UnlinkUserInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnlinkUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlinkUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUnlinkUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getRecentUserLoginAttempts(): Observable<UserLoginAttemptDtoListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecentUserLoginAttempts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecentUserLoginAttempts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserLoginAttemptDtoListResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserLoginAttemptDtoListResultDto>;
        }));
    }

    protected processGetRecentUserLoginAttempts(response: HttpResponseBase): Observable<UserLoginAttemptDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserLoginAttemptDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class UserSettingsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param input (optional) 
     * @return OK
     */
    updateUIEnable(input: boolean | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserSettings/UpdateUIEnable?";
        if (input === null)
            throw new Error("The parameter 'input' cannot be null.");
        else if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUIEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUIEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateUIEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    sendTestEmail(body: SendTestEmailInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendTestEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendTestEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSendTestEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class VGAServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateVGAInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/VGA/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VGA/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VGA/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VGA/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setAsDefault(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VGA/SetAsDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsDefault(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetAsDefault(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDefaultValue(): Observable<FindVGADto> {
        let url_ = this.baseUrl + "/api/services/app/VGA/GetDefaultValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultValue(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindVGADto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindVGADto>;
        }));
    }

    protected processGetDefaultValue(response: HttpResponseBase): Observable<FindVGADto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindVGADto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageVGAInputDto | undefined): Observable<FindVGADtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/VGA/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindVGADtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindVGADtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindVGADtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindVGADtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<VGADetailDto> {
        let url_ = this.baseUrl + "/api/services/app/VGA/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VGADetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VGADetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<VGADetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VGADetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<VGAListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/VGA/GetList?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VGAListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VGAListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<VGAListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VGAListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelVGAInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/VGA/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/VGA/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VGA/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateVGAInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VGA/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class VillageServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateUpdateVillageInputDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Village/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    delete(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Village/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    disable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Village/Disable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    enable(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Village/Enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    find(body: PageVillageInputDto | undefined): Observable<FindVillageDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Village/Find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFind(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFind(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FindVillageDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FindVillageDtoPagedResultDto>;
        }));
    }

    protected processFind(response: HttpResponseBase): Observable<FindVillageDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindVillageDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getDetail(id: string | undefined): Observable<VillageDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Village/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VillageDetailDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VillageDetailDto>;
        }));
    }

    protected processGetDetail(response: HttpResponseBase): Observable<VillageDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VillageDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param countries_Exclude (optional) 
     * @param countries_Ids (optional) 
     * @param cityProvinces_Exclude (optional) 
     * @param cityProvinces_Ids (optional) 
     * @param khanDistricts_Exclude (optional) 
     * @param khanDistricts_Ids (optional) 
     * @param sangkatCommunes_Exclude (optional) 
     * @param sangkatCommunes_Ids (optional) 
     * @param isActive (optional) 
     * @param creators_Exclude (optional) 
     * @param creators_Ids (optional) 
     * @param modifiers_Exclude (optional) 
     * @param modifiers_Ids (optional) 
     * @param keyword (optional) 
     * @param sortField (optional) 
     * @param sortMode (optional) 
     * @param usePagination (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return OK
     */
    getList(countries_Exclude: boolean | undefined, countries_Ids: string[] | undefined, cityProvinces_Exclude: boolean | undefined, cityProvinces_Ids: string[] | undefined, khanDistricts_Exclude: boolean | undefined, khanDistricts_Ids: string[] | undefined, sangkatCommunes_Exclude: boolean | undefined, sangkatCommunes_Ids: string[] | undefined, isActive: boolean | undefined, creators_Exclude: boolean | undefined, creators_Ids: number[] | undefined, modifiers_Exclude: boolean | undefined, modifiers_Ids: number[] | undefined, keyword: string | undefined, sortField: string | undefined, sortMode: SortMode | undefined, usePagination: boolean | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<VillageListDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Village/GetList?";
        if (countries_Exclude === null)
            throw new Error("The parameter 'countries_Exclude' cannot be null.");
        else if (countries_Exclude !== undefined)
            url_ += "Countries.Exclude=" + encodeURIComponent("" + countries_Exclude) + "&";
        if (countries_Ids === null)
            throw new Error("The parameter 'countries_Ids' cannot be null.");
        else if (countries_Ids !== undefined)
            countries_Ids && countries_Ids.forEach(item => { url_ += "Countries.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (cityProvinces_Exclude === null)
            throw new Error("The parameter 'cityProvinces_Exclude' cannot be null.");
        else if (cityProvinces_Exclude !== undefined)
            url_ += "CityProvinces.Exclude=" + encodeURIComponent("" + cityProvinces_Exclude) + "&";
        if (cityProvinces_Ids === null)
            throw new Error("The parameter 'cityProvinces_Ids' cannot be null.");
        else if (cityProvinces_Ids !== undefined)
            cityProvinces_Ids && cityProvinces_Ids.forEach(item => { url_ += "CityProvinces.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (khanDistricts_Exclude === null)
            throw new Error("The parameter 'khanDistricts_Exclude' cannot be null.");
        else if (khanDistricts_Exclude !== undefined)
            url_ += "KhanDistricts.Exclude=" + encodeURIComponent("" + khanDistricts_Exclude) + "&";
        if (khanDistricts_Ids === null)
            throw new Error("The parameter 'khanDistricts_Ids' cannot be null.");
        else if (khanDistricts_Ids !== undefined)
            khanDistricts_Ids && khanDistricts_Ids.forEach(item => { url_ += "KhanDistricts.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (sangkatCommunes_Exclude === null)
            throw new Error("The parameter 'sangkatCommunes_Exclude' cannot be null.");
        else if (sangkatCommunes_Exclude !== undefined)
            url_ += "SangkatCommunes.Exclude=" + encodeURIComponent("" + sangkatCommunes_Exclude) + "&";
        if (sangkatCommunes_Ids === null)
            throw new Error("The parameter 'sangkatCommunes_Ids' cannot be null.");
        else if (sangkatCommunes_Ids !== undefined)
            sangkatCommunes_Ids && sangkatCommunes_Ids.forEach(item => { url_ += "SangkatCommunes.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (creators_Exclude === null)
            throw new Error("The parameter 'creators_Exclude' cannot be null.");
        else if (creators_Exclude !== undefined)
            url_ += "Creators.Exclude=" + encodeURIComponent("" + creators_Exclude) + "&";
        if (creators_Ids === null)
            throw new Error("The parameter 'creators_Ids' cannot be null.");
        else if (creators_Ids !== undefined)
            creators_Ids && creators_Ids.forEach(item => { url_ += "Creators.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (modifiers_Exclude === null)
            throw new Error("The parameter 'modifiers_Exclude' cannot be null.");
        else if (modifiers_Exclude !== undefined)
            url_ += "Modifiers.Exclude=" + encodeURIComponent("" + modifiers_Exclude) + "&";
        if (modifiers_Ids === null)
            throw new Error("The parameter 'modifiers_Ids' cannot be null.");
        else if (modifiers_Ids !== undefined)
            modifiers_Ids && modifiers_Ids.forEach(item => { url_ += "Modifiers.Ids=" + encodeURIComponent("" + item) + "&"; });
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortMode === null)
            throw new Error("The parameter 'sortMode' cannot be null.");
        else if (sortMode !== undefined)
            url_ += "SortMode=" + encodeURIComponent("" + sortMode) + "&";
        if (usePagination === null)
            throw new Error("The parameter 'usePagination' cannot be null.");
        else if (usePagination !== undefined)
            url_ += "UsePagination=" + encodeURIComponent("" + usePagination) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VillageListDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VillageListDtoPagedResultDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<VillageListDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VillageListDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    exportExcel(body: ExportExcelVillageInputDto | undefined): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Village/ExportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    exportExcelTemplate(): Observable<ExportFileOutput> {
        let url_ = this.baseUrl + "/api/services/app/Village/ExportExcelTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExportFileOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExportFileOutput>;
        }));
    }

    protected processExportExcelTemplate(response: HttpResponseBase): Observable<ExportFileOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExportFileOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    importExcel(body: FileTokenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Village/ImportExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportExcel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImportExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: CreateUpdateVillageInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Village/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export enum AccountType {
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _20 = 20,
    _21 = 21,
    _22 = 22,
    _23 = 23,
    _30 = 30,
    _40 = 40,
    _41 = 41,
    _50 = 50,
    _51 = 51,
    _52 = 52,
}

export class AccountTypeFilterInputDto implements IAccountTypeFilterInputDto {
    exclude: boolean;
    ids: AccountType[] | undefined;

    constructor(data?: IAccountTypeFilterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exclude = _data["exclude"];
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids.push(item);
            }
        }
    }

    static fromJS(data: any): AccountTypeFilterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AccountTypeFilterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exclude"] = this.exclude;
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data;
    }

    clone(): AccountTypeFilterInputDto {
        const json = this.toJSON();
        let result = new AccountTypeFilterInputDto();
        result.init(json);
        return result;
    }
}

export interface IAccountTypeFilterInputDto {
    exclude: boolean;
    ids: AccountType[] | undefined;
}

export class AccountTypeNameValueDto implements IAccountTypeNameValueDto {
    name: string | undefined;
    value: AccountType;

    constructor(data?: IAccountTypeNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): AccountTypeNameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new AccountTypeNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }

    clone(): AccountTypeNameValueDto {
        const json = this.toJSON();
        let result = new AccountTypeNameValueDto();
        result.init(json);
        return result;
    }
}

export interface IAccountTypeNameValueDto {
    name: string | undefined;
    value: AccountType;
}

export class AccountTypeNameValueDtoListResultDto implements IAccountTypeNameValueDtoListResultDto {
    items: AccountTypeNameValueDto[] | undefined;

    constructor(data?: IAccountTypeNameValueDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(AccountTypeNameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AccountTypeNameValueDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AccountTypeNameValueDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): AccountTypeNameValueDtoListResultDto {
        const json = this.toJSON();
        let result = new AccountTypeNameValueDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IAccountTypeNameValueDtoListResultDto {
    items: AccountTypeNameValueDto[] | undefined;
}

export enum AddressLevel {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class AdvanceSettingDto implements IAdvanceSettingDto {
    multiBranchesEnable: boolean;
    multiCurrencyEnable: boolean;
    lineDiscountEnable: boolean;
    totalDiscountEnable: boolean;
    customAccountCodeEnable: boolean;
    classEnable: boolean;

    constructor(data?: IAdvanceSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.multiBranchesEnable = _data["multiBranchesEnable"];
            this.multiCurrencyEnable = _data["multiCurrencyEnable"];
            this.lineDiscountEnable = _data["lineDiscountEnable"];
            this.totalDiscountEnable = _data["totalDiscountEnable"];
            this.customAccountCodeEnable = _data["customAccountCodeEnable"];
            this.classEnable = _data["classEnable"];
        }
    }

    static fromJS(data: any): AdvanceSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new AdvanceSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["multiBranchesEnable"] = this.multiBranchesEnable;
        data["multiCurrencyEnable"] = this.multiCurrencyEnable;
        data["lineDiscountEnable"] = this.lineDiscountEnable;
        data["totalDiscountEnable"] = this.totalDiscountEnable;
        data["customAccountCodeEnable"] = this.customAccountCodeEnable;
        data["classEnable"] = this.classEnable;
        return data;
    }

    clone(): AdvanceSettingDto {
        const json = this.toJSON();
        let result = new AdvanceSettingDto();
        result.init(json);
        return result;
    }
}

export interface IAdvanceSettingDto {
    multiBranchesEnable: boolean;
    multiCurrencyEnable: boolean;
    lineDiscountEnable: boolean;
    totalDiscountEnable: boolean;
    customAccountCodeEnable: boolean;
    classEnable: boolean;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version: string | undefined;
    releaseDate: moment.Moment;
    features: { [key: string]: boolean; } | undefined;

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.releaseDate = _data["releaseDate"] ? moment(_data["releaseDate"].toString()) : <any>undefined;
            if (_data["features"]) {
                this.features = {} as any;
                for (let key in _data["features"]) {
                    if (_data["features"].hasOwnProperty(key))
                        (<any>this.features)[key] = _data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    (<any>data["features"])[key] = (<any>this.features)[key];
            }
        }
        return data;
    }

    clone(): ApplicationInfoDto {
        const json = this.toJSON();
        let result = new ApplicationInfoDto();
        result.init(json);
        return result;
    }
}

export interface IApplicationInfoDto {
    version: string | undefined;
    releaseDate: moment.Moment;
    features: { [key: string]: boolean; } | undefined;
}

export class ApplicationLanguageEditDto implements IApplicationLanguageEditDto {
    id: number | undefined;
    name: string;
    displayName: string | undefined;
    icon: string | undefined;
    isEnabled: boolean;

    constructor(data?: IApplicationLanguageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.icon = _data["icon"];
            this.isEnabled = _data["isEnabled"];
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationLanguageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data;
    }

    clone(): ApplicationLanguageEditDto {
        const json = this.toJSON();
        let result = new ApplicationLanguageEditDto();
        result.init(json);
        return result;
    }
}

export interface IApplicationLanguageEditDto {
    id: number | undefined;
    name: string;
    displayName: string | undefined;
    icon: string | undefined;
    isEnabled: boolean;
}

export class ApplicationLanguageListDto implements IApplicationLanguageListDto {
    id: number;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    tenantId: number | undefined;
    name: string | undefined;
    displayName: string | undefined;
    icon: string | undefined;
    isDisabled: boolean;

    constructor(data?: IApplicationLanguageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.icon = _data["icon"];
            this.isDisabled = _data["isDisabled"];
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationLanguageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        return data;
    }

    clone(): ApplicationLanguageListDto {
        const json = this.toJSON();
        let result = new ApplicationLanguageListDto();
        result.init(json);
        return result;
    }
}

export interface IApplicationLanguageListDto {
    id: number;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    tenantId: number | undefined;
    name: string | undefined;
    displayName: string | undefined;
    icon: string | undefined;
    isDisabled: boolean;
}

export class AuditLogListDto implements IAuditLogListDto {
    id: number;
    userId: number | undefined;
    userName: string | undefined;
    impersonatorTenantId: number | undefined;
    impersonatorUserId: number | undefined;
    serviceName: string | undefined;
    methodName: string | undefined;
    parameters: string | undefined;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    exception: string | undefined;
    customData: string | undefined;
    success: boolean;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.impersonatorTenantId = _data["impersonatorTenantId"];
            this.impersonatorUserId = _data["impersonatorUserId"];
            this.serviceName = _data["serviceName"];
            this.methodName = _data["methodName"];
            this.parameters = _data["parameters"];
            this.executionTime = _data["executionTime"] ? moment(_data["executionTime"].toString()) : <any>undefined;
            this.executionDuration = _data["executionDuration"];
            this.clientIpAddress = _data["clientIpAddress"];
            this.clientName = _data["clientName"];
            this.browserInfo = _data["browserInfo"];
            this.exception = _data["exception"];
            this.customData = _data["customData"];
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["success"] = this.success;
        return data;
    }

    clone(): AuditLogListDto {
        const json = this.toJSON();
        let result = new AuditLogListDto();
        result.init(json);
        return result;
    }
}

export interface IAuditLogListDto {
    id: number;
    userId: number | undefined;
    userName: string | undefined;
    impersonatorTenantId: number | undefined;
    impersonatorUserId: number | undefined;
    serviceName: string | undefined;
    methodName: string | undefined;
    parameters: string | undefined;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    exception: string | undefined;
    customData: string | undefined;
    success: boolean;
}

export class AuditLogListDtoPagedResultDto implements IAuditLogListDtoPagedResultDto {
    items: AuditLogListDto[] | undefined;
    totalCount: number;

    constructor(data?: IAuditLogListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): AuditLogListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): AuditLogListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new AuditLogListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IAuditLogListDtoPagedResultDto {
    items: AuditLogListDto[] | undefined;
    totalCount: number;
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    rememberClient: boolean;
    captchaResponse: string | undefined;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
            this.password = _data["password"];
            this.rememberClient = _data["rememberClient"];
            this.captchaResponse = _data["captchaResponse"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["rememberClient"] = this.rememberClient;
        data["captchaResponse"] = this.captchaResponse;
        return data;
    }

    clone(): AuthenticateModel {
        const json = this.toJSON();
        let result = new AuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    rememberClient: boolean;
    captchaResponse: string | undefined;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: number;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        return data;
    }

    clone(): AuthenticateResultModel {
        const json = this.toJSON();
        let result = new AuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: number;
}

export class BatteryDetailDto implements IBatteryDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IBatteryDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): BatteryDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new BatteryDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): BatteryDetailDto {
        const json = this.toJSON();
        let result = new BatteryDetailDto();
        result.init(json);
        return result;
    }
}

export interface IBatteryDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class BatteryListDto implements IBatteryListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IBatteryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): BatteryListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BatteryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): BatteryListDto {
        const json = this.toJSON();
        let result = new BatteryListDto();
        result.init(json);
        return result;
    }
}

export interface IBatteryListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class BatteryListDtoPagedResultDto implements IBatteryListDtoPagedResultDto {
    items: BatteryListDto[] | undefined;
    totalCount: number;

    constructor(data?: IBatteryListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(BatteryListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): BatteryListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BatteryListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): BatteryListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new BatteryListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IBatteryListDtoPagedResultDto {
    items: BatteryListDto[] | undefined;
    totalCount: number;
}

export class BranchDetailDto implements IBranchDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    businessId: string | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
    website: string | undefined;
    taxRegistrationNumber: string | undefined;
    billingAddress: ContactAddressDto;
    sameAsBillingAddress: boolean;
    shippingAddress: ContactAddressDto;

    constructor(data?: IBranchDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.businessId = _data["businessId"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.taxRegistrationNumber = _data["taxRegistrationNumber"];
            this.billingAddress = _data["billingAddress"] ? ContactAddressDto.fromJS(_data["billingAddress"]) : <any>undefined;
            this.sameAsBillingAddress = _data["sameAsBillingAddress"];
            this.shippingAddress = _data["shippingAddress"] ? ContactAddressDto.fromJS(_data["shippingAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BranchDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new BranchDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["businessId"] = this.businessId;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["website"] = this.website;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        data["sameAsBillingAddress"] = this.sameAsBillingAddress;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        return data;
    }

    clone(): BranchDetailDto {
        const json = this.toJSON();
        let result = new BranchDetailDto();
        result.init(json);
        return result;
    }
}

export interface IBranchDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    businessId: string | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
    website: string | undefined;
    taxRegistrationNumber: string | undefined;
    billingAddress: ContactAddressDto;
    sameAsBillingAddress: boolean;
    shippingAddress: ContactAddressDto;
}

export class BranchListDto implements IBranchListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    businessId: string | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
    website: string | undefined;
    taxRegistrationNumber: string | undefined;

    constructor(data?: IBranchListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.businessId = _data["businessId"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.taxRegistrationNumber = _data["taxRegistrationNumber"];
        }
    }

    static fromJS(data: any): BranchListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BranchListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["businessId"] = this.businessId;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["website"] = this.website;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        return data;
    }

    clone(): BranchListDto {
        const json = this.toJSON();
        let result = new BranchListDto();
        result.init(json);
        return result;
    }
}

export interface IBranchListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    businessId: string | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
    website: string | undefined;
    taxRegistrationNumber: string | undefined;
}

export class BranchListDtoPagedResultDto implements IBranchListDtoPagedResultDto {
    items: BranchListDto[] | undefined;
    totalCount: number;

    constructor(data?: IBranchListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(BranchListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): BranchListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BranchListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): BranchListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new BranchListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IBranchListDtoPagedResultDto {
    items: BranchListDto[] | undefined;
    totalCount: number;
}

export class CPUDetailDto implements ICPUDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: ICPUDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CPUDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new CPUDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): CPUDetailDto {
        const json = this.toJSON();
        let result = new CPUDetailDto();
        result.init(json);
        return result;
    }
}

export interface ICPUDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class CPUListDto implements ICPUListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: ICPUListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CPUListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CPUListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): CPUListDto {
        const json = this.toJSON();
        let result = new CPUListDto();
        result.init(json);
        return result;
    }
}

export interface ICPUListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class CPUListDtoPagedResultDto implements ICPUListDtoPagedResultDto {
    items: CPUListDto[] | undefined;
    totalCount: number;

    constructor(data?: ICPUListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(CPUListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): CPUListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CPUListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): CPUListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new CPUListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ICPUListDtoPagedResultDto {
    items: CPUListDto[] | undefined;
    totalCount: number;
}

export class CameraDetailDto implements ICameraDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: ICameraDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CameraDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new CameraDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): CameraDetailDto {
        const json = this.toJSON();
        let result = new CameraDetailDto();
        result.init(json);
        return result;
    }
}

export interface ICameraDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class CameraListDto implements ICameraListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: ICameraListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CameraListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CameraListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): CameraListDto {
        const json = this.toJSON();
        let result = new CameraListDto();
        result.init(json);
        return result;
    }
}

export interface ICameraListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class CameraListDtoPagedResultDto implements ICameraListDtoPagedResultDto {
    items: CameraListDto[] | undefined;
    totalCount: number;

    constructor(data?: ICameraListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(CameraListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): CameraListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CameraListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): CameraListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new CameraListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ICameraListDtoPagedResultDto {
    items: CameraListDto[] | undefined;
    totalCount: number;
}

export enum CellFormat {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class ChangePasswordDto implements IChangePasswordDto {
    currentPassword: string;
    newPassword: string;

    constructor(data?: IChangePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }

    clone(): ChangePasswordDto {
        const json = this.toJSON();
        let result = new ChangePasswordDto();
        result.init(json);
        return result;
    }
}

export interface IChangePasswordDto {
    currentPassword: string;
    newPassword: string;
}

export class ChangePasswordInput implements IChangePasswordInput {
    currentPassword: string;
    newPassword: string;

    constructor(data?: IChangePasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }

    clone(): ChangePasswordInput {
        const json = this.toJSON();
        let result = new ChangePasswordInput();
        result.init(json);
        return result;
    }
}

export interface IChangePasswordInput {
    currentPassword: string;
    newPassword: string;
}

export class ChangeUiThemeInput implements IChangeUiThemeInput {
    theme: string;

    constructor(data?: IChangeUiThemeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.theme = _data["theme"];
        }
    }

    static fromJS(data: any): ChangeUiThemeInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUiThemeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["theme"] = this.theme;
        return data;
    }

    clone(): ChangeUiThemeInput {
        const json = this.toJSON();
        let result = new ChangeUiThemeInput();
        result.init(json);
        return result;
    }
}

export interface IChangeUiThemeInput {
    theme: string;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    languageName: string;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageName = _data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data;
    }

    clone(): ChangeUserLanguageDto {
        const json = this.toJSON();
        let result = new ChangeUserLanguageDto();
        result.init(json);
        return result;
    }
}

export interface IChangeUserLanguageDto {
    languageName: string;
}

export class ChartOfAccountDetailDto implements IChartOfAccountDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    accountType: AccountType;
    subAccountType: SubAccountType;
    accountTypeName: string | undefined;
    subAccountTypeName: string | undefined;
    parentId: string | undefined;
    parentAccountName: string | undefined;

    constructor(data?: IChartOfAccountDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.accountType = _data["accountType"];
            this.subAccountType = _data["subAccountType"];
            this.accountTypeName = _data["accountTypeName"];
            this.subAccountTypeName = _data["subAccountTypeName"];
            this.parentId = _data["parentId"];
            this.parentAccountName = _data["parentAccountName"];
        }
    }

    static fromJS(data: any): ChartOfAccountDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartOfAccountDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["accountType"] = this.accountType;
        data["subAccountType"] = this.subAccountType;
        data["accountTypeName"] = this.accountTypeName;
        data["subAccountTypeName"] = this.subAccountTypeName;
        data["parentId"] = this.parentId;
        data["parentAccountName"] = this.parentAccountName;
        return data;
    }

    clone(): ChartOfAccountDetailDto {
        const json = this.toJSON();
        let result = new ChartOfAccountDetailDto();
        result.init(json);
        return result;
    }
}

export interface IChartOfAccountDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    accountType: AccountType;
    subAccountType: SubAccountType;
    accountTypeName: string | undefined;
    subAccountTypeName: string | undefined;
    parentId: string | undefined;
    parentAccountName: string | undefined;
}

export class ChartOfAccountListDto implements IChartOfAccountListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    accountType: string | undefined;
    subAccountType: string | undefined;
    parentId: string | undefined;
    parentAccountName: string | undefined;

    constructor(data?: IChartOfAccountListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.accountType = _data["accountType"];
            this.subAccountType = _data["subAccountType"];
            this.parentId = _data["parentId"];
            this.parentAccountName = _data["parentAccountName"];
        }
    }

    static fromJS(data: any): ChartOfAccountListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartOfAccountListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["accountType"] = this.accountType;
        data["subAccountType"] = this.subAccountType;
        data["parentId"] = this.parentId;
        data["parentAccountName"] = this.parentAccountName;
        return data;
    }

    clone(): ChartOfAccountListDto {
        const json = this.toJSON();
        let result = new ChartOfAccountListDto();
        result.init(json);
        return result;
    }
}

export interface IChartOfAccountListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    accountType: string | undefined;
    subAccountType: string | undefined;
    parentId: string | undefined;
    parentAccountName: string | undefined;
}

export class ChartOfAccountListDtoPagedResultDto implements IChartOfAccountListDtoPagedResultDto {
    items: ChartOfAccountListDto[] | undefined;
    totalCount: number;

    constructor(data?: IChartOfAccountListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ChartOfAccountListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ChartOfAccountListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartOfAccountListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ChartOfAccountListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ChartOfAccountListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IChartOfAccountListDtoPagedResultDto {
    items: ChartOfAccountListDto[] | undefined;
    totalCount: number;
}

export class CityProvinceDetailDto implements ICityProvinceDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;

    constructor(data?: ICityProvinceDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
        }
    }

    static fromJS(data: any): CityProvinceDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityProvinceDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        return data;
    }

    clone(): CityProvinceDetailDto {
        const json = this.toJSON();
        let result = new CityProvinceDetailDto();
        result.init(json);
        return result;
    }
}

export interface ICityProvinceDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
}

export class CityProvinceListDto implements ICityProvinceListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    countryName: string | undefined;

    constructor(data?: ICityProvinceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.countryName = _data["countryName"];
        }
    }

    static fromJS(data: any): CityProvinceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityProvinceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["countryName"] = this.countryName;
        return data;
    }

    clone(): CityProvinceListDto {
        const json = this.toJSON();
        let result = new CityProvinceListDto();
        result.init(json);
        return result;
    }
}

export interface ICityProvinceListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    countryName: string | undefined;
}

export class CityProvinceListDtoPagedResultDto implements ICityProvinceListDtoPagedResultDto {
    items: CityProvinceListDto[] | undefined;
    totalCount: number;

    constructor(data?: ICityProvinceListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(CityProvinceListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): CityProvinceListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityProvinceListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): CityProvinceListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new CityProvinceListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ICityProvinceListDtoPagedResultDto {
    items: CityProvinceListDto[] | undefined;
    totalCount: number;
}

export class ColorPatternDetailDto implements IColorPatternDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IColorPatternDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ColorPatternDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ColorPatternDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ColorPatternDetailDto {
        const json = this.toJSON();
        let result = new ColorPatternDetailDto();
        result.init(json);
        return result;
    }
}

export interface IColorPatternDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ColorPatternListDto implements IColorPatternListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IColorPatternListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ColorPatternListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ColorPatternListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ColorPatternListDto {
        const json = this.toJSON();
        let result = new ColorPatternListDto();
        result.init(json);
        return result;
    }
}

export interface IColorPatternListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ColorPatternListDtoPagedResultDto implements IColorPatternListDtoPagedResultDto {
    items: ColorPatternListDto[] | undefined;
    totalCount: number;

    constructor(data?: IColorPatternListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ColorPatternListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ColorPatternListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ColorPatternListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ColorPatternListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ColorPatternListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IColorPatternListDtoPagedResultDto {
    items: ColorPatternListDto[] | undefined;
    totalCount: number;
}

export class ColumnOutput implements IColumnOutput {
    columnName: string | undefined;
    columnTitle: string | undefined;
    index: number;
    visible: boolean;
    width: number;
    columnType: ColumnType;
    cellFormat: CellFormat;
    roundingDigits: number;
    showCrossForFalse: boolean;
    isRequired: boolean;

    constructor(data?: IColumnOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.columnName = _data["columnName"];
            this.columnTitle = _data["columnTitle"];
            this.index = _data["index"];
            this.visible = _data["visible"];
            this.width = _data["width"];
            this.columnType = _data["columnType"];
            this.cellFormat = _data["cellFormat"];
            this.roundingDigits = _data["roundingDigits"];
            this.showCrossForFalse = _data["showCrossForFalse"];
            this.isRequired = _data["isRequired"];
        }
    }

    static fromJS(data: any): ColumnOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ColumnOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["columnName"] = this.columnName;
        data["columnTitle"] = this.columnTitle;
        data["index"] = this.index;
        data["visible"] = this.visible;
        data["width"] = this.width;
        data["columnType"] = this.columnType;
        data["cellFormat"] = this.cellFormat;
        data["roundingDigits"] = this.roundingDigits;
        data["showCrossForFalse"] = this.showCrossForFalse;
        data["isRequired"] = this.isRequired;
        return data;
    }

    clone(): ColumnOutput {
        const json = this.toJSON();
        let result = new ColumnOutput();
        result.init(json);
        return result;
    }
}

export interface IColumnOutput {
    columnName: string | undefined;
    columnTitle: string | undefined;
    index: number;
    visible: boolean;
    width: number;
    columnType: ColumnType;
    cellFormat: CellFormat;
    roundingDigits: number;
    showCrossForFalse: boolean;
    isRequired: boolean;
}

export enum ColumnType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
}

export class ComboboxItemDto implements IComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean;

    constructor(data?: IComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.displayText = _data["displayText"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data;
    }

    clone(): ComboboxItemDto {
        const json = this.toJSON();
        let result = new ComboboxItemDto();
        result.init(json);
        return result;
    }
}

export interface IComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean;
}

export class CompanyAccountSettingDto implements ICompanyAccountSettingDto {
    id: number | undefined;
    defaultAPAccountId: string | undefined;
    defaultAPAccountName: string | undefined;
    defaultARAccountId: string | undefined;
    defaultARAccountName: string | undefined;
    defaultPurchaseDiscountAccountId: string | undefined;
    defaultPurchaseDiscountAccountName: string | undefined;
    defaultSaleDiscountAccountId: string | undefined;
    defaultSaleDiscountAccountName: string | undefined;
    defaultInventoryPurchaseAccountId: string | undefined;
    defaultInventoryPurchaseAccountName: string | undefined;
    defaultBillPaymentAccountId: string | undefined;
    defaultBillPaymentAccountName: string | undefined;
    defaultReceivePaymentAccountId: string | undefined;
    defaultReceivePaymentAccountName: string | undefined;
    defaultRetainEarningAccountId: string | undefined;
    defaultRetainEarningAccountName: string | undefined;
    defaultExchangeLossGainAccountId: string | undefined;
    defaultExchangeLossGainAccountName: string | undefined;
    defaultItemReceiptAccountId: string | undefined;
    defaultItemReceiptAccountName: string | undefined;
    defaultItemIssueAccountId: string | undefined;
    defaultItemIssueAccountName: string | undefined;
    defaultItemAdjustmentAccountId: string | undefined;
    defaultItemAdjustmentAccountName: string | undefined;
    defaultItemTransferAccountId: string | undefined;
    defaultItemTransferAccountName: string | undefined;
    defaultItemProductionAccountId: string | undefined;
    defaultItemProductionAccountName: string | undefined;
    defaultItemExchangeAccountId: string | undefined;
    defaultItemExchangeAccountName: string | undefined;
    defaultCashTransferAccountId: string | undefined;
    defaultCashTransferAccountName: string | undefined;
    defaultCashExchangeAccountId: string | undefined;
    defaultCashExchangeAccountName: string | undefined;

    constructor(data?: ICompanyAccountSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.defaultAPAccountId = _data["defaultAPAccountId"];
            this.defaultAPAccountName = _data["defaultAPAccountName"];
            this.defaultARAccountId = _data["defaultARAccountId"];
            this.defaultARAccountName = _data["defaultARAccountName"];
            this.defaultPurchaseDiscountAccountId = _data["defaultPurchaseDiscountAccountId"];
            this.defaultPurchaseDiscountAccountName = _data["defaultPurchaseDiscountAccountName"];
            this.defaultSaleDiscountAccountId = _data["defaultSaleDiscountAccountId"];
            this.defaultSaleDiscountAccountName = _data["defaultSaleDiscountAccountName"];
            this.defaultInventoryPurchaseAccountId = _data["defaultInventoryPurchaseAccountId"];
            this.defaultInventoryPurchaseAccountName = _data["defaultInventoryPurchaseAccountName"];
            this.defaultBillPaymentAccountId = _data["defaultBillPaymentAccountId"];
            this.defaultBillPaymentAccountName = _data["defaultBillPaymentAccountName"];
            this.defaultReceivePaymentAccountId = _data["defaultReceivePaymentAccountId"];
            this.defaultReceivePaymentAccountName = _data["defaultReceivePaymentAccountName"];
            this.defaultRetainEarningAccountId = _data["defaultRetainEarningAccountId"];
            this.defaultRetainEarningAccountName = _data["defaultRetainEarningAccountName"];
            this.defaultExchangeLossGainAccountId = _data["defaultExchangeLossGainAccountId"];
            this.defaultExchangeLossGainAccountName = _data["defaultExchangeLossGainAccountName"];
            this.defaultItemReceiptAccountId = _data["defaultItemReceiptAccountId"];
            this.defaultItemReceiptAccountName = _data["defaultItemReceiptAccountName"];
            this.defaultItemIssueAccountId = _data["defaultItemIssueAccountId"];
            this.defaultItemIssueAccountName = _data["defaultItemIssueAccountName"];
            this.defaultItemAdjustmentAccountId = _data["defaultItemAdjustmentAccountId"];
            this.defaultItemAdjustmentAccountName = _data["defaultItemAdjustmentAccountName"];
            this.defaultItemTransferAccountId = _data["defaultItemTransferAccountId"];
            this.defaultItemTransferAccountName = _data["defaultItemTransferAccountName"];
            this.defaultItemProductionAccountId = _data["defaultItemProductionAccountId"];
            this.defaultItemProductionAccountName = _data["defaultItemProductionAccountName"];
            this.defaultItemExchangeAccountId = _data["defaultItemExchangeAccountId"];
            this.defaultItemExchangeAccountName = _data["defaultItemExchangeAccountName"];
            this.defaultCashTransferAccountId = _data["defaultCashTransferAccountId"];
            this.defaultCashTransferAccountName = _data["defaultCashTransferAccountName"];
            this.defaultCashExchangeAccountId = _data["defaultCashExchangeAccountId"];
            this.defaultCashExchangeAccountName = _data["defaultCashExchangeAccountName"];
        }
    }

    static fromJS(data: any): CompanyAccountSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyAccountSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["defaultAPAccountId"] = this.defaultAPAccountId;
        data["defaultAPAccountName"] = this.defaultAPAccountName;
        data["defaultARAccountId"] = this.defaultARAccountId;
        data["defaultARAccountName"] = this.defaultARAccountName;
        data["defaultPurchaseDiscountAccountId"] = this.defaultPurchaseDiscountAccountId;
        data["defaultPurchaseDiscountAccountName"] = this.defaultPurchaseDiscountAccountName;
        data["defaultSaleDiscountAccountId"] = this.defaultSaleDiscountAccountId;
        data["defaultSaleDiscountAccountName"] = this.defaultSaleDiscountAccountName;
        data["defaultInventoryPurchaseAccountId"] = this.defaultInventoryPurchaseAccountId;
        data["defaultInventoryPurchaseAccountName"] = this.defaultInventoryPurchaseAccountName;
        data["defaultBillPaymentAccountId"] = this.defaultBillPaymentAccountId;
        data["defaultBillPaymentAccountName"] = this.defaultBillPaymentAccountName;
        data["defaultReceivePaymentAccountId"] = this.defaultReceivePaymentAccountId;
        data["defaultReceivePaymentAccountName"] = this.defaultReceivePaymentAccountName;
        data["defaultRetainEarningAccountId"] = this.defaultRetainEarningAccountId;
        data["defaultRetainEarningAccountName"] = this.defaultRetainEarningAccountName;
        data["defaultExchangeLossGainAccountId"] = this.defaultExchangeLossGainAccountId;
        data["defaultExchangeLossGainAccountName"] = this.defaultExchangeLossGainAccountName;
        data["defaultItemReceiptAccountId"] = this.defaultItemReceiptAccountId;
        data["defaultItemReceiptAccountName"] = this.defaultItemReceiptAccountName;
        data["defaultItemIssueAccountId"] = this.defaultItemIssueAccountId;
        data["defaultItemIssueAccountName"] = this.defaultItemIssueAccountName;
        data["defaultItemAdjustmentAccountId"] = this.defaultItemAdjustmentAccountId;
        data["defaultItemAdjustmentAccountName"] = this.defaultItemAdjustmentAccountName;
        data["defaultItemTransferAccountId"] = this.defaultItemTransferAccountId;
        data["defaultItemTransferAccountName"] = this.defaultItemTransferAccountName;
        data["defaultItemProductionAccountId"] = this.defaultItemProductionAccountId;
        data["defaultItemProductionAccountName"] = this.defaultItemProductionAccountName;
        data["defaultItemExchangeAccountId"] = this.defaultItemExchangeAccountId;
        data["defaultItemExchangeAccountName"] = this.defaultItemExchangeAccountName;
        data["defaultCashTransferAccountId"] = this.defaultCashTransferAccountId;
        data["defaultCashTransferAccountName"] = this.defaultCashTransferAccountName;
        data["defaultCashExchangeAccountId"] = this.defaultCashExchangeAccountId;
        data["defaultCashExchangeAccountName"] = this.defaultCashExchangeAccountName;
        return data;
    }

    clone(): CompanyAccountSettingDto {
        const json = this.toJSON();
        let result = new CompanyAccountSettingDto();
        result.init(json);
        return result;
    }
}

export interface ICompanyAccountSettingDto {
    id: number | undefined;
    defaultAPAccountId: string | undefined;
    defaultAPAccountName: string | undefined;
    defaultARAccountId: string | undefined;
    defaultARAccountName: string | undefined;
    defaultPurchaseDiscountAccountId: string | undefined;
    defaultPurchaseDiscountAccountName: string | undefined;
    defaultSaleDiscountAccountId: string | undefined;
    defaultSaleDiscountAccountName: string | undefined;
    defaultInventoryPurchaseAccountId: string | undefined;
    defaultInventoryPurchaseAccountName: string | undefined;
    defaultBillPaymentAccountId: string | undefined;
    defaultBillPaymentAccountName: string | undefined;
    defaultReceivePaymentAccountId: string | undefined;
    defaultReceivePaymentAccountName: string | undefined;
    defaultRetainEarningAccountId: string | undefined;
    defaultRetainEarningAccountName: string | undefined;
    defaultExchangeLossGainAccountId: string | undefined;
    defaultExchangeLossGainAccountName: string | undefined;
    defaultItemReceiptAccountId: string | undefined;
    defaultItemReceiptAccountName: string | undefined;
    defaultItemIssueAccountId: string | undefined;
    defaultItemIssueAccountName: string | undefined;
    defaultItemAdjustmentAccountId: string | undefined;
    defaultItemAdjustmentAccountName: string | undefined;
    defaultItemTransferAccountId: string | undefined;
    defaultItemTransferAccountName: string | undefined;
    defaultItemProductionAccountId: string | undefined;
    defaultItemProductionAccountName: string | undefined;
    defaultItemExchangeAccountId: string | undefined;
    defaultItemExchangeAccountName: string | undefined;
    defaultCashTransferAccountId: string | undefined;
    defaultCashTransferAccountName: string | undefined;
    defaultCashExchangeAccountId: string | undefined;
    defaultCashExchangeAccountName: string | undefined;
}

export class CompanyAdvanceSettingDto implements ICompanyAdvanceSettingDto {
    id: number | undefined;
    multiBranchesEnable: boolean;
    multiCurrencyEnable: boolean;
    lineDiscountEnable: boolean;
    totalDiscountEnable: boolean;
    customAccountCodeEnable: boolean;
    classEnable: boolean;

    constructor(data?: ICompanyAdvanceSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.multiBranchesEnable = _data["multiBranchesEnable"];
            this.multiCurrencyEnable = _data["multiCurrencyEnable"];
            this.lineDiscountEnable = _data["lineDiscountEnable"];
            this.totalDiscountEnable = _data["totalDiscountEnable"];
            this.customAccountCodeEnable = _data["customAccountCodeEnable"];
            this.classEnable = _data["classEnable"];
        }
    }

    static fromJS(data: any): CompanyAdvanceSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyAdvanceSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["multiBranchesEnable"] = this.multiBranchesEnable;
        data["multiCurrencyEnable"] = this.multiCurrencyEnable;
        data["lineDiscountEnable"] = this.lineDiscountEnable;
        data["totalDiscountEnable"] = this.totalDiscountEnable;
        data["customAccountCodeEnable"] = this.customAccountCodeEnable;
        data["classEnable"] = this.classEnable;
        return data;
    }

    clone(): CompanyAdvanceSettingDto {
        const json = this.toJSON();
        let result = new CompanyAdvanceSettingDto();
        result.init(json);
        return result;
    }
}

export interface ICompanyAdvanceSettingDto {
    id: number | undefined;
    multiBranchesEnable: boolean;
    multiCurrencyEnable: boolean;
    lineDiscountEnable: boolean;
    totalDiscountEnable: boolean;
    customAccountCodeEnable: boolean;
    classEnable: boolean;
}

export class CompanyGeneralSettingDto implements ICompanyGeneralSettingDto {
    id: number | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    defaultTimeZone: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;
    businessStartDate: moment.Moment | undefined;
    roundTotalDigits: number;
    roundCostDigits: number;
    contactAddressLevel: AddressLevel;

    constructor(data?: ICompanyGeneralSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.defaultTimeZone = _data["defaultTimeZone"];
            this.currencyId = _data["currencyId"];
            this.currencyCode = _data["currencyCode"];
            this.businessStartDate = _data["businessStartDate"] ? moment(_data["businessStartDate"].toString()) : <any>undefined;
            this.roundTotalDigits = _data["roundTotalDigits"];
            this.roundCostDigits = _data["roundCostDigits"];
            this.contactAddressLevel = _data["contactAddressLevel"];
        }
    }

    static fromJS(data: any): CompanyGeneralSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyGeneralSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["defaultTimeZone"] = this.defaultTimeZone;
        data["currencyId"] = this.currencyId;
        data["currencyCode"] = this.currencyCode;
        data["businessStartDate"] = this.businessStartDate ? this.businessStartDate.toISOString() : <any>undefined;
        data["roundTotalDigits"] = this.roundTotalDigits;
        data["roundCostDigits"] = this.roundCostDigits;
        data["contactAddressLevel"] = this.contactAddressLevel;
        return data;
    }

    clone(): CompanyGeneralSettingDto {
        const json = this.toJSON();
        let result = new CompanyGeneralSettingDto();
        result.init(json);
        return result;
    }
}

export interface ICompanyGeneralSettingDto {
    id: number | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    defaultTimeZone: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;
    businessStartDate: moment.Moment | undefined;
    roundTotalDigits: number;
    roundCostDigits: number;
    contactAddressLevel: AddressLevel;
}

export class CompanySettingDto implements ICompanySettingDto {
    companyLogo: UpdateLogoInput;
    branch: BranchDetailDto;
    generalSetting: CompanyGeneralSettingDto;
    advanceSetting: CompanyAdvanceSettingDto;
    accountSetting: CompanyAccountSettingDto;
    transactionNoSettings: TransactionNoSettingDto[] | undefined;

    constructor(data?: ICompanySettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyLogo = _data["companyLogo"] ? UpdateLogoInput.fromJS(_data["companyLogo"]) : <any>undefined;
            this.branch = _data["branch"] ? BranchDetailDto.fromJS(_data["branch"]) : <any>undefined;
            this.generalSetting = _data["generalSetting"] ? CompanyGeneralSettingDto.fromJS(_data["generalSetting"]) : <any>undefined;
            this.advanceSetting = _data["advanceSetting"] ? CompanyAdvanceSettingDto.fromJS(_data["advanceSetting"]) : <any>undefined;
            this.accountSetting = _data["accountSetting"] ? CompanyAccountSettingDto.fromJS(_data["accountSetting"]) : <any>undefined;
            if (Array.isArray(_data["transactionNoSettings"])) {
                this.transactionNoSettings = [] as any;
                for (let item of _data["transactionNoSettings"])
                    this.transactionNoSettings.push(TransactionNoSettingDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompanySettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanySettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyLogo"] = this.companyLogo ? this.companyLogo.toJSON() : <any>undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : <any>undefined;
        data["generalSetting"] = this.generalSetting ? this.generalSetting.toJSON() : <any>undefined;
        data["advanceSetting"] = this.advanceSetting ? this.advanceSetting.toJSON() : <any>undefined;
        data["accountSetting"] = this.accountSetting ? this.accountSetting.toJSON() : <any>undefined;
        if (Array.isArray(this.transactionNoSettings)) {
            data["transactionNoSettings"] = [];
            for (let item of this.transactionNoSettings)
                data["transactionNoSettings"].push(item.toJSON());
        }
        return data;
    }

    clone(): CompanySettingDto {
        const json = this.toJSON();
        let result = new CompanySettingDto();
        result.init(json);
        return result;
    }
}

export interface ICompanySettingDto {
    companyLogo: UpdateLogoInput;
    branch: BranchDetailDto;
    generalSetting: CompanyGeneralSettingDto;
    advanceSetting: CompanyAdvanceSettingDto;
    accountSetting: CompanyAccountSettingDto;
    transactionNoSettings: TransactionNoSettingDto[] | undefined;
}

export class ContactAddressDto implements IContactAddressDto {
    id: string;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictId: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneId: string | undefined;
    sangkatCommuneName: string | undefined;
    villageId: string | undefined;
    villageName: string | undefined;
    locationId: string | undefined;
    locationName: string | undefined;
    postalCode: string | undefined;
    street: string | undefined;
    houseNo: string | undefined;

    constructor(data?: IContactAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.cityProvinceId = _data["cityProvinceId"];
            this.cityProvinceName = _data["cityProvinceName"];
            this.khanDistrictId = _data["khanDistrictId"];
            this.khanDistrictName = _data["khanDistrictName"];
            this.sangkatCommuneId = _data["sangkatCommuneId"];
            this.sangkatCommuneName = _data["sangkatCommuneName"];
            this.villageId = _data["villageId"];
            this.villageName = _data["villageName"];
            this.locationId = _data["locationId"];
            this.locationName = _data["locationName"];
            this.postalCode = _data["postalCode"];
            this.street = _data["street"];
            this.houseNo = _data["houseNo"];
        }
    }

    static fromJS(data: any): ContactAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["cityProvinceId"] = this.cityProvinceId;
        data["cityProvinceName"] = this.cityProvinceName;
        data["khanDistrictId"] = this.khanDistrictId;
        data["khanDistrictName"] = this.khanDistrictName;
        data["sangkatCommuneId"] = this.sangkatCommuneId;
        data["sangkatCommuneName"] = this.sangkatCommuneName;
        data["villageId"] = this.villageId;
        data["villageName"] = this.villageName;
        data["locationId"] = this.locationId;
        data["locationName"] = this.locationName;
        data["postalCode"] = this.postalCode;
        data["street"] = this.street;
        data["houseNo"] = this.houseNo;
        return data;
    }

    clone(): ContactAddressDto {
        const json = this.toJSON();
        let result = new ContactAddressDto();
        result.init(json);
        return result;
    }
}

export interface IContactAddressDto {
    id: string;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictId: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneId: string | undefined;
    sangkatCommuneName: string | undefined;
    villageId: string | undefined;
    villageName: string | undefined;
    locationId: string | undefined;
    locationName: string | undefined;
    postalCode: string | undefined;
    street: string | undefined;
    houseNo: string | undefined;
}

export class CountryDetailDto implements ICountryDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;

    constructor(data?: ICountryDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.isO2 = _data["isO2"];
            this.phonePrefix = _data["phonePrefix"];
            this.currencyId = _data["currencyId"];
            this.currencyCode = _data["currencyCode"];
        }
    }

    static fromJS(data: any): CountryDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["isO2"] = this.isO2;
        data["phonePrefix"] = this.phonePrefix;
        data["currencyId"] = this.currencyId;
        data["currencyCode"] = this.currencyCode;
        return data;
    }

    clone(): CountryDetailDto {
        const json = this.toJSON();
        let result = new CountryDetailDto();
        result.init(json);
        return result;
    }
}

export interface ICountryDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;
}

export class CountryListDto implements ICountryListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyCode: string | undefined;

    constructor(data?: ICountryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.isO2 = _data["isO2"];
            this.phonePrefix = _data["phonePrefix"];
            this.currencyCode = _data["currencyCode"];
        }
    }

    static fromJS(data: any): CountryListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["isO2"] = this.isO2;
        data["phonePrefix"] = this.phonePrefix;
        data["currencyCode"] = this.currencyCode;
        return data;
    }

    clone(): CountryListDto {
        const json = this.toJSON();
        let result = new CountryListDto();
        result.init(json);
        return result;
    }
}

export interface ICountryListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyCode: string | undefined;
}

export class CountryListDtoPagedResultDto implements ICountryListDtoPagedResultDto {
    items: CountryListDto[] | undefined;
    totalCount: number;

    constructor(data?: ICountryListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(CountryListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): CountryListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): CountryListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new CountryListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ICountryListDtoPagedResultDto {
    items: CountryListDto[] | undefined;
    totalCount: number;
}

export class CreateOrUpdateEditionDto implements ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[];

    constructor(data?: ICreateOrUpdateEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.edition = new EditionEditDto();
            this.featureValues = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.edition = _data["edition"] ? EditionEditDto.fromJS(_data["edition"]) : new EditionEditDto();
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data;
    }

    clone(): CreateOrUpdateEditionDto {
        const json = this.toJSON();
        let result = new CreateOrUpdateEditionDto();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
}

export class CreateOrUpdateLanguageInput implements ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto;

    constructor(data?: ICreateOrUpdateLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.language = new ApplicationLanguageEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"] ? ApplicationLanguageEditDto.fromJS(_data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data;
    }

    clone(): CreateOrUpdateLanguageInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateLanguageInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto;
}

export class CreateOrganizationUnitInput implements ICreateOrganizationUnitInput {
    parentId: number | undefined;
    displayName: string;

    constructor(data?: ICreateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentId = _data["parentId"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data;
    }

    clone(): CreateOrganizationUnitInput {
        const json = this.toJSON();
        let result = new CreateOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrganizationUnitInput {
    parentId: number | undefined;
    displayName: string;
}

export class CreateRoleDto implements ICreateRoleDto {
    name: string;
    displayName: string;
    normalizedName: string | undefined;
    description: string | undefined;
    grantedPermissions: string[] | undefined;

    constructor(data?: ICreateRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.normalizedName = _data["normalizedName"];
            this.description = _data["description"];
            if (Array.isArray(_data["grantedPermissions"])) {
                this.grantedPermissions = [] as any;
                for (let item of _data["grantedPermissions"])
                    this.grantedPermissions.push(item);
            }
        }
    }

    static fromJS(data: any): CreateRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["normalizedName"] = this.normalizedName;
        data["description"] = this.description;
        if (Array.isArray(this.grantedPermissions)) {
            data["grantedPermissions"] = [];
            for (let item of this.grantedPermissions)
                data["grantedPermissions"].push(item);
        }
        return data;
    }

    clone(): CreateRoleDto {
        const json = this.toJSON();
        let result = new CreateRoleDto();
        result.init(json);
        return result;
    }
}

export interface ICreateRoleDto {
    name: string;
    displayName: string;
    normalizedName: string | undefined;
    description: string | undefined;
    grantedPermissions: string[] | undefined;
}

export class CreateTenantDto implements ICreateTenantDto {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    connectionString: string | undefined;
    isActive: boolean;
    editionId: number | undefined;

    constructor(data?: ICreateTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
            this.adminEmailAddress = _data["adminEmailAddress"];
            this.connectionString = _data["connectionString"];
            this.isActive = _data["isActive"];
            this.editionId = _data["editionId"];
        }
    }

    static fromJS(data: any): CreateTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["editionId"] = this.editionId;
        return data;
    }

    clone(): CreateTenantDto {
        const json = this.toJSON();
        let result = new CreateTenantDto();
        result.init(json);
        return result;
    }
}

export interface ICreateTenantDto {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    connectionString: string | undefined;
    isActive: boolean;
    editionId: number | undefined;
}

export class CreateUpdateBatteryInputDto implements ICreateUpdateBatteryInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateBatteryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateBatteryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateBatteryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateBatteryInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateBatteryInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateBatteryInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateBranchInputDto implements ICreateUpdateBranchInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    businessId: string | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
    website: string | undefined;
    taxRegistrationNumber: string | undefined;
    billingAddress: ContactAddressDto;
    sameAsBillingAddress: boolean;
    shippingAddress: ContactAddressDto;

    constructor(data?: ICreateUpdateBranchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.businessId = _data["businessId"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.taxRegistrationNumber = _data["taxRegistrationNumber"];
            this.billingAddress = _data["billingAddress"] ? ContactAddressDto.fromJS(_data["billingAddress"]) : <any>undefined;
            this.sameAsBillingAddress = _data["sameAsBillingAddress"];
            this.shippingAddress = _data["shippingAddress"] ? ContactAddressDto.fromJS(_data["shippingAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateUpdateBranchInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateBranchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["businessId"] = this.businessId;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["website"] = this.website;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        data["sameAsBillingAddress"] = this.sameAsBillingAddress;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        return data;
    }

    clone(): CreateUpdateBranchInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateBranchInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateBranchInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    businessId: string | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
    website: string | undefined;
    taxRegistrationNumber: string | undefined;
    billingAddress: ContactAddressDto;
    sameAsBillingAddress: boolean;
    shippingAddress: ContactAddressDto;
}

export class CreateUpdateCPUInputDto implements ICreateUpdateCPUInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateCPUInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateCPUInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCPUInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateCPUInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCPUInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCPUInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateCameraInputDto implements ICreateUpdateCameraInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateCameraInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateCameraInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCameraInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateCameraInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCameraInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCameraInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateChartOfAccountInputDto implements ICreateUpdateChartOfAccountInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    accountType: AccountType;
    subAccountType: SubAccountType;
    parentId: string | undefined;

    constructor(data?: ICreateUpdateChartOfAccountInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
            this.accountType = _data["accountType"];
            this.subAccountType = _data["subAccountType"];
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): CreateUpdateChartOfAccountInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateChartOfAccountInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        data["accountType"] = this.accountType;
        data["subAccountType"] = this.subAccountType;
        data["parentId"] = this.parentId;
        return data;
    }

    clone(): CreateUpdateChartOfAccountInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateChartOfAccountInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateChartOfAccountInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    accountType: AccountType;
    subAccountType: SubAccountType;
    parentId: string | undefined;
}

export class CreateUpdateCityProvinceInputDto implements ICreateUpdateCityProvinceInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    iso: string | undefined;
    countryId: string | undefined;

    constructor(data?: ICreateUpdateCityProvinceInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.countryId = _data["countryId"];
        }
    }

    static fromJS(data: any): CreateUpdateCityProvinceInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCityProvinceInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["countryId"] = this.countryId;
        return data;
    }

    clone(): CreateUpdateCityProvinceInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCityProvinceInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCityProvinceInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    iso: string | undefined;
    countryId: string | undefined;
}

export class CreateUpdateColorPatternInputDto implements ICreateUpdateColorPatternInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateColorPatternInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateColorPatternInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateColorPatternInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateColorPatternInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateColorPatternInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateColorPatternInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateCompanyAccountSettingInputDto implements ICreateUpdateCompanyAccountSettingInputDto {
    id: number | undefined;
    defaultAPAccountId: string | undefined;
    defaultARAccountId: string | undefined;
    defaultPurchaseDiscountAccountId: string | undefined;
    defaultSaleDiscountAccountId: string | undefined;
    defaultInventoryPurchaseAccountId: string | undefined;
    defaultBillPaymentAccountId: string | undefined;
    defaultReceivePaymentAccountId: string | undefined;
    defaultRetainEarningAccountId: string | undefined;
    defaultExchangeLossGainAccountId: string | undefined;
    defaultItemReceiptAccountId: string | undefined;
    defaultItemIssueAccountId: string | undefined;
    defaultItemAdjustmentAccountId: string | undefined;
    defaultItemTransferAccountId: string | undefined;
    defaultItemProductionAccountId: string | undefined;
    defaultItemExchangeAccountId: string | undefined;
    defaultCashTransferAccountId: string | undefined;
    defaultCashExchangeAccountId: string | undefined;

    constructor(data?: ICreateUpdateCompanyAccountSettingInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.defaultAPAccountId = _data["defaultAPAccountId"];
            this.defaultARAccountId = _data["defaultARAccountId"];
            this.defaultPurchaseDiscountAccountId = _data["defaultPurchaseDiscountAccountId"];
            this.defaultSaleDiscountAccountId = _data["defaultSaleDiscountAccountId"];
            this.defaultInventoryPurchaseAccountId = _data["defaultInventoryPurchaseAccountId"];
            this.defaultBillPaymentAccountId = _data["defaultBillPaymentAccountId"];
            this.defaultReceivePaymentAccountId = _data["defaultReceivePaymentAccountId"];
            this.defaultRetainEarningAccountId = _data["defaultRetainEarningAccountId"];
            this.defaultExchangeLossGainAccountId = _data["defaultExchangeLossGainAccountId"];
            this.defaultItemReceiptAccountId = _data["defaultItemReceiptAccountId"];
            this.defaultItemIssueAccountId = _data["defaultItemIssueAccountId"];
            this.defaultItemAdjustmentAccountId = _data["defaultItemAdjustmentAccountId"];
            this.defaultItemTransferAccountId = _data["defaultItemTransferAccountId"];
            this.defaultItemProductionAccountId = _data["defaultItemProductionAccountId"];
            this.defaultItemExchangeAccountId = _data["defaultItemExchangeAccountId"];
            this.defaultCashTransferAccountId = _data["defaultCashTransferAccountId"];
            this.defaultCashExchangeAccountId = _data["defaultCashExchangeAccountId"];
        }
    }

    static fromJS(data: any): CreateUpdateCompanyAccountSettingInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCompanyAccountSettingInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["defaultAPAccountId"] = this.defaultAPAccountId;
        data["defaultARAccountId"] = this.defaultARAccountId;
        data["defaultPurchaseDiscountAccountId"] = this.defaultPurchaseDiscountAccountId;
        data["defaultSaleDiscountAccountId"] = this.defaultSaleDiscountAccountId;
        data["defaultInventoryPurchaseAccountId"] = this.defaultInventoryPurchaseAccountId;
        data["defaultBillPaymentAccountId"] = this.defaultBillPaymentAccountId;
        data["defaultReceivePaymentAccountId"] = this.defaultReceivePaymentAccountId;
        data["defaultRetainEarningAccountId"] = this.defaultRetainEarningAccountId;
        data["defaultExchangeLossGainAccountId"] = this.defaultExchangeLossGainAccountId;
        data["defaultItemReceiptAccountId"] = this.defaultItemReceiptAccountId;
        data["defaultItemIssueAccountId"] = this.defaultItemIssueAccountId;
        data["defaultItemAdjustmentAccountId"] = this.defaultItemAdjustmentAccountId;
        data["defaultItemTransferAccountId"] = this.defaultItemTransferAccountId;
        data["defaultItemProductionAccountId"] = this.defaultItemProductionAccountId;
        data["defaultItemExchangeAccountId"] = this.defaultItemExchangeAccountId;
        data["defaultCashTransferAccountId"] = this.defaultCashTransferAccountId;
        data["defaultCashExchangeAccountId"] = this.defaultCashExchangeAccountId;
        return data;
    }

    clone(): CreateUpdateCompanyAccountSettingInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCompanyAccountSettingInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCompanyAccountSettingInputDto {
    id: number | undefined;
    defaultAPAccountId: string | undefined;
    defaultARAccountId: string | undefined;
    defaultPurchaseDiscountAccountId: string | undefined;
    defaultSaleDiscountAccountId: string | undefined;
    defaultInventoryPurchaseAccountId: string | undefined;
    defaultBillPaymentAccountId: string | undefined;
    defaultReceivePaymentAccountId: string | undefined;
    defaultRetainEarningAccountId: string | undefined;
    defaultExchangeLossGainAccountId: string | undefined;
    defaultItemReceiptAccountId: string | undefined;
    defaultItemIssueAccountId: string | undefined;
    defaultItemAdjustmentAccountId: string | undefined;
    defaultItemTransferAccountId: string | undefined;
    defaultItemProductionAccountId: string | undefined;
    defaultItemExchangeAccountId: string | undefined;
    defaultCashTransferAccountId: string | undefined;
    defaultCashExchangeAccountId: string | undefined;
}

export class CreateUpdateCompanyAdvanceSettingInputDto implements ICreateUpdateCompanyAdvanceSettingInputDto {
    id: number | undefined;
    multiBranchesEnable: boolean;
    multiCurrencyEnable: boolean;
    lineDiscountEnable: boolean;
    totalDiscountEnable: boolean;
    customAccountCodeEnable: boolean;
    classEnable: boolean;

    constructor(data?: ICreateUpdateCompanyAdvanceSettingInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.multiBranchesEnable = _data["multiBranchesEnable"];
            this.multiCurrencyEnable = _data["multiCurrencyEnable"];
            this.lineDiscountEnable = _data["lineDiscountEnable"];
            this.totalDiscountEnable = _data["totalDiscountEnable"];
            this.customAccountCodeEnable = _data["customAccountCodeEnable"];
            this.classEnable = _data["classEnable"];
        }
    }

    static fromJS(data: any): CreateUpdateCompanyAdvanceSettingInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCompanyAdvanceSettingInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["multiBranchesEnable"] = this.multiBranchesEnable;
        data["multiCurrencyEnable"] = this.multiCurrencyEnable;
        data["lineDiscountEnable"] = this.lineDiscountEnable;
        data["totalDiscountEnable"] = this.totalDiscountEnable;
        data["customAccountCodeEnable"] = this.customAccountCodeEnable;
        data["classEnable"] = this.classEnable;
        return data;
    }

    clone(): CreateUpdateCompanyAdvanceSettingInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCompanyAdvanceSettingInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCompanyAdvanceSettingInputDto {
    id: number | undefined;
    multiBranchesEnable: boolean;
    multiCurrencyEnable: boolean;
    lineDiscountEnable: boolean;
    totalDiscountEnable: boolean;
    customAccountCodeEnable: boolean;
    classEnable: boolean;
}

export class CreateUpdateCompanyGeneralSettingInputDto implements ICreateUpdateCompanyGeneralSettingInputDto {
    id: number | undefined;
    countryId: string | undefined;
    defaultTimeZone: string | undefined;
    currencyId: number | undefined;
    businessStartDate: moment.Moment | undefined;
    roundTotalDigits: number;
    roundCostDigits: number;
    contactAddressLevel: AddressLevel;

    constructor(data?: ICreateUpdateCompanyGeneralSettingInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryId = _data["countryId"];
            this.defaultTimeZone = _data["defaultTimeZone"];
            this.currencyId = _data["currencyId"];
            this.businessStartDate = _data["businessStartDate"] ? moment(_data["businessStartDate"].toString()) : <any>undefined;
            this.roundTotalDigits = _data["roundTotalDigits"];
            this.roundCostDigits = _data["roundCostDigits"];
            this.contactAddressLevel = _data["contactAddressLevel"];
        }
    }

    static fromJS(data: any): CreateUpdateCompanyGeneralSettingInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCompanyGeneralSettingInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryId"] = this.countryId;
        data["defaultTimeZone"] = this.defaultTimeZone;
        data["currencyId"] = this.currencyId;
        data["businessStartDate"] = this.businessStartDate ? this.businessStartDate.toISOString() : <any>undefined;
        data["roundTotalDigits"] = this.roundTotalDigits;
        data["roundCostDigits"] = this.roundCostDigits;
        data["contactAddressLevel"] = this.contactAddressLevel;
        return data;
    }

    clone(): CreateUpdateCompanyGeneralSettingInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCompanyGeneralSettingInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCompanyGeneralSettingInputDto {
    id: number | undefined;
    countryId: string | undefined;
    defaultTimeZone: string | undefined;
    currencyId: number | undefined;
    businessStartDate: moment.Moment | undefined;
    roundTotalDigits: number;
    roundCostDigits: number;
    contactAddressLevel: AddressLevel;
}

export class CreateUpdateCountryInputDto implements ICreateUpdateCountryInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyId: number | undefined;

    constructor(data?: ICreateUpdateCountryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.isO2 = _data["isO2"];
            this.phonePrefix = _data["phonePrefix"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): CreateUpdateCountryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCountryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["isO2"] = this.isO2;
        data["phonePrefix"] = this.phonePrefix;
        data["currencyId"] = this.currencyId;
        return data;
    }

    clone(): CreateUpdateCountryInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCountryInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCountryInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyId: number | undefined;
}

export class CreateUpdateCurrencyInputDto implements ICreateUpdateCurrencyInputDto {
    id: number | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    symbol: string | undefined;
    isDefault: boolean;

    constructor(data?: ICreateUpdateCurrencyInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
            this.isDefault = _data["isDefault"];
        }
    }

    static fromJS(data: any): CreateUpdateCurrencyInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateCurrencyInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        data["isDefault"] = this.isDefault;
        return data;
    }

    clone(): CreateUpdateCurrencyInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateCurrencyInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateCurrencyInputDto {
    id: number | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    symbol: string | undefined;
    isDefault: boolean;
}

export class CreateUpdateFieldAInputDto implements ICreateUpdateFieldAInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateFieldAInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateFieldAInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateFieldAInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateFieldAInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateFieldAInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateFieldAInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateFieldBInputDto implements ICreateUpdateFieldBInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateFieldBInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateFieldBInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateFieldBInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateFieldBInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateFieldBInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateFieldBInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateFieldCInputDto implements ICreateUpdateFieldCInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateFieldCInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateFieldCInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateFieldCInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateFieldCInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateFieldCInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateFieldCInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateHDDInputDto implements ICreateUpdateHDDInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateHDDInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateHDDInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateHDDInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateHDDInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateHDDInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateHDDInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateItemBrandInputDto implements ICreateUpdateItemBrandInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateItemBrandInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateItemBrandInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateItemBrandInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateItemBrandInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateItemBrandInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateItemBrandInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateItemGradeInputDto implements ICreateUpdateItemGradeInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateItemGradeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateItemGradeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateItemGradeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateItemGradeInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateItemGradeInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateItemGradeInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateItemGroupInputDto implements ICreateUpdateItemGroupInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateItemGroupInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateItemGroupInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateItemGroupInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateItemGroupInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateItemGroupInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateItemGroupInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateItemModelInputDto implements ICreateUpdateItemModelInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateItemModelInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateItemModelInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateItemModelInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateItemModelInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateItemModelInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateItemModelInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateItemSeriesInputDto implements ICreateUpdateItemSeriesInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateItemSeriesInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateItemSeriesInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateItemSeriesInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateItemSeriesInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateItemSeriesInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateItemSeriesInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateItemSizeInputDto implements ICreateUpdateItemSizeInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateItemSizeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateItemSizeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateItemSizeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateItemSizeInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateItemSizeInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateItemSizeInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateKhanDistrictInputDto implements ICreateUpdateKhanDistrictInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    countryId: string | undefined;
    cityProvinceId: string | undefined;

    constructor(data?: ICreateUpdateKhanDistrictInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
            this.countryId = _data["countryId"];
            this.cityProvinceId = _data["cityProvinceId"];
        }
    }

    static fromJS(data: any): CreateUpdateKhanDistrictInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateKhanDistrictInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        data["countryId"] = this.countryId;
        data["cityProvinceId"] = this.cityProvinceId;
        return data;
    }

    clone(): CreateUpdateKhanDistrictInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateKhanDistrictInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateKhanDistrictInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    countryId: string | undefined;
    cityProvinceId: string | undefined;
}

export class CreateUpdateLocationInputDto implements ICreateUpdateLocationInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    latitude: number | undefined;
    longitude: number | undefined;

    constructor(data?: ICreateUpdateLocationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): CreateUpdateLocationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateLocationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }

    clone(): CreateUpdateLocationInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateLocationInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateLocationInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    latitude: number | undefined;
    longitude: number | undefined;
}

export class CreateUpdateRAMInputDto implements ICreateUpdateRAMInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateRAMInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateRAMInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateRAMInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateRAMInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateRAMInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateRAMInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateSangkatCommuneInputDto implements ICreateUpdateSangkatCommuneInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    countryId: string | undefined;
    cityProvinceId: string | undefined;
    khanDistrictId: string | undefined;

    constructor(data?: ICreateUpdateSangkatCommuneInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
            this.countryId = _data["countryId"];
            this.cityProvinceId = _data["cityProvinceId"];
            this.khanDistrictId = _data["khanDistrictId"];
        }
    }

    static fromJS(data: any): CreateUpdateSangkatCommuneInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateSangkatCommuneInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        data["countryId"] = this.countryId;
        data["cityProvinceId"] = this.cityProvinceId;
        data["khanDistrictId"] = this.khanDistrictId;
        return data;
    }

    clone(): CreateUpdateSangkatCommuneInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateSangkatCommuneInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateSangkatCommuneInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    countryId: string | undefined;
    cityProvinceId: string | undefined;
    khanDistrictId: string | undefined;
}

export class CreateUpdateScreenInputDto implements ICreateUpdateScreenInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateScreenInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateScreenInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateScreenInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateScreenInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateScreenInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateScreenInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateTaxInputDto implements ICreateUpdateTaxInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    rate: number;
    purchaseAccountId: string | undefined;
    saleAccountId: string | undefined;

    constructor(data?: ICreateUpdateTaxInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.rate = _data["rate"];
            this.purchaseAccountId = _data["purchaseAccountId"];
            this.saleAccountId = _data["saleAccountId"];
        }
    }

    static fromJS(data: any): CreateUpdateTaxInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateTaxInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["rate"] = this.rate;
        data["purchaseAccountId"] = this.purchaseAccountId;
        data["saleAccountId"] = this.saleAccountId;
        return data;
    }

    clone(): CreateUpdateTaxInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateTaxInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateTaxInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    rate: number;
    purchaseAccountId: string | undefined;
    saleAccountId: string | undefined;
}

export class CreateUpdateTransactionNoSettingInputDto implements ICreateUpdateTransactionNoSettingInputDto {
    id: string | undefined;
    journalType: JournalType;
    customTransactionNoEnable: boolean;
    prefix: string | undefined;
    digits: number;
    start: number;
    requiredReference: boolean;

    constructor(data?: ICreateUpdateTransactionNoSettingInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.journalType = _data["journalType"];
            this.customTransactionNoEnable = _data["customTransactionNoEnable"];
            this.prefix = _data["prefix"];
            this.digits = _data["digits"];
            this.start = _data["start"];
            this.requiredReference = _data["requiredReference"];
        }
    }

    static fromJS(data: any): CreateUpdateTransactionNoSettingInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateTransactionNoSettingInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["journalType"] = this.journalType;
        data["customTransactionNoEnable"] = this.customTransactionNoEnable;
        data["prefix"] = this.prefix;
        data["digits"] = this.digits;
        data["start"] = this.start;
        data["requiredReference"] = this.requiredReference;
        return data;
    }

    clone(): CreateUpdateTransactionNoSettingInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateTransactionNoSettingInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateTransactionNoSettingInputDto {
    id: string | undefined;
    journalType: JournalType;
    customTransactionNoEnable: boolean;
    prefix: string | undefined;
    digits: number;
    start: number;
    requiredReference: boolean;
}

export class CreateUpdateUnitInputDto implements ICreateUpdateUnitInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateUnitInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateUnitInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateUnitInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateUnitInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateUnitInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateUnitInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateVGAInputDto implements ICreateUpdateVGAInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;

    constructor(data?: ICreateUpdateVGAInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateUpdateVGAInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateVGAInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        return data;
    }

    clone(): CreateUpdateVGAInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateVGAInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateVGAInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
}

export class CreateUpdateVillageInputDto implements ICreateUpdateVillageInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    countryId: string | undefined;
    cityProvinceId: string | undefined;
    khanDistrictId: string | undefined;
    sangkatCommuneId: string | undefined;

    constructor(data?: ICreateUpdateVillageInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.code = _data["code"];
            this.countryId = _data["countryId"];
            this.cityProvinceId = _data["cityProvinceId"];
            this.khanDistrictId = _data["khanDistrictId"];
            this.sangkatCommuneId = _data["sangkatCommuneId"];
        }
    }

    static fromJS(data: any): CreateUpdateVillageInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateVillageInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["code"] = this.code;
        data["countryId"] = this.countryId;
        data["cityProvinceId"] = this.cityProvinceId;
        data["khanDistrictId"] = this.khanDistrictId;
        data["sangkatCommuneId"] = this.sangkatCommuneId;
        return data;
    }

    clone(): CreateUpdateVillageInputDto {
        const json = this.toJSON();
        let result = new CreateUpdateVillageInputDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUpdateVillageInputDto {
    id: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    code: string | undefined;
    countryId: string | undefined;
    cityProvinceId: string | undefined;
    khanDistrictId: string | undefined;
    sangkatCommuneId: string | undefined;
}

export class CreateUserDto implements ICreateUserDto {
    userName: string;
    name: string;
    surname: string;
    emailAddress: string | undefined;
    isActive: boolean;
    roleNames: string[] | undefined;
    password: string;
    useEmail: boolean;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.emailAddress = _data["emailAddress"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of _data["roleNames"])
                    this.roleNames.push(item);
            }
            this.password = _data["password"];
            this.useEmail = _data["useEmail"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["emailAddress"] = this.emailAddress;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["password"] = this.password;
        data["useEmail"] = this.useEmail;
        return data;
    }

    clone(): CreateUserDto {
        const json = this.toJSON();
        let result = new CreateUserDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUserDto {
    userName: string;
    name: string;
    surname: string;
    emailAddress: string | undefined;
    isActive: boolean;
    roleNames: string[] | undefined;
    password: string;
    useEmail: boolean;
}

export class CurrencyDetailDto implements ICurrencyDetailDto {
    id: number;
    firstId: number | undefined;
    nextId: number | undefined;
    previousId: number | undefined;
    lastId: number | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    code: string | undefined;
    symbol: string | undefined;

    constructor(data?: ICurrencyDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
        }
    }

    static fromJS(data: any): CurrencyDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        return data;
    }

    clone(): CurrencyDetailDto {
        const json = this.toJSON();
        let result = new CurrencyDetailDto();
        result.init(json);
        return result;
    }
}

export interface ICurrencyDetailDto {
    id: number;
    firstId: number | undefined;
    nextId: number | undefined;
    previousId: number | undefined;
    lastId: number | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    code: string | undefined;
    symbol: string | undefined;
}

export class CurrencyListDto implements ICurrencyListDto {
    id: number;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    code: string | undefined;
    symbol: string | undefined;

    constructor(data?: ICurrencyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
        }
    }

    static fromJS(data: any): CurrencyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        return data;
    }

    clone(): CurrencyListDto {
        const json = this.toJSON();
        let result = new CurrencyListDto();
        result.init(json);
        return result;
    }
}

export interface ICurrencyListDto {
    id: number;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    code: string | undefined;
    symbol: string | undefined;
}

export class CurrencyListDtoPagedResultDto implements ICurrencyListDtoPagedResultDto {
    items: CurrencyListDto[] | undefined;
    totalCount: number;

    constructor(data?: ICurrencyListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(CurrencyListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): CurrencyListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): CurrencyListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new CurrencyListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ICurrencyListDtoPagedResultDto {
    items: CurrencyListDto[] | undefined;
    totalCount: number;
}

export class CurrentUserProfileEditDto implements ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean;
    timezone: string | undefined;
    qrCodeSetupImageUrl: string | undefined;
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ICurrentUserProfileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.isPhoneNumberConfirmed = _data["isPhoneNumberConfirmed"];
            this.timezone = _data["timezone"];
            this.qrCodeSetupImageUrl = _data["qrCodeSetupImageUrl"];
            this.isGoogleAuthenticatorEnabled = _data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["timezone"] = this.timezone;
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data;
    }

    clone(): CurrentUserProfileEditDto {
        const json = this.toJSON();
        let result = new CurrentUserProfileEditDto();
        result.init(json);
        return result;
    }
}

export interface ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean;
    timezone: string | undefined;
    qrCodeSetupImageUrl: string | undefined;
    isGoogleAuthenticatorEnabled: boolean;
}

export class EditionEditDto implements IEditionEditDto {
    id: number | undefined;
    name: string;
    displayName: string | undefined;

    constructor(data?: IEditionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): EditionEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data;
    }

    clone(): EditionEditDto {
        const json = this.toJSON();
        let result = new EditionEditDto();
        result.init(json);
        return result;
    }
}

export interface IEditionEditDto {
    id: number | undefined;
    name: string;
    displayName: string | undefined;
}

export class EditionListDto implements IEditionListDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;

    constructor(data?: IEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): EditionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data;
    }

    clone(): EditionListDto {
        const json = this.toJSON();
        let result = new EditionListDto();
        result.init(json);
        return result;
    }
}

export interface IEditionListDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;
}

export class EditionListDtoPagedResultDto implements IEditionListDtoPagedResultDto {
    items: EditionListDto[] | undefined;
    totalCount: number;

    constructor(data?: IEditionListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(EditionListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): EditionListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): EditionListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new EditionListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IEditionListDtoPagedResultDto {
    items: EditionListDto[] | undefined;
    totalCount: number;
}

export class EmailSettingsEditDto implements IEmailSettingsEditDto {
    defaultFromAddress: string | undefined;
    defaultFromDisplayName: string | undefined;
    smtpHost: string | undefined;
    smtpPort: number;
    smtpUserName: string | undefined;
    smtpPassword: string | undefined;
    smtpDomain: string | undefined;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;

    constructor(data?: IEmailSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultFromAddress = _data["defaultFromAddress"];
            this.defaultFromDisplayName = _data["defaultFromDisplayName"];
            this.smtpHost = _data["smtpHost"];
            this.smtpPort = _data["smtpPort"];
            this.smtpUserName = _data["smtpUserName"];
            this.smtpPassword = _data["smtpPassword"];
            this.smtpDomain = _data["smtpDomain"];
            this.smtpEnableSsl = _data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = _data["smtpUseDefaultCredentials"];
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data;
    }

    clone(): EmailSettingsEditDto {
        const json = this.toJSON();
        let result = new EmailSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IEmailSettingsEditDto {
    defaultFromAddress: string | undefined;
    defaultFromDisplayName: string | undefined;
    smtpHost: string | undefined;
    smtpPort: number;
    smtpUserName: string | undefined;
    smtpPassword: string | undefined;
    smtpDomain: string | undefined;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;
}

export class EntityDto implements IEntityDto {
    id: number;

    constructor(data?: IEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): EntityDto {
        const json = this.toJSON();
        let result = new EntityDto();
        result.init(json);
        return result;
    }
}

export interface IEntityDto {
    id: number;
}

export class ExportAuditLogsInput implements IExportAuditLogsInput {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    startDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    userName: string | undefined;
    serviceName: string | undefined;
    methodName: string | undefined;
    browserInfo: string | undefined;
    hasException: boolean | undefined;
    minExecutionDuration: number | undefined;
    maxExecutionDuration: number | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportAuditLogsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.startDate = _data["startDate"] ? moment(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? moment(_data["endDate"].toString()) : <any>undefined;
            this.userName = _data["userName"];
            this.serviceName = _data["serviceName"];
            this.methodName = _data["methodName"];
            this.browserInfo = _data["browserInfo"];
            this.hasException = _data["hasException"];
            this.minExecutionDuration = _data["minExecutionDuration"];
            this.maxExecutionDuration = _data["maxExecutionDuration"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportAuditLogsInput {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAuditLogsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["userName"] = this.userName;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["browserInfo"] = this.browserInfo;
        data["hasException"] = this.hasException;
        data["minExecutionDuration"] = this.minExecutionDuration;
        data["maxExecutionDuration"] = this.maxExecutionDuration;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportAuditLogsInput {
        const json = this.toJSON();
        let result = new ExportAuditLogsInput();
        result.init(json);
        return result;
    }
}

export interface IExportAuditLogsInput {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    startDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    userName: string | undefined;
    serviceName: string | undefined;
    methodName: string | undefined;
    browserInfo: string | undefined;
    hasException: boolean | undefined;
    minExecutionDuration: number | undefined;
    maxExecutionDuration: number | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelBatteryInputDto implements IExportExcelBatteryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelBatteryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelBatteryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelBatteryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelBatteryInputDto {
        const json = this.toJSON();
        let result = new ExportExcelBatteryInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelBatteryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelBranchInputDto implements IExportExcelBranchInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelBranchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelBranchInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelBranchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelBranchInputDto {
        const json = this.toJSON();
        let result = new ExportExcelBranchInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelBranchInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelCPUInputDto implements IExportExcelCPUInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelCPUInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelCPUInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelCPUInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelCPUInputDto {
        const json = this.toJSON();
        let result = new ExportExcelCPUInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelCPUInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelCameraInputDto implements IExportExcelCameraInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelCameraInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelCameraInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelCameraInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelCameraInputDto {
        const json = this.toJSON();
        let result = new ExportExcelCameraInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelCameraInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelChartOfAccountInputDto implements IExportExcelChartOfAccountInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    accountTypeFilter: AccountTypeFilterInputDto;
    subAccountTypeFilter: SubAccountTypeFilterInputDto;
    parentFilter: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelChartOfAccountInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.accountTypeFilter = _data["accountTypeFilter"] ? AccountTypeFilterInputDto.fromJS(_data["accountTypeFilter"]) : <any>undefined;
            this.subAccountTypeFilter = _data["subAccountTypeFilter"] ? SubAccountTypeFilterInputDto.fromJS(_data["subAccountTypeFilter"]) : <any>undefined;
            this.parentFilter = _data["parentFilter"] ? GuidNullableFilterInputDto.fromJS(_data["parentFilter"]) : <any>undefined;
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelChartOfAccountInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelChartOfAccountInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["accountTypeFilter"] = this.accountTypeFilter ? this.accountTypeFilter.toJSON() : <any>undefined;
        data["subAccountTypeFilter"] = this.subAccountTypeFilter ? this.subAccountTypeFilter.toJSON() : <any>undefined;
        data["parentFilter"] = this.parentFilter ? this.parentFilter.toJSON() : <any>undefined;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelChartOfAccountInputDto {
        const json = this.toJSON();
        let result = new ExportExcelChartOfAccountInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelChartOfAccountInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    accountTypeFilter: AccountTypeFilterInputDto;
    subAccountTypeFilter: SubAccountTypeFilterInputDto;
    parentFilter: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelCityProvinceInputDto implements IExportExcelCityProvinceInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelCityProvinceInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelCityProvinceInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelCityProvinceInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelCityProvinceInputDto {
        const json = this.toJSON();
        let result = new ExportExcelCityProvinceInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelCityProvinceInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelColorPatternInputDto implements IExportExcelColorPatternInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelColorPatternInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelColorPatternInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelColorPatternInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelColorPatternInputDto {
        const json = this.toJSON();
        let result = new ExportExcelColorPatternInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelColorPatternInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelCountryInputDto implements IExportExcelCountryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    currencies: Int64FilterInputDto;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelCountryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.currencies = _data["currencies"] ? Int64FilterInputDto.fromJS(_data["currencies"]) : <any>undefined;
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelCountryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelCountryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["currencies"] = this.currencies ? this.currencies.toJSON() : <any>undefined;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelCountryInputDto {
        const json = this.toJSON();
        let result = new ExportExcelCountryInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelCountryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    currencies: Int64FilterInputDto;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelCurrencyInputDto implements IExportExcelCurrencyInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelCurrencyInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelCurrencyInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelCurrencyInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelCurrencyInputDto {
        const json = this.toJSON();
        let result = new ExportExcelCurrencyInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelCurrencyInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelFieldAInputDto implements IExportExcelFieldAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelFieldAInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelFieldAInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelFieldAInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelFieldAInputDto {
        const json = this.toJSON();
        let result = new ExportExcelFieldAInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelFieldAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelFieldBInputDto implements IExportExcelFieldBInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelFieldBInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelFieldBInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelFieldBInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelFieldBInputDto {
        const json = this.toJSON();
        let result = new ExportExcelFieldBInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelFieldBInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelFieldCInputDto implements IExportExcelFieldCInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelFieldCInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelFieldCInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelFieldCInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelFieldCInputDto {
        const json = this.toJSON();
        let result = new ExportExcelFieldCInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelFieldCInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelHDDInputDto implements IExportExcelHDDInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelHDDInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelHDDInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelHDDInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelHDDInputDto {
        const json = this.toJSON();
        let result = new ExportExcelHDDInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelHDDInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelItemBrandInputDto implements IExportExcelItemBrandInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelItemBrandInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelItemBrandInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelItemBrandInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelItemBrandInputDto {
        const json = this.toJSON();
        let result = new ExportExcelItemBrandInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelItemBrandInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelItemGradeInputDto implements IExportExcelItemGradeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelItemGradeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelItemGradeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelItemGradeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelItemGradeInputDto {
        const json = this.toJSON();
        let result = new ExportExcelItemGradeInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelItemGradeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelItemGroupInputDto implements IExportExcelItemGroupInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelItemGroupInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelItemGroupInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelItemGroupInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelItemGroupInputDto {
        const json = this.toJSON();
        let result = new ExportExcelItemGroupInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelItemGroupInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelItemModelInputDto implements IExportExcelItemModelInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelItemModelInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelItemModelInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelItemModelInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelItemModelInputDto {
        const json = this.toJSON();
        let result = new ExportExcelItemModelInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelItemModelInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelItemSeriesInputDto implements IExportExcelItemSeriesInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelItemSeriesInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelItemSeriesInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelItemSeriesInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelItemSeriesInputDto {
        const json = this.toJSON();
        let result = new ExportExcelItemSeriesInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelItemSeriesInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelItemSizeInputDto implements IExportExcelItemSizeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelItemSizeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelItemSizeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelItemSizeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelItemSizeInputDto {
        const json = this.toJSON();
        let result = new ExportExcelItemSizeInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelItemSizeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelKhanDistrictInputDto implements IExportExcelKhanDistrictInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelKhanDistrictInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
            this.cityProvinces = _data["cityProvinces"] ? GuidNullableFilterInputDto.fromJS(_data["cityProvinces"]) : <any>undefined;
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelKhanDistrictInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelKhanDistrictInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        data["cityProvinces"] = this.cityProvinces ? this.cityProvinces.toJSON() : <any>undefined;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelKhanDistrictInputDto {
        const json = this.toJSON();
        let result = new ExportExcelKhanDistrictInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelKhanDistrictInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelLocationInputDto implements IExportExcelLocationInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelLocationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelLocationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelLocationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelLocationInputDto {
        const json = this.toJSON();
        let result = new ExportExcelLocationInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelLocationInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelRAMInputDto implements IExportExcelRAMInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelRAMInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelRAMInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelRAMInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelRAMInputDto {
        const json = this.toJSON();
        let result = new ExportExcelRAMInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelRAMInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelSangkatCommuneInputDto implements IExportExcelSangkatCommuneInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelSangkatCommuneInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
            this.cityProvinces = _data["cityProvinces"] ? GuidNullableFilterInputDto.fromJS(_data["cityProvinces"]) : <any>undefined;
            this.khanDistricts = _data["khanDistricts"] ? GuidNullableFilterInputDto.fromJS(_data["khanDistricts"]) : <any>undefined;
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelSangkatCommuneInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelSangkatCommuneInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        data["cityProvinces"] = this.cityProvinces ? this.cityProvinces.toJSON() : <any>undefined;
        data["khanDistricts"] = this.khanDistricts ? this.khanDistricts.toJSON() : <any>undefined;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelSangkatCommuneInputDto {
        const json = this.toJSON();
        let result = new ExportExcelSangkatCommuneInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelSangkatCommuneInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelScreenInputDto implements IExportExcelScreenInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelScreenInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelScreenInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelScreenInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelScreenInputDto {
        const json = this.toJSON();
        let result = new ExportExcelScreenInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelScreenInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelTaxInputDto implements IExportExcelTaxInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelTaxInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelTaxInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelTaxInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelTaxInputDto {
        const json = this.toJSON();
        let result = new ExportExcelTaxInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelTaxInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelUnitInputDto implements IExportExcelUnitInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelUnitInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelUnitInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelUnitInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelUnitInputDto {
        const json = this.toJSON();
        let result = new ExportExcelUnitInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelUnitInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelVGAInputDto implements IExportExcelVGAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelVGAInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelVGAInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelVGAInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelVGAInputDto {
        const json = this.toJSON();
        let result = new ExportExcelVGAInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelVGAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    columns: ColumnOutput[] | undefined;
}

export class ExportExcelVillageInputDto implements IExportExcelVillageInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;
    sangkatCommunes: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;

    constructor(data?: IExportExcelVillageInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
            this.cityProvinces = _data["cityProvinces"] ? GuidNullableFilterInputDto.fromJS(_data["cityProvinces"]) : <any>undefined;
            this.khanDistricts = _data["khanDistricts"] ? GuidNullableFilterInputDto.fromJS(_data["khanDistricts"]) : <any>undefined;
            this.sangkatCommunes = _data["sangkatCommunes"] ? GuidNullableFilterInputDto.fromJS(_data["sangkatCommunes"]) : <any>undefined;
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns.push(ColumnOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportExcelVillageInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExportExcelVillageInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        data["cityProvinces"] = this.cityProvinces ? this.cityProvinces.toJSON() : <any>undefined;
        data["khanDistricts"] = this.khanDistricts ? this.khanDistricts.toJSON() : <any>undefined;
        data["sangkatCommunes"] = this.sangkatCommunes ? this.sangkatCommunes.toJSON() : <any>undefined;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }

    clone(): ExportExcelVillageInputDto {
        const json = this.toJSON();
        let result = new ExportExcelVillageInputDto();
        result.init(json);
        return result;
    }
}

export interface IExportExcelVillageInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;
    sangkatCommunes: GuidNullableFilterInputDto;
    columns: ColumnOutput[] | undefined;
}

export class ExportFileOutput implements IExportFileOutput {
    fileName: string;
    fileToken: string;
    fileUrl: string | undefined;

    constructor(data?: IExportFileOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileToken = _data["fileToken"];
            this.fileUrl = _data["fileUrl"];
        }
    }

    static fromJS(data: any): ExportFileOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ExportFileOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileToken"] = this.fileToken;
        data["fileUrl"] = this.fileUrl;
        return data;
    }

    clone(): ExportFileOutput {
        const json = this.toJSON();
        let result = new ExportFileOutput();
        result.init(json);
        return result;
    }
}

export interface IExportFileOutput {
    fileName: string;
    fileToken: string;
    fileUrl: string | undefined;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authProvider = _data["authProvider"];
            this.providerKey = _data["providerKey"];
            this.providerAccessCode = _data["providerAccessCode"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        return data;
    }

    clone(): ExternalAuthenticateModel {
        const json = this.toJSON();
        let result = new ExternalAuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    waitingForActivation: boolean;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
            this.waitingForActivation = _data["waitingForActivation"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        return data;
    }

    clone(): ExternalAuthenticateResultModel {
        const json = this.toJSON();
        let result = new ExternalAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IExternalAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    waitingForActivation: boolean;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    name: string | undefined;
    clientId: string | undefined;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.clientId = _data["clientId"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        return data;
    }

    clone(): ExternalLoginProviderInfoModel {
        const json = this.toJSON();
        let result = new ExternalLoginProviderInfoModel();
        result.init(json);
        return result;
    }
}

export interface IExternalLoginProviderInfoModel {
    name: string | undefined;
    clientId: string | undefined;
}

export class FeatureInputTypeDto implements IFeatureInputTypeDto {
    name: string | undefined;
    attributes: { [key: string]: any; } | undefined;
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;

    constructor(data?: IFeatureInputTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (_data["attributes"]) {
                this.attributes = {} as any;
                for (let key in _data["attributes"]) {
                    if (_data["attributes"].hasOwnProperty(key))
                        (<any>this.attributes)[key] = _data["attributes"][key];
                }
            }
            this.validator = _data["validator"] ? IValueValidator.fromJS(_data["validator"]) : <any>undefined;
            this.itemSource = _data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(_data["itemSource"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FeatureInputTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    (<any>data["attributes"])[key] = (<any>this.attributes)[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : <any>undefined;
        return data;
    }

    clone(): FeatureInputTypeDto {
        const json = this.toJSON();
        let result = new FeatureInputTypeDto();
        result.init(json);
        return result;
    }
}

export interface IFeatureInputTypeDto {
    name: string | undefined;
    attributes: { [key: string]: any; } | undefined;
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;
}

export class FieldADetailDto implements IFieldADetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IFieldADetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FieldADetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldADetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): FieldADetailDto {
        const json = this.toJSON();
        let result = new FieldADetailDto();
        result.init(json);
        return result;
    }
}

export interface IFieldADetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class FieldAListDto implements IFieldAListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IFieldAListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FieldAListDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldAListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): FieldAListDto {
        const json = this.toJSON();
        let result = new FieldAListDto();
        result.init(json);
        return result;
    }
}

export interface IFieldAListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class FieldAListDtoPagedResultDto implements IFieldAListDtoPagedResultDto {
    items: FieldAListDto[] | undefined;
    totalCount: number;

    constructor(data?: IFieldAListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FieldAListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FieldAListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldAListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FieldAListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FieldAListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFieldAListDtoPagedResultDto {
    items: FieldAListDto[] | undefined;
    totalCount: number;
}

export class FieldBDetailDto implements IFieldBDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IFieldBDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FieldBDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldBDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): FieldBDetailDto {
        const json = this.toJSON();
        let result = new FieldBDetailDto();
        result.init(json);
        return result;
    }
}

export interface IFieldBDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class FieldBListDto implements IFieldBListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IFieldBListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FieldBListDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldBListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): FieldBListDto {
        const json = this.toJSON();
        let result = new FieldBListDto();
        result.init(json);
        return result;
    }
}

export interface IFieldBListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class FieldBListDtoPagedResultDto implements IFieldBListDtoPagedResultDto {
    items: FieldBListDto[] | undefined;
    totalCount: number;

    constructor(data?: IFieldBListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FieldBListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FieldBListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldBListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FieldBListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FieldBListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFieldBListDtoPagedResultDto {
    items: FieldBListDto[] | undefined;
    totalCount: number;
}

export class FieldCDetailDto implements IFieldCDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IFieldCDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FieldCDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldCDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): FieldCDetailDto {
        const json = this.toJSON();
        let result = new FieldCDetailDto();
        result.init(json);
        return result;
    }
}

export interface IFieldCDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class FieldCListDto implements IFieldCListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IFieldCListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FieldCListDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldCListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): FieldCListDto {
        const json = this.toJSON();
        let result = new FieldCListDto();
        result.init(json);
        return result;
    }
}

export interface IFieldCListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class FieldCListDtoPagedResultDto implements IFieldCListDtoPagedResultDto {
    items: FieldCListDto[] | undefined;
    totalCount: number;

    constructor(data?: IFieldCListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FieldCListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FieldCListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FieldCListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FieldCListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FieldCListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFieldCListDtoPagedResultDto {
    items: FieldCListDto[] | undefined;
    totalCount: number;
}

export class FileTokenInput implements IFileTokenInput {
    token: string | undefined;

    constructor(data?: IFileTokenInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): FileTokenInput {
        data = typeof data === 'object' ? data : {};
        let result = new FileTokenInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }

    clone(): FileTokenInput {
        const json = this.toJSON();
        let result = new FileTokenInput();
        result.init(json);
        return result;
    }
}

export interface IFileTokenInput {
    token: string | undefined;
}

export class FindBatteryDto implements IFindBatteryDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindBatteryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindBatteryDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindBatteryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindBatteryDto {
        const json = this.toJSON();
        let result = new FindBatteryDto();
        result.init(json);
        return result;
    }
}

export interface IFindBatteryDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindBatteryDtoPagedResultDto implements IFindBatteryDtoPagedResultDto {
    items: FindBatteryDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindBatteryDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindBatteryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindBatteryDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindBatteryDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindBatteryDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindBatteryDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindBatteryDtoPagedResultDto {
    items: FindBatteryDto[] | undefined;
    totalCount: number;
}

export class FindBranchDto implements IFindBranchDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    isDefault: boolean;
    businessId: string | undefined;
    phoneNumber: string | undefined;

    constructor(data?: IFindBranchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.isDefault = _data["isDefault"];
            this.businessId = _data["businessId"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): FindBranchDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindBranchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["isDefault"] = this.isDefault;
        data["businessId"] = this.businessId;
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }

    clone(): FindBranchDto {
        const json = this.toJSON();
        let result = new FindBranchDto();
        result.init(json);
        return result;
    }
}

export interface IFindBranchDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    isDefault: boolean;
    businessId: string | undefined;
    phoneNumber: string | undefined;
}

export class FindBranchDtoPagedResultDto implements IFindBranchDtoPagedResultDto {
    items: FindBranchDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindBranchDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindBranchDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindBranchDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindBranchDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindBranchDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindBranchDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindBranchDtoPagedResultDto {
    items: FindBranchDto[] | undefined;
    totalCount: number;
}

export class FindCPUDto implements IFindCPUDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindCPUDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindCPUDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCPUDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindCPUDto {
        const json = this.toJSON();
        let result = new FindCPUDto();
        result.init(json);
        return result;
    }
}

export interface IFindCPUDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindCPUDtoPagedResultDto implements IFindCPUDtoPagedResultDto {
    items: FindCPUDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindCPUDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindCPUDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindCPUDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCPUDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindCPUDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindCPUDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindCPUDtoPagedResultDto {
    items: FindCPUDto[] | undefined;
    totalCount: number;
}

export class FindCameraDto implements IFindCameraDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindCameraDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindCameraDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCameraDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindCameraDto {
        const json = this.toJSON();
        let result = new FindCameraDto();
        result.init(json);
        return result;
    }
}

export interface IFindCameraDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindCameraDtoPagedResultDto implements IFindCameraDtoPagedResultDto {
    items: FindCameraDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindCameraDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindCameraDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindCameraDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCameraDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindCameraDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindCameraDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindCameraDtoPagedResultDto {
    items: FindCameraDto[] | undefined;
    totalCount: number;
}

export class FindChartOfAccountDto implements IFindChartOfAccountDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    accountType: string | undefined;
    subAccountType: string | undefined;
    parentAccount: string | undefined;

    constructor(data?: IFindChartOfAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
            this.accountType = _data["accountType"];
            this.subAccountType = _data["subAccountType"];
            this.parentAccount = _data["parentAccount"];
        }
    }

    static fromJS(data: any): FindChartOfAccountDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindChartOfAccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        data["accountType"] = this.accountType;
        data["subAccountType"] = this.subAccountType;
        data["parentAccount"] = this.parentAccount;
        return data;
    }

    clone(): FindChartOfAccountDto {
        const json = this.toJSON();
        let result = new FindChartOfAccountDto();
        result.init(json);
        return result;
    }
}

export interface IFindChartOfAccountDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    accountType: string | undefined;
    subAccountType: string | undefined;
    parentAccount: string | undefined;
}

export class FindChartOfAccountDtoPagedResultDto implements IFindChartOfAccountDtoPagedResultDto {
    items: FindChartOfAccountDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindChartOfAccountDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindChartOfAccountDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindChartOfAccountDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindChartOfAccountDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindChartOfAccountDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindChartOfAccountDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindChartOfAccountDtoPagedResultDto {
    items: FindChartOfAccountDto[] | undefined;
    totalCount: number;
}

export class FindChartOfAccountInputDto implements IFindChartOfAccountInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    accountTypeFilter: AccountTypeFilterInputDto;
    subAccountTypeFilter: SubAccountTypeFilterInputDto;
    parentFilter: GuidNullableFilterInputDto;
    excludeSubAccount: boolean;

    constructor(data?: IFindChartOfAccountInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.accountTypeFilter = _data["accountTypeFilter"] ? AccountTypeFilterInputDto.fromJS(_data["accountTypeFilter"]) : <any>undefined;
            this.subAccountTypeFilter = _data["subAccountTypeFilter"] ? SubAccountTypeFilterInputDto.fromJS(_data["subAccountTypeFilter"]) : <any>undefined;
            this.parentFilter = _data["parentFilter"] ? GuidNullableFilterInputDto.fromJS(_data["parentFilter"]) : <any>undefined;
            this.excludeSubAccount = _data["excludeSubAccount"];
        }
    }

    static fromJS(data: any): FindChartOfAccountInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindChartOfAccountInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["accountTypeFilter"] = this.accountTypeFilter ? this.accountTypeFilter.toJSON() : <any>undefined;
        data["subAccountTypeFilter"] = this.subAccountTypeFilter ? this.subAccountTypeFilter.toJSON() : <any>undefined;
        data["parentFilter"] = this.parentFilter ? this.parentFilter.toJSON() : <any>undefined;
        data["excludeSubAccount"] = this.excludeSubAccount;
        return data;
    }

    clone(): FindChartOfAccountInputDto {
        const json = this.toJSON();
        let result = new FindChartOfAccountInputDto();
        result.init(json);
        return result;
    }
}

export interface IFindChartOfAccountInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    accountTypeFilter: AccountTypeFilterInputDto;
    subAccountTypeFilter: SubAccountTypeFilterInputDto;
    parentFilter: GuidNullableFilterInputDto;
    excludeSubAccount: boolean;
}

export class FindCityProvinceDto implements IFindCityProvinceDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    iso: string | undefined;
    countryName: string | undefined;

    constructor(data?: IFindCityProvinceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.countryName = _data["countryName"];
        }
    }

    static fromJS(data: any): FindCityProvinceDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCityProvinceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["countryName"] = this.countryName;
        return data;
    }

    clone(): FindCityProvinceDto {
        const json = this.toJSON();
        let result = new FindCityProvinceDto();
        result.init(json);
        return result;
    }
}

export interface IFindCityProvinceDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    iso: string | undefined;
    countryName: string | undefined;
}

export class FindCityProvinceDtoPagedResultDto implements IFindCityProvinceDtoPagedResultDto {
    items: FindCityProvinceDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindCityProvinceDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindCityProvinceDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindCityProvinceDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCityProvinceDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindCityProvinceDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindCityProvinceDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindCityProvinceDtoPagedResultDto {
    items: FindCityProvinceDto[] | undefined;
    totalCount: number;
}

export class FindColorPatternDto implements IFindColorPatternDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindColorPatternDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindColorPatternDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindColorPatternDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindColorPatternDto {
        const json = this.toJSON();
        let result = new FindColorPatternDto();
        result.init(json);
        return result;
    }
}

export interface IFindColorPatternDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindColorPatternDtoPagedResultDto implements IFindColorPatternDtoPagedResultDto {
    items: FindColorPatternDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindColorPatternDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindColorPatternDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindColorPatternDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindColorPatternDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindColorPatternDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindColorPatternDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindColorPatternDtoPagedResultDto {
    items: FindColorPatternDto[] | undefined;
    totalCount: number;
}

export class FindCountryDto implements IFindCountryDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;

    constructor(data?: IFindCountryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
            this.iso = _data["iso"];
            this.isO2 = _data["isO2"];
            this.phonePrefix = _data["phonePrefix"];
            this.currencyId = _data["currencyId"];
            this.currencyCode = _data["currencyCode"];
        }
    }

    static fromJS(data: any): FindCountryDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCountryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        data["iso"] = this.iso;
        data["isO2"] = this.isO2;
        data["phonePrefix"] = this.phonePrefix;
        data["currencyId"] = this.currencyId;
        data["currencyCode"] = this.currencyCode;
        return data;
    }

    clone(): FindCountryDto {
        const json = this.toJSON();
        let result = new FindCountryDto();
        result.init(json);
        return result;
    }
}

export interface IFindCountryDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    iso: string | undefined;
    isO2: string | undefined;
    phonePrefix: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;
}

export class FindCountryDtoPagedResultDto implements IFindCountryDtoPagedResultDto {
    items: FindCountryDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindCountryDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindCountryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindCountryDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCountryDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindCountryDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindCountryDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindCountryDtoPagedResultDto {
    items: FindCountryDto[] | undefined;
    totalCount: number;
}

export class FindCurrencyDto implements IFindCurrencyDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    isDefault: boolean;
    code: string | undefined;
    symbol: string | undefined;

    constructor(data?: IFindCurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.isDefault = _data["isDefault"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
        }
    }

    static fromJS(data: any): FindCurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["isDefault"] = this.isDefault;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        return data;
    }

    clone(): FindCurrencyDto {
        const json = this.toJSON();
        let result = new FindCurrencyDto();
        result.init(json);
        return result;
    }
}

export interface IFindCurrencyDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    isDefault: boolean;
    code: string | undefined;
    symbol: string | undefined;
}

export class FindCurrencyDtoPagedResultDto implements IFindCurrencyDtoPagedResultDto {
    items: FindCurrencyDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindCurrencyDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindCurrencyDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindCurrencyDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindCurrencyDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindCurrencyDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindCurrencyDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindCurrencyDtoPagedResultDto {
    items: FindCurrencyDto[] | undefined;
    totalCount: number;
}

export class FindFieldADto implements IFindFieldADto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindFieldADto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindFieldADto {
        data = typeof data === 'object' ? data : {};
        let result = new FindFieldADto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindFieldADto {
        const json = this.toJSON();
        let result = new FindFieldADto();
        result.init(json);
        return result;
    }
}

export interface IFindFieldADto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindFieldADtoPagedResultDto implements IFindFieldADtoPagedResultDto {
    items: FindFieldADto[] | undefined;
    totalCount: number;

    constructor(data?: IFindFieldADtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindFieldADto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindFieldADtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindFieldADtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindFieldADtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindFieldADtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindFieldADtoPagedResultDto {
    items: FindFieldADto[] | undefined;
    totalCount: number;
}

export class FindFieldBDto implements IFindFieldBDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindFieldBDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindFieldBDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindFieldBDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindFieldBDto {
        const json = this.toJSON();
        let result = new FindFieldBDto();
        result.init(json);
        return result;
    }
}

export interface IFindFieldBDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindFieldBDtoPagedResultDto implements IFindFieldBDtoPagedResultDto {
    items: FindFieldBDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindFieldBDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindFieldBDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindFieldBDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindFieldBDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindFieldBDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindFieldBDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindFieldBDtoPagedResultDto {
    items: FindFieldBDto[] | undefined;
    totalCount: number;
}

export class FindFieldCDto implements IFindFieldCDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindFieldCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindFieldCDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindFieldCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindFieldCDto {
        const json = this.toJSON();
        let result = new FindFieldCDto();
        result.init(json);
        return result;
    }
}

export interface IFindFieldCDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindFieldCDtoPagedResultDto implements IFindFieldCDtoPagedResultDto {
    items: FindFieldCDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindFieldCDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindFieldCDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindFieldCDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindFieldCDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindFieldCDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindFieldCDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindFieldCDtoPagedResultDto {
    items: FindFieldCDto[] | undefined;
    totalCount: number;
}

export class FindHDDDto implements IFindHDDDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindHDDDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindHDDDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindHDDDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindHDDDto {
        const json = this.toJSON();
        let result = new FindHDDDto();
        result.init(json);
        return result;
    }
}

export interface IFindHDDDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindHDDDtoPagedResultDto implements IFindHDDDtoPagedResultDto {
    items: FindHDDDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindHDDDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindHDDDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindHDDDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindHDDDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindHDDDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindHDDDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindHDDDtoPagedResultDto {
    items: FindHDDDto[] | undefined;
    totalCount: number;
}

export class FindItemBrandDto implements IFindItemBrandDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindItemBrandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindItemBrandDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemBrandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindItemBrandDto {
        const json = this.toJSON();
        let result = new FindItemBrandDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemBrandDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindItemBrandDtoPagedResultDto implements IFindItemBrandDtoPagedResultDto {
    items: FindItemBrandDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindItemBrandDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindItemBrandDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindItemBrandDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemBrandDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindItemBrandDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindItemBrandDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemBrandDtoPagedResultDto {
    items: FindItemBrandDto[] | undefined;
    totalCount: number;
}

export class FindItemGradeDto implements IFindItemGradeDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindItemGradeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindItemGradeDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemGradeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindItemGradeDto {
        const json = this.toJSON();
        let result = new FindItemGradeDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemGradeDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindItemGradeDtoPagedResultDto implements IFindItemGradeDtoPagedResultDto {
    items: FindItemGradeDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindItemGradeDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindItemGradeDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindItemGradeDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemGradeDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindItemGradeDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindItemGradeDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemGradeDtoPagedResultDto {
    items: FindItemGradeDto[] | undefined;
    totalCount: number;
}

export class FindItemGroupDto implements IFindItemGroupDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindItemGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindItemGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindItemGroupDto {
        const json = this.toJSON();
        let result = new FindItemGroupDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemGroupDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindItemGroupDtoPagedResultDto implements IFindItemGroupDtoPagedResultDto {
    items: FindItemGroupDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindItemGroupDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindItemGroupDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindItemGroupDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemGroupDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindItemGroupDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindItemGroupDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemGroupDtoPagedResultDto {
    items: FindItemGroupDto[] | undefined;
    totalCount: number;
}

export class FindItemModelDto implements IFindItemModelDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindItemModelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindItemModelDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemModelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindItemModelDto {
        const json = this.toJSON();
        let result = new FindItemModelDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemModelDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindItemModelDtoPagedResultDto implements IFindItemModelDtoPagedResultDto {
    items: FindItemModelDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindItemModelDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindItemModelDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindItemModelDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemModelDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindItemModelDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindItemModelDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemModelDtoPagedResultDto {
    items: FindItemModelDto[] | undefined;
    totalCount: number;
}

export class FindItemSeriesDto implements IFindItemSeriesDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindItemSeriesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindItemSeriesDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemSeriesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindItemSeriesDto {
        const json = this.toJSON();
        let result = new FindItemSeriesDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemSeriesDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindItemSeriesDtoPagedResultDto implements IFindItemSeriesDtoPagedResultDto {
    items: FindItemSeriesDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindItemSeriesDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindItemSeriesDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindItemSeriesDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemSeriesDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindItemSeriesDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindItemSeriesDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemSeriesDtoPagedResultDto {
    items: FindItemSeriesDto[] | undefined;
    totalCount: number;
}

export class FindItemSizeDto implements IFindItemSizeDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindItemSizeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindItemSizeDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemSizeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindItemSizeDto {
        const json = this.toJSON();
        let result = new FindItemSizeDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemSizeDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindItemSizeDtoPagedResultDto implements IFindItemSizeDtoPagedResultDto {
    items: FindItemSizeDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindItemSizeDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindItemSizeDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindItemSizeDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindItemSizeDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindItemSizeDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindItemSizeDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindItemSizeDtoPagedResultDto {
    items: FindItemSizeDto[] | undefined;
    totalCount: number;
}

export class FindKhanDistrictDto implements IFindKhanDistrictDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;

    constructor(data?: IFindKhanDistrictDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.cityProvinceName = _data["cityProvinceName"];
        }
    }

    static fromJS(data: any): FindKhanDistrictDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindKhanDistrictDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["cityProvinceName"] = this.cityProvinceName;
        return data;
    }

    clone(): FindKhanDistrictDto {
        const json = this.toJSON();
        let result = new FindKhanDistrictDto();
        result.init(json);
        return result;
    }
}

export interface IFindKhanDistrictDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
}

export class FindKhanDistrictDtoPagedResultDto implements IFindKhanDistrictDtoPagedResultDto {
    items: FindKhanDistrictDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindKhanDistrictDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindKhanDistrictDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindKhanDistrictDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindKhanDistrictDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindKhanDistrictDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindKhanDistrictDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindKhanDistrictDtoPagedResultDto {
    items: FindKhanDistrictDto[] | undefined;
    totalCount: number;
}

export class FindLocationDto implements IFindLocationDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;

    constructor(data?: IFindLocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): FindLocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindLocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): FindLocationDto {
        const json = this.toJSON();
        let result = new FindLocationDto();
        result.init(json);
        return result;
    }
}

export interface IFindLocationDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
}

export class FindLocationDtoPagedResultDto implements IFindLocationDtoPagedResultDto {
    items: FindLocationDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindLocationDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindLocationDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindLocationDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindLocationDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindLocationDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindLocationDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindLocationDtoPagedResultDto {
    items: FindLocationDto[] | undefined;
    totalCount: number;
}

export class FindOrganizationUnitUsersInput implements IFindOrganizationUnitUsersInput {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    keyword: string | undefined;
    organizationUnitId: number;

    constructor(data?: IFindOrganizationUnitUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.keyword = _data["keyword"];
            this.organizationUnitId = _data["organizationUnitId"];
        }
    }

    static fromJS(data: any): FindOrganizationUnitUsersInput {
        data = typeof data === 'object' ? data : {};
        let result = new FindOrganizationUnitUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["keyword"] = this.keyword;
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    }

    clone(): FindOrganizationUnitUsersInput {
        const json = this.toJSON();
        let result = new FindOrganizationUnitUsersInput();
        result.init(json);
        return result;
    }
}

export interface IFindOrganizationUnitUsersInput {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    keyword: string | undefined;
    organizationUnitId: number;
}

export class FindRAMDto implements IFindRAMDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindRAMDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindRAMDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindRAMDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindRAMDto {
        const json = this.toJSON();
        let result = new FindRAMDto();
        result.init(json);
        return result;
    }
}

export interface IFindRAMDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindRAMDtoPagedResultDto implements IFindRAMDtoPagedResultDto {
    items: FindRAMDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindRAMDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindRAMDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindRAMDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindRAMDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindRAMDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindRAMDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindRAMDtoPagedResultDto {
    items: FindRAMDto[] | undefined;
    totalCount: number;
}

export class FindSangkatCommuneDto implements IFindSangkatCommuneDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;

    constructor(data?: IFindSangkatCommuneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.cityProvinceName = _data["cityProvinceName"];
            this.khanDistrictName = _data["khanDistrictName"];
        }
    }

    static fromJS(data: any): FindSangkatCommuneDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindSangkatCommuneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["cityProvinceName"] = this.cityProvinceName;
        data["khanDistrictName"] = this.khanDistrictName;
        return data;
    }

    clone(): FindSangkatCommuneDto {
        const json = this.toJSON();
        let result = new FindSangkatCommuneDto();
        result.init(json);
        return result;
    }
}

export interface IFindSangkatCommuneDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;
}

export class FindSangkatCommuneDtoPagedResultDto implements IFindSangkatCommuneDtoPagedResultDto {
    items: FindSangkatCommuneDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindSangkatCommuneDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindSangkatCommuneDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindSangkatCommuneDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindSangkatCommuneDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindSangkatCommuneDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindSangkatCommuneDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindSangkatCommuneDtoPagedResultDto {
    items: FindSangkatCommuneDto[] | undefined;
    totalCount: number;
}

export class FindScreenDto implements IFindScreenDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindScreenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindScreenDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindScreenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindScreenDto {
        const json = this.toJSON();
        let result = new FindScreenDto();
        result.init(json);
        return result;
    }
}

export interface IFindScreenDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindScreenDtoPagedResultDto implements IFindScreenDtoPagedResultDto {
    items: FindScreenDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindScreenDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindScreenDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindScreenDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindScreenDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindScreenDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindScreenDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindScreenDtoPagedResultDto {
    items: FindScreenDto[] | undefined;
    totalCount: number;
}

export class FindTaxDto implements IFindTaxDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    rate: number;

    constructor(data?: IFindTaxDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): FindTaxDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindTaxDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["rate"] = this.rate;
        return data;
    }

    clone(): FindTaxDto {
        const json = this.toJSON();
        let result = new FindTaxDto();
        result.init(json);
        return result;
    }
}

export interface IFindTaxDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    rate: number;
}

export class FindTaxDtoPagedResultDto implements IFindTaxDtoPagedResultDto {
    items: FindTaxDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindTaxDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindTaxDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindTaxDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindTaxDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindTaxDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindTaxDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindTaxDtoPagedResultDto {
    items: FindTaxDto[] | undefined;
    totalCount: number;
}

export class FindUnitDto implements IFindUnitDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindUnitDto {
        const json = this.toJSON();
        let result = new FindUnitDto();
        result.init(json);
        return result;
    }
}

export interface IFindUnitDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindUnitDtoPagedResultDto implements IFindUnitDtoPagedResultDto {
    items: FindUnitDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindUnitDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindUnitDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindUnitDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindUnitDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindUnitDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindUnitDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindUnitDtoPagedResultDto {
    items: FindUnitDto[] | undefined;
    totalCount: number;
}

export class FindUsersInput implements IFindUsersInput {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    isActive: boolean | undefined;
    tenantId: number | undefined;

    constructor(data?: IFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.isActive = _data["isActive"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): FindUsersInput {
        data = typeof data === 'object' ? data : {};
        let result = new FindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["isActive"] = this.isActive;
        data["tenantId"] = this.tenantId;
        return data;
    }

    clone(): FindUsersInput {
        const json = this.toJSON();
        let result = new FindUsersInput();
        result.init(json);
        return result;
    }
}

export interface IFindUsersInput {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    isActive: boolean | undefined;
    tenantId: number | undefined;
}

export class FindVGADto implements IFindVGADto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;

    constructor(data?: IFindVGADto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): FindVGADto {
        data = typeof data === 'object' ? data : {};
        let result = new FindVGADto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        return data;
    }

    clone(): FindVGADto {
        const json = this.toJSON();
        let result = new FindVGADto();
        result.init(json);
        return result;
    }
}

export interface IFindVGADto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
}

export class FindVGADtoPagedResultDto implements IFindVGADtoPagedResultDto {
    items: FindVGADto[] | undefined;
    totalCount: number;

    constructor(data?: IFindVGADtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindVGADto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindVGADtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindVGADtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindVGADtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindVGADtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindVGADtoPagedResultDto {
    items: FindVGADto[] | undefined;
    totalCount: number;
}

export class FindVillageDto implements IFindVillageDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneName: string | undefined;

    constructor(data?: IFindVillageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.cityProvinceName = _data["cityProvinceName"];
            this.khanDistrictName = _data["khanDistrictName"];
            this.sangkatCommuneName = _data["sangkatCommuneName"];
        }
    }

    static fromJS(data: any): FindVillageDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindVillageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["cityProvinceName"] = this.cityProvinceName;
        data["khanDistrictName"] = this.khanDistrictName;
        data["sangkatCommuneName"] = this.sangkatCommuneName;
        return data;
    }

    clone(): FindVillageDto {
        const json = this.toJSON();
        let result = new FindVillageDto();
        result.init(json);
        return result;
    }
}

export interface IFindVillageDto {
    id: string;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneName: string | undefined;
}

export class FindVillageDtoPagedResultDto implements IFindVillageDtoPagedResultDto {
    items: FindVillageDto[] | undefined;
    totalCount: number;

    constructor(data?: IFindVillageDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FindVillageDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): FindVillageDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FindVillageDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): FindVillageDtoPagedResultDto {
        const json = this.toJSON();
        let result = new FindVillageDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IFindVillageDtoPagedResultDto {
    items: FindVillageDto[] | undefined;
    totalCount: number;
}

export class FlatFeatureDto implements IFlatFeatureDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    defaultValue: string | undefined;
    inputType: FeatureInputTypeDto;

    constructor(data?: IFlatFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentName = _data["parentName"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.defaultValue = _data["defaultValue"];
            this.inputType = _data["inputType"] ? FeatureInputTypeDto.fromJS(_data["inputType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatFeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        return data;
    }

    clone(): FlatFeatureDto {
        const json = this.toJSON();
        let result = new FlatFeatureDto();
        result.init(json);
        return result;
    }
}

export interface IFlatFeatureDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    defaultValue: string | undefined;
    inputType: FeatureInputTypeDto;
}

export class FlatFeatureDtoListResultDto implements IFlatFeatureDtoListResultDto {
    items: FlatFeatureDto[] | undefined;

    constructor(data?: IFlatFeatureDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FlatFeatureDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatFeatureDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): FlatFeatureDtoListResultDto {
        const json = this.toJSON();
        let result = new FlatFeatureDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IFlatFeatureDtoListResultDto {
    items: FlatFeatureDto[] | undefined;
}

export class GeneralSettingDto implements IGeneralSettingDto {
    countryId: string | undefined;
    countryName: string | undefined;
    defaultTimeZone: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;
    businessStartDate: moment.Moment | undefined;
    roundTotalDigits: number;
    roundCostDigits: number;
    contactAddressLevel: AddressLevel;

    constructor(data?: IGeneralSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.defaultTimeZone = _data["defaultTimeZone"];
            this.currencyId = _data["currencyId"];
            this.currencyCode = _data["currencyCode"];
            this.businessStartDate = _data["businessStartDate"] ? moment(_data["businessStartDate"].toString()) : <any>undefined;
            this.roundTotalDigits = _data["roundTotalDigits"];
            this.roundCostDigits = _data["roundCostDigits"];
            this.contactAddressLevel = _data["contactAddressLevel"];
        }
    }

    static fromJS(data: any): GeneralSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeneralSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["defaultTimeZone"] = this.defaultTimeZone;
        data["currencyId"] = this.currencyId;
        data["currencyCode"] = this.currencyCode;
        data["businessStartDate"] = this.businessStartDate ? this.businessStartDate.toISOString() : <any>undefined;
        data["roundTotalDigits"] = this.roundTotalDigits;
        data["roundCostDigits"] = this.roundCostDigits;
        data["contactAddressLevel"] = this.contactAddressLevel;
        return data;
    }

    clone(): GeneralSettingDto {
        const json = this.toJSON();
        let result = new GeneralSettingDto();
        result.init(json);
        return result;
    }
}

export interface IGeneralSettingDto {
    countryId: string | undefined;
    countryName: string | undefined;
    defaultTimeZone: string | undefined;
    currencyId: number | undefined;
    currencyCode: string | undefined;
    businessStartDate: moment.Moment | undefined;
    roundTotalDigits: number;
    roundCostDigits: number;
    contactAddressLevel: AddressLevel;
}

export class GeneralSettingsEditDto implements IGeneralSettingsEditDto {
    timezone: string | undefined;
    timezoneForComparison: string | undefined;

    constructor(data?: IGeneralSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timezone = _data["timezone"];
            this.timezoneForComparison = _data["timezoneForComparison"];
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data;
    }

    clone(): GeneralSettingsEditDto {
        const json = this.toJSON();
        let result = new GeneralSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IGeneralSettingsEditDto {
    timezone: string | undefined;
    timezoneForComparison: string | undefined;
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    application: ApplicationInfoDto;
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    generalSetting: GeneralSettingDto;
    advanceSetting: AdvanceSettingDto;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.application = _data["application"] ? ApplicationInfoDto.fromJS(_data["application"]) : <any>undefined;
            this.user = _data["user"] ? UserLoginInfoDto.fromJS(_data["user"]) : <any>undefined;
            this.tenant = _data["tenant"] ? TenantLoginInfoDto.fromJS(_data["tenant"]) : <any>undefined;
            this.generalSetting = _data["generalSetting"] ? GeneralSettingDto.fromJS(_data["generalSetting"]) : <any>undefined;
            this.advanceSetting = _data["advanceSetting"] ? AdvanceSettingDto.fromJS(_data["advanceSetting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["generalSetting"] = this.generalSetting ? this.generalSetting.toJSON() : <any>undefined;
        data["advanceSetting"] = this.advanceSetting ? this.advanceSetting.toJSON() : <any>undefined;
        return data;
    }

    clone(): GetCurrentLoginInformationsOutput {
        const json = this.toJSON();
        let result = new GetCurrentLoginInformationsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCurrentLoginInformationsOutput {
    application: ApplicationInfoDto;
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    generalSetting: GeneralSettingDto;
    advanceSetting: AdvanceSettingDto;
}

export class GetEditionEditOutput implements IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;

    constructor(data?: IGetEditionEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.edition = _data["edition"] ? EditionEditDto.fromJS(_data["edition"]) : <any>undefined;
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (Array.isArray(_data["features"])) {
                this.features = [] as any;
                for (let item of _data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetEditionEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data;
    }

    clone(): GetEditionEditOutput {
        const json = this.toJSON();
        let result = new GetEditionEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;
}

export class GetLanguageForEditOutput implements IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[] | undefined;
    flags: ComboboxItemDto[] | undefined;

    constructor(data?: IGetLanguageForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"] ? ApplicationLanguageEditDto.fromJS(_data["language"]) : <any>undefined;
            if (Array.isArray(_data["languageNames"])) {
                this.languageNames = [] as any;
                for (let item of _data["languageNames"])
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
            }
            if (Array.isArray(_data["flags"])) {
                this.flags = [] as any;
                for (let item of _data["flags"])
                    this.flags.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        if (Array.isArray(this.languageNames)) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJSON());
        }
        if (Array.isArray(this.flags)) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJSON());
        }
        return data;
    }

    clone(): GetLanguageForEditOutput {
        const json = this.toJSON();
        let result = new GetLanguageForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[] | undefined;
    flags: ComboboxItemDto[] | undefined;
}

export class GetPasswordComplexitySettingOutput implements IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;

    constructor(data?: IGetPasswordComplexitySettingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.setting = _data["setting"] ? PasswordComplexitySetting.fromJS(_data["setting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetPasswordComplexitySettingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setting"] = this.setting ? this.setting.toJSON() : <any>undefined;
        return data;
    }

    clone(): GetPasswordComplexitySettingOutput {
        const json = this.toJSON();
        let result = new GetPasswordComplexitySettingOutput();
        result.init(json);
        return result;
    }
}

export interface IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: PermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"] ? RoleEditDto.fromJS(_data["role"]) : <any>undefined;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions.push(PermissionDto.fromJS(item));
            }
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data;
    }

    clone(): GetRoleForEditOutput {
        const json = this.toJSON();
        let result = new GetRoleForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: PermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;
}

export class GetTenantFeaturesEditOutput implements IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;

    constructor(data?: IGetTenantFeaturesEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (Array.isArray(_data["features"])) {
                this.features = [] as any;
                for (let item of _data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data;
    }

    clone(): GetTenantFeaturesEditOutput {
        const json = this.toJSON();
        let result = new GetTenantFeaturesEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;
}

export class GetUserPermissionsForEditOutput implements IGetUserPermissionsForEditOutput {
    permissions: PermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IGetUserPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions.push(PermissionDto.fromJS(item));
            }
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data;
    }

    clone(): GetUserPermissionsForEditOutput {
        const json = this.toJSON();
        let result = new GetUserPermissionsForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetUserPermissionsForEditOutput {
    permissions: PermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;
}

export class GuidEntityDto implements IGuidEntityDto {
    id: string;

    constructor(data?: IGuidEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GuidEntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new GuidEntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): GuidEntityDto {
        const json = this.toJSON();
        let result = new GuidEntityDto();
        result.init(json);
        return result;
    }
}

export interface IGuidEntityDto {
    id: string;
}

export class GuidNullableFilterInputDto implements IGuidNullableFilterInputDto {
    exclude: boolean;
    ids: string[] | undefined;

    constructor(data?: IGuidNullableFilterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exclude = _data["exclude"];
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids.push(item);
            }
        }
    }

    static fromJS(data: any): GuidNullableFilterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GuidNullableFilterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exclude"] = this.exclude;
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data;
    }

    clone(): GuidNullableFilterInputDto {
        const json = this.toJSON();
        let result = new GuidNullableFilterInputDto();
        result.init(json);
        return result;
    }
}

export interface IGuidNullableFilterInputDto {
    exclude: boolean;
    ids: string[] | undefined;
}

export class HDDDetailDto implements IHDDDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IHDDDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): HDDDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new HDDDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): HDDDetailDto {
        const json = this.toJSON();
        let result = new HDDDetailDto();
        result.init(json);
        return result;
    }
}

export interface IHDDDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class HDDListDto implements IHDDListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IHDDListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): HDDListDto {
        data = typeof data === 'object' ? data : {};
        let result = new HDDListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): HDDListDto {
        const json = this.toJSON();
        let result = new HDDListDto();
        result.init(json);
        return result;
    }
}

export interface IHDDListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class HDDListDtoPagedResultDto implements IHDDListDtoPagedResultDto {
    items: HDDListDto[] | undefined;
    totalCount: number;

    constructor(data?: IHDDListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(HDDListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): HDDListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new HDDListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): HDDListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new HDDListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IHDDListDtoPagedResultDto {
    items: HDDListDto[] | undefined;
    totalCount: number;
}

export class HostBillingSettingsEditDto implements IHostBillingSettingsEditDto {
    legalName: string | undefined;
    address: string | undefined;

    constructor(data?: IHostBillingSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.legalName = _data["legalName"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): HostBillingSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostBillingSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        return data;
    }

    clone(): HostBillingSettingsEditDto {
        const json = this.toJSON();
        let result = new HostBillingSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IHostBillingSettingsEditDto {
    legalName: string | undefined;
    address: string | undefined;
}

export class HostSettingsEditDto implements IHostSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: HostUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    tenantManagement: TenantManagementSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: HostBillingSettingsEditDto;

    constructor(data?: IHostSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.general = new GeneralSettingsEditDto();
            this.userManagement = new HostUserManagementSettingsEditDto();
            this.email = new EmailSettingsEditDto();
            this.tenantManagement = new TenantManagementSettingsEditDto();
            this.security = new SecuritySettingsEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.general = _data["general"] ? GeneralSettingsEditDto.fromJS(_data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = _data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(_data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = _data["email"] ? EmailSettingsEditDto.fromJS(_data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = _data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(_data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = _data["security"] ? SecuritySettingsEditDto.fromJS(_data["security"]) : new SecuritySettingsEditDto();
            this.billing = _data["billing"] ? HostBillingSettingsEditDto.fromJS(_data["billing"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : <any>undefined;
        return data;
    }

    clone(): HostSettingsEditDto {
        const json = this.toJSON();
        let result = new HostSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IHostSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: HostUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    tenantManagement: TenantManagementSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: HostBillingSettingsEditDto;
}

export class HostUserManagementSettingsEditDto implements IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;

    constructor(data?: IHostUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEmailConfirmationRequiredForLogin = _data["isEmailConfirmationRequiredForLogin"];
            this.smsVerificationEnabled = _data["smsVerificationEnabled"];
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["smsVerificationEnabled"] = this.smsVerificationEnabled;
        return data;
    }

    clone(): HostUserManagementSettingsEditDto {
        const json = this.toJSON();
        let result = new HostUserManagementSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;
}

export class IValueValidator implements IIValueValidator {
    readonly name: string | undefined;
    readonly attributes: { [key: string]: any; } | undefined;

    constructor(data?: IIValueValidator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            if (_data["attributes"]) {
                (<any>this).attributes = {} as any;
                for (let key in _data["attributes"]) {
                    if (_data["attributes"].hasOwnProperty(key))
                        (<any>(<any>this).attributes)[key] = _data["attributes"][key];
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        data = typeof data === 'object' ? data : {};
        let result = new IValueValidator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    (<any>data["attributes"])[key] = (<any>this.attributes)[key];
            }
        }
        return data;
    }

    clone(): IValueValidator {
        const json = this.toJSON();
        let result = new IValueValidator();
        result.init(json);
        return result;
    }
}

export interface IIValueValidator {
    name: string | undefined;
    attributes: { [key: string]: any; } | undefined;
}

export class ImpersonateInput implements IImpersonateInput {
    tenantId: number | undefined;
    userId: number;

    constructor(data?: IImpersonateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateInput {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data;
    }

    clone(): ImpersonateInput {
        const json = this.toJSON();
        let result = new ImpersonateInput();
        result.init(json);
        return result;
    }
}

export interface IImpersonateInput {
    tenantId: number | undefined;
    userId: number;
}

export class ImpersonateOutput implements IImpersonateOutput {
    impersonationToken: string | undefined;
    tenancyName: string | undefined;

    constructor(data?: IImpersonateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.impersonationToken = _data["impersonationToken"];
            this.tenancyName = _data["tenancyName"];
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data;
    }

    clone(): ImpersonateOutput {
        const json = this.toJSON();
        let result = new ImpersonateOutput();
        result.init(json);
        return result;
    }
}

export interface IImpersonateOutput {
    impersonationToken: string | undefined;
    tenancyName: string | undefined;
}

export class ImpersonatedAuthenticateResultModel implements IImpersonatedAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;

    constructor(data?: IImpersonatedAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data;
    }

    clone(): ImpersonatedAuthenticateResultModel {
        const json = this.toJSON();
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IImpersonatedAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
}

export class Int64EntityDto implements IInt64EntityDto {
    id: number;

    constructor(data?: IInt64EntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Int64EntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new Int64EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): Int64EntityDto {
        const json = this.toJSON();
        let result = new Int64EntityDto();
        result.init(json);
        return result;
    }
}

export interface IInt64EntityDto {
    id: number;
}

export class Int64FilterInputDto implements IInt64FilterInputDto {
    exclude: boolean;
    ids: number[] | undefined;

    constructor(data?: IInt64FilterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exclude = _data["exclude"];
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids.push(item);
            }
        }
    }

    static fromJS(data: any): Int64FilterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new Int64FilterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exclude"] = this.exclude;
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data;
    }

    clone(): Int64FilterInputDto {
        const json = this.toJSON();
        let result = new Int64FilterInputDto();
        result.init(json);
        return result;
    }
}

export interface IInt64FilterInputDto {
    exclude: boolean;
    ids: number[] | undefined;
}

export class Int64NullableFilterInputDto implements IInt64NullableFilterInputDto {
    exclude: boolean;
    ids: number[] | undefined;

    constructor(data?: IInt64NullableFilterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exclude = _data["exclude"];
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids.push(item);
            }
        }
    }

    static fromJS(data: any): Int64NullableFilterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new Int64NullableFilterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exclude"] = this.exclude;
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data;
    }

    clone(): Int64NullableFilterInputDto {
        const json = this.toJSON();
        let result = new Int64NullableFilterInputDto();
        result.init(json);
        return result;
    }
}

export interface IInt64NullableFilterInputDto {
    exclude: boolean;
    ids: number[] | undefined;
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    tenancyName: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data;
    }

    clone(): IsTenantAvailableInput {
        const json = this.toJSON();
        let result = new IsTenantAvailableInput();
        result.init(json);
        return result;
    }
}

export interface IIsTenantAvailableInput {
    tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    state: TenantAvailabilityState;
    tenantId: number | undefined;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.state = _data["state"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data;
    }

    clone(): IsTenantAvailableOutput {
        const json = this.toJSON();
        let result = new IsTenantAvailableOutput();
        result.init(json);
        return result;
    }
}

export interface IIsTenantAvailableOutput {
    state: TenantAvailabilityState;
    tenantId: number | undefined;
}

export class ItemBrandDetailDto implements IItemBrandDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemBrandDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemBrandDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemBrandDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemBrandDetailDto {
        const json = this.toJSON();
        let result = new ItemBrandDetailDto();
        result.init(json);
        return result;
    }
}

export interface IItemBrandDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemBrandListDto implements IItemBrandListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemBrandListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemBrandListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemBrandListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemBrandListDto {
        const json = this.toJSON();
        let result = new ItemBrandListDto();
        result.init(json);
        return result;
    }
}

export interface IItemBrandListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemBrandListDtoPagedResultDto implements IItemBrandListDtoPagedResultDto {
    items: ItemBrandListDto[] | undefined;
    totalCount: number;

    constructor(data?: IItemBrandListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ItemBrandListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ItemBrandListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemBrandListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ItemBrandListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ItemBrandListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IItemBrandListDtoPagedResultDto {
    items: ItemBrandListDto[] | undefined;
    totalCount: number;
}

export class ItemFieldSettingDto implements IItemFieldSettingDto {
    tenantId: number;
    useCode: boolean;
    useItemGroup: boolean;
    useBrand: boolean;
    useModel: boolean;
    useSeries: boolean;
    useSize: boolean;
    useGrade: boolean;
    useColorPattern: boolean;
    useCPU: boolean;
    useRAM: boolean;
    useVGA: boolean;
    useCamera: boolean;
    useScreen: boolean;
    useHDD: boolean;
    useBattery: boolean;
    useFieldA: boolean;
    useFieldB: boolean;
    useFieldC: boolean;
    fieldALabel: string | undefined;
    fieldBLabel: string | undefined;
    fieldCLabel: string | undefined;

    constructor(data?: IItemFieldSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.useCode = _data["useCode"];
            this.useItemGroup = _data["useItemGroup"];
            this.useBrand = _data["useBrand"];
            this.useModel = _data["useModel"];
            this.useSeries = _data["useSeries"];
            this.useSize = _data["useSize"];
            this.useGrade = _data["useGrade"];
            this.useColorPattern = _data["useColorPattern"];
            this.useCPU = _data["useCPU"];
            this.useRAM = _data["useRAM"];
            this.useVGA = _data["useVGA"];
            this.useCamera = _data["useCamera"];
            this.useScreen = _data["useScreen"];
            this.useHDD = _data["useHDD"];
            this.useBattery = _data["useBattery"];
            this.useFieldA = _data["useFieldA"];
            this.useFieldB = _data["useFieldB"];
            this.useFieldC = _data["useFieldC"];
            this.fieldALabel = _data["fieldALabel"];
            this.fieldBLabel = _data["fieldBLabel"];
            this.fieldCLabel = _data["fieldCLabel"];
        }
    }

    static fromJS(data: any): ItemFieldSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemFieldSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["useCode"] = this.useCode;
        data["useItemGroup"] = this.useItemGroup;
        data["useBrand"] = this.useBrand;
        data["useModel"] = this.useModel;
        data["useSeries"] = this.useSeries;
        data["useSize"] = this.useSize;
        data["useGrade"] = this.useGrade;
        data["useColorPattern"] = this.useColorPattern;
        data["useCPU"] = this.useCPU;
        data["useRAM"] = this.useRAM;
        data["useVGA"] = this.useVGA;
        data["useCamera"] = this.useCamera;
        data["useScreen"] = this.useScreen;
        data["useHDD"] = this.useHDD;
        data["useBattery"] = this.useBattery;
        data["useFieldA"] = this.useFieldA;
        data["useFieldB"] = this.useFieldB;
        data["useFieldC"] = this.useFieldC;
        data["fieldALabel"] = this.fieldALabel;
        data["fieldBLabel"] = this.fieldBLabel;
        data["fieldCLabel"] = this.fieldCLabel;
        return data;
    }

    clone(): ItemFieldSettingDto {
        const json = this.toJSON();
        let result = new ItemFieldSettingDto();
        result.init(json);
        return result;
    }
}

export interface IItemFieldSettingDto {
    tenantId: number;
    useCode: boolean;
    useItemGroup: boolean;
    useBrand: boolean;
    useModel: boolean;
    useSeries: boolean;
    useSize: boolean;
    useGrade: boolean;
    useColorPattern: boolean;
    useCPU: boolean;
    useRAM: boolean;
    useVGA: boolean;
    useCamera: boolean;
    useScreen: boolean;
    useHDD: boolean;
    useBattery: boolean;
    useFieldA: boolean;
    useFieldB: boolean;
    useFieldC: boolean;
    fieldALabel: string | undefined;
    fieldBLabel: string | undefined;
    fieldCLabel: string | undefined;
}

export class ItemGradeDetailDto implements IItemGradeDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemGradeDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemGradeDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemGradeDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemGradeDetailDto {
        const json = this.toJSON();
        let result = new ItemGradeDetailDto();
        result.init(json);
        return result;
    }
}

export interface IItemGradeDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemGradeListDto implements IItemGradeListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemGradeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemGradeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemGradeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemGradeListDto {
        const json = this.toJSON();
        let result = new ItemGradeListDto();
        result.init(json);
        return result;
    }
}

export interface IItemGradeListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemGradeListDtoPagedResultDto implements IItemGradeListDtoPagedResultDto {
    items: ItemGradeListDto[] | undefined;
    totalCount: number;

    constructor(data?: IItemGradeListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ItemGradeListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ItemGradeListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemGradeListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ItemGradeListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ItemGradeListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IItemGradeListDtoPagedResultDto {
    items: ItemGradeListDto[] | undefined;
    totalCount: number;
}

export class ItemGroupDetailDto implements IItemGroupDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemGroupDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemGroupDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemGroupDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemGroupDetailDto {
        const json = this.toJSON();
        let result = new ItemGroupDetailDto();
        result.init(json);
        return result;
    }
}

export interface IItemGroupDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemGroupListDto implements IItemGroupListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemGroupListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemGroupListDto {
        const json = this.toJSON();
        let result = new ItemGroupListDto();
        result.init(json);
        return result;
    }
}

export interface IItemGroupListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemGroupListDtoPagedResultDto implements IItemGroupListDtoPagedResultDto {
    items: ItemGroupListDto[] | undefined;
    totalCount: number;

    constructor(data?: IItemGroupListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ItemGroupListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ItemGroupListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemGroupListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ItemGroupListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ItemGroupListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IItemGroupListDtoPagedResultDto {
    items: ItemGroupListDto[] | undefined;
    totalCount: number;
}

export class ItemModelDetailDto implements IItemModelDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemModelDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemModelDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemModelDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemModelDetailDto {
        const json = this.toJSON();
        let result = new ItemModelDetailDto();
        result.init(json);
        return result;
    }
}

export interface IItemModelDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemModelListDto implements IItemModelListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemModelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemModelListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemModelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemModelListDto {
        const json = this.toJSON();
        let result = new ItemModelListDto();
        result.init(json);
        return result;
    }
}

export interface IItemModelListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemModelListDtoPagedResultDto implements IItemModelListDtoPagedResultDto {
    items: ItemModelListDto[] | undefined;
    totalCount: number;

    constructor(data?: IItemModelListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ItemModelListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ItemModelListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemModelListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ItemModelListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ItemModelListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IItemModelListDtoPagedResultDto {
    items: ItemModelListDto[] | undefined;
    totalCount: number;
}

export class ItemSeriesDetailDto implements IItemSeriesDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemSeriesDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemSeriesDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemSeriesDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemSeriesDetailDto {
        const json = this.toJSON();
        let result = new ItemSeriesDetailDto();
        result.init(json);
        return result;
    }
}

export interface IItemSeriesDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemSeriesListDto implements IItemSeriesListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemSeriesListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemSeriesListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemSeriesListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemSeriesListDto {
        const json = this.toJSON();
        let result = new ItemSeriesListDto();
        result.init(json);
        return result;
    }
}

export interface IItemSeriesListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemSeriesListDtoPagedResultDto implements IItemSeriesListDtoPagedResultDto {
    items: ItemSeriesListDto[] | undefined;
    totalCount: number;

    constructor(data?: IItemSeriesListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ItemSeriesListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ItemSeriesListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemSeriesListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ItemSeriesListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ItemSeriesListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IItemSeriesListDtoPagedResultDto {
    items: ItemSeriesListDto[] | undefined;
    totalCount: number;
}

export class ItemSizeDetailDto implements IItemSizeDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemSizeDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemSizeDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemSizeDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemSizeDetailDto {
        const json = this.toJSON();
        let result = new ItemSizeDetailDto();
        result.init(json);
        return result;
    }
}

export interface IItemSizeDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemSizeListDto implements IItemSizeListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IItemSizeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ItemSizeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemSizeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ItemSizeListDto {
        const json = this.toJSON();
        let result = new ItemSizeListDto();
        result.init(json);
        return result;
    }
}

export interface IItemSizeListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ItemSizeListDtoPagedResultDto implements IItemSizeListDtoPagedResultDto {
    items: ItemSizeListDto[] | undefined;
    totalCount: number;

    constructor(data?: IItemSizeListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ItemSizeListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ItemSizeListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemSizeListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ItemSizeListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ItemSizeListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IItemSizeListDtoPagedResultDto {
    items: ItemSizeListDto[] | undefined;
    totalCount: number;
}

export enum JournalType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _20 = 20,
    _21 = 21,
}

export class JournalTypeNameValueDto implements IJournalTypeNameValueDto {
    name: string | undefined;
    value: JournalType;

    constructor(data?: IJournalTypeNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): JournalTypeNameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new JournalTypeNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }

    clone(): JournalTypeNameValueDto {
        const json = this.toJSON();
        let result = new JournalTypeNameValueDto();
        result.init(json);
        return result;
    }
}

export interface IJournalTypeNameValueDto {
    name: string | undefined;
    value: JournalType;
}

export class KhanDistrictDetailDto implements IKhanDistrictDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;

    constructor(data?: IKhanDistrictDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.cityProvinceId = _data["cityProvinceId"];
            this.cityProvinceName = _data["cityProvinceName"];
        }
    }

    static fromJS(data: any): KhanDistrictDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new KhanDistrictDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["cityProvinceId"] = this.cityProvinceId;
        data["cityProvinceName"] = this.cityProvinceName;
        return data;
    }

    clone(): KhanDistrictDetailDto {
        const json = this.toJSON();
        let result = new KhanDistrictDetailDto();
        result.init(json);
        return result;
    }
}

export interface IKhanDistrictDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;
}

export class KhanDistrictListDto implements IKhanDistrictListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;

    constructor(data?: IKhanDistrictListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.cityProvinceName = _data["cityProvinceName"];
        }
    }

    static fromJS(data: any): KhanDistrictListDto {
        data = typeof data === 'object' ? data : {};
        let result = new KhanDistrictListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["cityProvinceName"] = this.cityProvinceName;
        return data;
    }

    clone(): KhanDistrictListDto {
        const json = this.toJSON();
        let result = new KhanDistrictListDto();
        result.init(json);
        return result;
    }
}

export interface IKhanDistrictListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
}

export class KhanDistrictListDtoPagedResultDto implements IKhanDistrictListDtoPagedResultDto {
    items: KhanDistrictListDto[] | undefined;
    totalCount: number;

    constructor(data?: IKhanDistrictListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(KhanDistrictListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): KhanDistrictListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new KhanDistrictListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): KhanDistrictListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new KhanDistrictListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IKhanDistrictListDtoPagedResultDto {
    items: KhanDistrictListDto[] | undefined;
    totalCount: number;
}

export class LanguageTextListDto implements ILanguageTextListDto {
    key: string | undefined;
    baseValue: string | undefined;
    targetValue: string | undefined;

    constructor(data?: ILanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.baseValue = _data["baseValue"];
            this.targetValue = _data["targetValue"];
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data;
    }

    clone(): LanguageTextListDto {
        const json = this.toJSON();
        let result = new LanguageTextListDto();
        result.init(json);
        return result;
    }
}

export interface ILanguageTextListDto {
    key: string | undefined;
    baseValue: string | undefined;
    targetValue: string | undefined;
}

export class LanguageTextListDtoPagedResultDto implements ILanguageTextListDtoPagedResultDto {
    items: LanguageTextListDto[] | undefined;
    totalCount: number;

    constructor(data?: ILanguageTextListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(LanguageTextListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): LanguageTextListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageTextListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): LanguageTextListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new LanguageTextListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ILanguageTextListDtoPagedResultDto {
    items: LanguageTextListDto[] | undefined;
    totalCount: number;
}

export class LinkToUserInput implements ILinkToUserInput {
    tenancyName: string | undefined;
    userNameOrEmailAddress: string;
    password: string;

    constructor(data?: ILinkToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LinkToUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new LinkToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        return data;
    }

    clone(): LinkToUserInput {
        const json = this.toJSON();
        let result = new LinkToUserInput();
        result.init(json);
        return result;
    }
}

export interface ILinkToUserInput {
    tenancyName: string | undefined;
    userNameOrEmailAddress: string;
    password: string;
}

export class LinkedUserDto implements ILinkedUserDto {
    id: number;
    tenantId: number | undefined;
    tenancyName: string | undefined;
    userName: string | undefined;
    lastLoginTime: moment.Moment | undefined;

    constructor(data?: ILinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.tenancyName = _data["tenancyName"];
            this.userName = _data["userName"];
            this.lastLoginTime = _data["lastLoginTime"] ? moment(_data["lastLoginTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LinkedUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["userName"] = this.userName;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): LinkedUserDto {
        const json = this.toJSON();
        let result = new LinkedUserDto();
        result.init(json);
        return result;
    }
}

export interface ILinkedUserDto {
    id: number;
    tenantId: number | undefined;
    tenancyName: string | undefined;
    userName: string | undefined;
    lastLoginTime: moment.Moment | undefined;
}

export class LinkedUserDtoListResultDto implements ILinkedUserDtoListResultDto {
    items: LinkedUserDto[] | undefined;

    constructor(data?: ILinkedUserDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LinkedUserDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedUserDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): LinkedUserDtoListResultDto {
        const json = this.toJSON();
        let result = new LinkedUserDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface ILinkedUserDtoListResultDto {
    items: LinkedUserDto[] | undefined;
}

export class LinkedUserDtoPagedResultDto implements ILinkedUserDtoPagedResultDto {
    items: LinkedUserDto[] | undefined;
    totalCount: number;

    constructor(data?: ILinkedUserDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): LinkedUserDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedUserDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): LinkedUserDtoPagedResultDto {
        const json = this.toJSON();
        let result = new LinkedUserDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ILinkedUserDtoPagedResultDto {
    items: LinkedUserDto[] | undefined;
    totalCount: number;
}

export class LocalizableComboboxItemDto implements ILocalizableComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;

    constructor(data?: ILocalizableComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.displayText = _data["displayText"];
        }
    }

    static fromJS(data: any): LocalizableComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data;
    }

    clone(): LocalizableComboboxItemDto {
        const json = this.toJSON();
        let result = new LocalizableComboboxItemDto();
        result.init(json);
        return result;
    }
}

export interface ILocalizableComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
}

export class LocalizableComboboxItemSourceDto implements ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[] | undefined;

    constructor(data?: ILocalizableComboboxItemSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(LocalizableComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocalizableComboboxItemSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): LocalizableComboboxItemSourceDto {
        const json = this.toJSON();
        let result = new LocalizableComboboxItemSourceDto();
        result.init(json);
        return result;
    }
}

export interface ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[] | undefined;
}

export class LocationDetailDto implements ILocationDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    latitude: number | undefined;
    longitude: number | undefined;

    constructor(data?: ILocationDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): LocationDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }

    clone(): LocationDetailDto {
        const json = this.toJSON();
        let result = new LocationDetailDto();
        result.init(json);
        return result;
    }
}

export interface ILocationDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    latitude: number | undefined;
    longitude: number | undefined;
}

export class LocationListDto implements ILocationListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    latitude: number | undefined;
    longitude: number | undefined;

    constructor(data?: ILocationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): LocationListDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }

    clone(): LocationListDto {
        const json = this.toJSON();
        let result = new LocationListDto();
        result.init(json);
        return result;
    }
}

export interface ILocationListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    latitude: number | undefined;
    longitude: number | undefined;
}

export class LocationListDtoPagedResultDto implements ILocationListDtoPagedResultDto {
    items: LocationListDto[] | undefined;
    totalCount: number;

    constructor(data?: ILocationListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(LocationListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): LocationListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): LocationListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new LocationListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ILocationListDtoPagedResultDto {
    items: LocationListDto[] | undefined;
    totalCount: number;
}

export class MoveOrganizationUnitInput implements IMoveOrganizationUnitInput {
    id: number;
    newParentId: number | undefined;

    constructor(data?: IMoveOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.newParentId = _data["newParentId"];
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data;
    }

    clone(): MoveOrganizationUnitInput {
        const json = this.toJSON();
        let result = new MoveOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IMoveOrganizationUnitInput {
    id: number;
    newParentId: number | undefined;
}

export class NameValueDto implements INameValueDto {
    name: string | undefined;
    value: string | undefined;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }

    clone(): NameValueDto {
        const json = this.toJSON();
        let result = new NameValueDto();
        result.init(json);
        return result;
    }
}

export interface INameValueDto {
    name: string | undefined;
    value: string | undefined;
}

export class NameValueDtoListResultDto implements INameValueDtoListResultDto {
    items: NameValueDto[] | undefined;

    constructor(data?: INameValueDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NameValueDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): NameValueDtoListResultDto {
        const json = this.toJSON();
        let result = new NameValueDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface INameValueDtoListResultDto {
    items: NameValueDto[] | undefined;
}

export class NameValueDtoPagedResultDto implements INameValueDtoPagedResultDto {
    items: NameValueDto[] | undefined;
    totalCount: number;

    constructor(data?: INameValueDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): NameValueDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): NameValueDtoPagedResultDto {
        const json = this.toJSON();
        let result = new NameValueDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface INameValueDtoPagedResultDto {
    items: NameValueDto[] | undefined;
    totalCount: number;
}

export class OrganizationUnitDto implements IOrganizationUnitDto {
    id: number;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    parentId: number | undefined;
    code: string | undefined;
    displayName: string | undefined;
    memberCount: number;

    constructor(data?: IOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.parentId = _data["parentId"];
            this.code = _data["code"];
            this.displayName = _data["displayName"];
            this.memberCount = _data["memberCount"];
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        return data;
    }

    clone(): OrganizationUnitDto {
        const json = this.toJSON();
        let result = new OrganizationUnitDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitDto {
    id: number;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    parentId: number | undefined;
    code: string | undefined;
    displayName: string | undefined;
    memberCount: number;
}

export class OrganizationUnitDtoListResultDto implements IOrganizationUnitDtoListResultDto {
    items: OrganizationUnitDto[] | undefined;

    constructor(data?: IOrganizationUnitDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrganizationUnitDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): OrganizationUnitDtoListResultDto {
        const json = this.toJSON();
        let result = new OrganizationUnitDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitDtoListResultDto {
    items: OrganizationUnitDto[] | undefined;
}

export class OrganizationUnitUserListDto implements IOrganizationUnitUserListDto {
    id: number;
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    profilePictureId: string | undefined;
    addedTime: moment.Moment;

    constructor(data?: IOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.profilePictureId = _data["profilePictureId"];
            this.addedTime = _data["addedTime"] ? moment(_data["addedTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): OrganizationUnitUserListDto {
        const json = this.toJSON();
        let result = new OrganizationUnitUserListDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitUserListDto {
    id: number;
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    profilePictureId: string | undefined;
    addedTime: moment.Moment;
}

export class OrganizationUnitUserListDtoPagedResultDto implements IOrganizationUnitUserListDtoPagedResultDto {
    items: OrganizationUnitUserListDto[] | undefined;
    totalCount: number;

    constructor(data?: IOrganizationUnitUserListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitUserListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): OrganizationUnitUserListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new OrganizationUnitUserListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitUserListDtoPagedResultDto {
    items: OrganizationUnitUserListDto[] | undefined;
    totalCount: number;
}

export class PageBatteryInputDto implements IPageBatteryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageBatteryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageBatteryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageBatteryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageBatteryInputDto {
        const json = this.toJSON();
        let result = new PageBatteryInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageBatteryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageBranchInputDto implements IPageBranchInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageBranchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageBranchInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageBranchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageBranchInputDto {
        const json = this.toJSON();
        let result = new PageBranchInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageBranchInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageCPUInputDto implements IPageCPUInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageCPUInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageCPUInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageCPUInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageCPUInputDto {
        const json = this.toJSON();
        let result = new PageCPUInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageCPUInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageCameraInputDto implements IPageCameraInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageCameraInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageCameraInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageCameraInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageCameraInputDto {
        const json = this.toJSON();
        let result = new PageCameraInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageCameraInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageCityProvinceInputDto implements IPageCityProvinceInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;

    constructor(data?: IPageCityProvinceInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PageCityProvinceInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageCityProvinceInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        return data;
    }

    clone(): PageCityProvinceInputDto {
        const json = this.toJSON();
        let result = new PageCityProvinceInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageCityProvinceInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
}

export class PageColorPatternInputDto implements IPageColorPatternInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageColorPatternInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageColorPatternInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageColorPatternInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageColorPatternInputDto {
        const json = this.toJSON();
        let result = new PageColorPatternInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageColorPatternInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageCountryInputDto implements IPageCountryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    currencies: Int64FilterInputDto;

    constructor(data?: IPageCountryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.currencies = _data["currencies"] ? Int64FilterInputDto.fromJS(_data["currencies"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PageCountryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageCountryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["currencies"] = this.currencies ? this.currencies.toJSON() : <any>undefined;
        return data;
    }

    clone(): PageCountryInputDto {
        const json = this.toJSON();
        let result = new PageCountryInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageCountryInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    currencies: Int64FilterInputDto;
}

export class PageCurrencyInputDto implements IPageCurrencyInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageCurrencyInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageCurrencyInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageCurrencyInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageCurrencyInputDto {
        const json = this.toJSON();
        let result = new PageCurrencyInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageCurrencyInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageFieldAInputDto implements IPageFieldAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageFieldAInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageFieldAInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageFieldAInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageFieldAInputDto {
        const json = this.toJSON();
        let result = new PageFieldAInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageFieldAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageFieldBInputDto implements IPageFieldBInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageFieldBInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageFieldBInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageFieldBInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageFieldBInputDto {
        const json = this.toJSON();
        let result = new PageFieldBInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageFieldBInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageFieldCInputDto implements IPageFieldCInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageFieldCInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageFieldCInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageFieldCInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageFieldCInputDto {
        const json = this.toJSON();
        let result = new PageFieldCInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageFieldCInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageHDDInputDto implements IPageHDDInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageHDDInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageHDDInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageHDDInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageHDDInputDto {
        const json = this.toJSON();
        let result = new PageHDDInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageHDDInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageItemBrandInputDto implements IPageItemBrandInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageItemBrandInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageItemBrandInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageItemBrandInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageItemBrandInputDto {
        const json = this.toJSON();
        let result = new PageItemBrandInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageItemBrandInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageItemGradeInputDto implements IPageItemGradeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageItemGradeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageItemGradeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageItemGradeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageItemGradeInputDto {
        const json = this.toJSON();
        let result = new PageItemGradeInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageItemGradeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageItemGroupInputDto implements IPageItemGroupInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageItemGroupInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageItemGroupInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageItemGroupInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageItemGroupInputDto {
        const json = this.toJSON();
        let result = new PageItemGroupInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageItemGroupInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageItemModelInputDto implements IPageItemModelInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageItemModelInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageItemModelInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageItemModelInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageItemModelInputDto {
        const json = this.toJSON();
        let result = new PageItemModelInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageItemModelInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageItemSeriesInputDto implements IPageItemSeriesInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageItemSeriesInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageItemSeriesInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageItemSeriesInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageItemSeriesInputDto {
        const json = this.toJSON();
        let result = new PageItemSeriesInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageItemSeriesInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageItemSizeInputDto implements IPageItemSizeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageItemSizeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageItemSizeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageItemSizeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageItemSizeInputDto {
        const json = this.toJSON();
        let result = new PageItemSizeInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageItemSizeInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageKhanDistrictInputDto implements IPageKhanDistrictInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;

    constructor(data?: IPageKhanDistrictInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
            this.cityProvinces = _data["cityProvinces"] ? GuidNullableFilterInputDto.fromJS(_data["cityProvinces"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PageKhanDistrictInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageKhanDistrictInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        data["cityProvinces"] = this.cityProvinces ? this.cityProvinces.toJSON() : <any>undefined;
        return data;
    }

    clone(): PageKhanDistrictInputDto {
        const json = this.toJSON();
        let result = new PageKhanDistrictInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageKhanDistrictInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
}

export class PageLocationInputDto implements IPageLocationInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageLocationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageLocationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageLocationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageLocationInputDto {
        const json = this.toJSON();
        let result = new PageLocationInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageLocationInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageRAMInputDto implements IPageRAMInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageRAMInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageRAMInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageRAMInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageRAMInputDto {
        const json = this.toJSON();
        let result = new PageRAMInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageRAMInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageSangkatCommuneInputDto implements IPageSangkatCommuneInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;

    constructor(data?: IPageSangkatCommuneInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
            this.cityProvinces = _data["cityProvinces"] ? GuidNullableFilterInputDto.fromJS(_data["cityProvinces"]) : <any>undefined;
            this.khanDistricts = _data["khanDistricts"] ? GuidNullableFilterInputDto.fromJS(_data["khanDistricts"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PageSangkatCommuneInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageSangkatCommuneInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        data["cityProvinces"] = this.cityProvinces ? this.cityProvinces.toJSON() : <any>undefined;
        data["khanDistricts"] = this.khanDistricts ? this.khanDistricts.toJSON() : <any>undefined;
        return data;
    }

    clone(): PageSangkatCommuneInputDto {
        const json = this.toJSON();
        let result = new PageSangkatCommuneInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageSangkatCommuneInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;
}

export class PageScreenInputDto implements IPageScreenInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageScreenInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageScreenInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageScreenInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageScreenInputDto {
        const json = this.toJSON();
        let result = new PageScreenInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageScreenInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageTaxInputDto implements IPageTaxInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageTaxInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageTaxInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageTaxInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageTaxInputDto {
        const json = this.toJSON();
        let result = new PageTaxInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageTaxInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageUnitInputDto implements IPageUnitInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageUnitInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageUnitInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageUnitInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageUnitInputDto {
        const json = this.toJSON();
        let result = new PageUnitInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageUnitInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageVGAInputDto implements IPageVGAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;

    constructor(data?: IPageVGAInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): PageVGAInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageVGAInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): PageVGAInputDto {
        const json = this.toJSON();
        let result = new PageVGAInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageVGAInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
}

export class PageVillageInputDto implements IPageVillageInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;
    sangkatCommunes: GuidNullableFilterInputDto;

    constructor(data?: IPageVillageInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.usePagination = _data["usePagination"];
            this.sortField = _data["sortField"];
            this.sortMode = _data["sortMode"];
            this.keyword = _data["keyword"];
            this.creators = _data["creators"] ? Int64NullableFilterInputDto.fromJS(_data["creators"]) : <any>undefined;
            this.modifiers = _data["modifiers"] ? Int64NullableFilterInputDto.fromJS(_data["modifiers"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.countries = _data["countries"] ? GuidNullableFilterInputDto.fromJS(_data["countries"]) : <any>undefined;
            this.cityProvinces = _data["cityProvinces"] ? GuidNullableFilterInputDto.fromJS(_data["cityProvinces"]) : <any>undefined;
            this.khanDistricts = _data["khanDistricts"] ? GuidNullableFilterInputDto.fromJS(_data["khanDistricts"]) : <any>undefined;
            this.sangkatCommunes = _data["sangkatCommunes"] ? GuidNullableFilterInputDto.fromJS(_data["sangkatCommunes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PageVillageInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageVillageInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["usePagination"] = this.usePagination;
        data["sortField"] = this.sortField;
        data["sortMode"] = this.sortMode;
        data["keyword"] = this.keyword;
        data["creators"] = this.creators ? this.creators.toJSON() : <any>undefined;
        data["modifiers"] = this.modifiers ? this.modifiers.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countries"] = this.countries ? this.countries.toJSON() : <any>undefined;
        data["cityProvinces"] = this.cityProvinces ? this.cityProvinces.toJSON() : <any>undefined;
        data["khanDistricts"] = this.khanDistricts ? this.khanDistricts.toJSON() : <any>undefined;
        data["sangkatCommunes"] = this.sangkatCommunes ? this.sangkatCommunes.toJSON() : <any>undefined;
        return data;
    }

    clone(): PageVillageInputDto {
        const json = this.toJSON();
        let result = new PageVillageInputDto();
        result.init(json);
        return result;
    }
}

export interface IPageVillageInputDto {
    maxResultCount: number;
    skipCount: number;
    usePagination: boolean;
    sortField: string | undefined;
    sortMode: SortMode;
    keyword: string | undefined;
    creators: Int64NullableFilterInputDto;
    modifiers: Int64NullableFilterInputDto;
    isActive: boolean | undefined;
    countries: GuidNullableFilterInputDto;
    cityProvinces: GuidNullableFilterInputDto;
    khanDistricts: GuidNullableFilterInputDto;
    sangkatCommunes: GuidNullableFilterInputDto;
}

export class PagedLanguagesResultDto implements IPagedLanguagesResultDto {
    items: ApplicationLanguageListDto[] | undefined;
    totalCount: number;
    defaultLanguageName: string | undefined;

    constructor(data?: IPagedLanguagesResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ApplicationLanguageListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.defaultLanguageName = _data["defaultLanguageName"];
        }
    }

    static fromJS(data: any): PagedLanguagesResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedLanguagesResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["defaultLanguageName"] = this.defaultLanguageName;
        return data;
    }

    clone(): PagedLanguagesResultDto {
        const json = this.toJSON();
        let result = new PagedLanguagesResultDto();
        result.init(json);
        return result;
    }
}

export interface IPagedLanguagesResultDto {
    items: ApplicationLanguageListDto[] | undefined;
    totalCount: number;
    defaultLanguageName: string | undefined;
}

export class PasswordComplexitySetting implements IPasswordComplexitySetting {
    readonly pattern: string | undefined;
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;

    constructor(data?: IPasswordComplexitySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pattern = _data["pattern"];
            this.requireDigit = _data["requireDigit"];
            this.requireLowercase = _data["requireLowercase"];
            this.requireNonAlphanumeric = _data["requireNonAlphanumeric"];
            this.requireUppercase = _data["requireUppercase"];
            this.requiredLength = _data["requiredLength"];
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pattern"] = this.pattern;
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireUppercase"] = this.requireUppercase;
        data["requiredLength"] = this.requiredLength;
        return data;
    }

    clone(): PasswordComplexitySetting {
        const json = this.toJSON();
        let result = new PasswordComplexitySetting();
        result.init(json);
        return result;
    }
}

export interface IPasswordComplexitySetting {
    pattern: string | undefined;
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;
}

export class PermissionDto implements IPermissionDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    parent: PermissionDto;
    isGrantedByDefault: boolean;

    constructor(data?: IPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.parent = _data["parent"] ? PermissionDto.fromJS(_data["parent"]) : <any>undefined;
            this.isGrantedByDefault = _data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): PermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data;
    }

    clone(): PermissionDto {
        const json = this.toJSON();
        let result = new PermissionDto();
        result.init(json);
        return result;
    }
}

export interface IPermissionDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    parent: PermissionDto;
    isGrantedByDefault: boolean;
}

export class PermissionDtoListResultDto implements IPermissionDtoListResultDto {
    items: PermissionDto[] | undefined;

    constructor(data?: IPermissionDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(PermissionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PermissionDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): PermissionDtoListResultDto {
        const json = this.toJSON();
        let result = new PermissionDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IPermissionDtoListResultDto {
    items: PermissionDto[] | undefined;
}

export class RAMDetailDto implements IRAMDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IRAMDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): RAMDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new RAMDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): RAMDetailDto {
        const json = this.toJSON();
        let result = new RAMDetailDto();
        result.init(json);
        return result;
    }
}

export interface IRAMDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class RAMListDto implements IRAMListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IRAMListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): RAMListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RAMListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): RAMListDto {
        const json = this.toJSON();
        let result = new RAMListDto();
        result.init(json);
        return result;
    }
}

export interface IRAMListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class RAMListDtoPagedResultDto implements IRAMListDtoPagedResultDto {
    items: RAMListDto[] | undefined;
    totalCount: number;

    constructor(data?: IRAMListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(RAMListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): RAMListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RAMListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): RAMListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new RAMListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IRAMListDtoPagedResultDto {
    items: RAMListDto[] | undefined;
    totalCount: number;
}

export class RegisterInput implements IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
            this.captchaResponse = _data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data;
    }

    clone(): RegisterInput {
        const json = this.toJSON();
        let result = new RegisterInput();
        result.init(json);
        return result;
    }
}

export interface IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string | undefined;
}

export class RegisterOutput implements IRegisterOutput {
    canLogin: boolean;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canLogin = _data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data;
    }

    clone(): RegisterOutput {
        const json = this.toJSON();
        let result = new RegisterOutput();
        result.init(json);
        return result;
    }
}

export interface IRegisterOutput {
    canLogin: boolean;
}

export class ResetPasswordDto implements IResetPasswordDto {
    adminPassword: string;
    userId: number;
    newPassword: string;

    constructor(data?: IResetPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.adminPassword = _data["adminPassword"];
            this.userId = _data["userId"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adminPassword"] = this.adminPassword;
        data["userId"] = this.userId;
        data["newPassword"] = this.newPassword;
        return data;
    }

    clone(): ResetPasswordDto {
        const json = this.toJSON();
        let result = new ResetPasswordDto();
        result.init(json);
        return result;
    }
}

export interface IResetPasswordDto {
    adminPassword: string;
    userId: number;
    newPassword: string;
}

export class ResetPasswordInput implements IResetPasswordInput {
    userId: number;
    resetCode: string | undefined;
    password: string | undefined;
    returnUrl: string | undefined;
    singleSignIn: string | undefined;
    c: string | undefined;
    captchaResponse: string | undefined;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.resetCode = _data["resetCode"];
            this.password = _data["password"];
            this.returnUrl = _data["returnUrl"];
            this.singleSignIn = _data["singleSignIn"];
            this.c = _data["c"];
            this.captchaResponse = _data["captchaResponse"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["resetCode"] = this.resetCode;
        data["password"] = this.password;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        data["c"] = this.c;
        data["captchaResponse"] = this.captchaResponse;
        return data;
    }

    clone(): ResetPasswordInput {
        const json = this.toJSON();
        let result = new ResetPasswordInput();
        result.init(json);
        return result;
    }
}

export interface IResetPasswordInput {
    userId: number;
    resetCode: string | undefined;
    password: string | undefined;
    returnUrl: string | undefined;
    singleSignIn: string | undefined;
    c: string | undefined;
    captchaResponse: string | undefined;
}

export class ResetPasswordOutput implements IResetPasswordOutput {
    canLogin: boolean;
    userName: string | undefined;

    constructor(data?: IResetPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canLogin = _data["canLogin"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["userName"] = this.userName;
        return data;
    }

    clone(): ResetPasswordOutput {
        const json = this.toJSON();
        let result = new ResetPasswordOutput();
        result.init(json);
        return result;
    }
}

export interface IResetPasswordOutput {
    canLogin: boolean;
    userName: string | undefined;
}

export class ResolveTenantIdInput implements IResolveTenantIdInput {
    c: string | undefined;

    constructor(data?: IResolveTenantIdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.c = _data["c"];
        }
    }

    static fromJS(data: any): ResolveTenantIdInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResolveTenantIdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["c"] = this.c;
        return data;
    }

    clone(): ResolveTenantIdInput {
        const json = this.toJSON();
        let result = new ResolveTenantIdInput();
        result.init(json);
        return result;
    }
}

export interface IResolveTenantIdInput {
    c: string | undefined;
}

export class RoleDto implements IRoleDto {
    id: number;
    name: string;
    displayName: string;
    normalizedName: string | undefined;
    description: string | undefined;
    grantedPermissions: string[] | undefined;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.normalizedName = _data["normalizedName"];
            this.description = _data["description"];
            if (Array.isArray(_data["grantedPermissions"])) {
                this.grantedPermissions = [] as any;
                for (let item of _data["grantedPermissions"])
                    this.grantedPermissions.push(item);
            }
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["normalizedName"] = this.normalizedName;
        data["description"] = this.description;
        if (Array.isArray(this.grantedPermissions)) {
            data["grantedPermissions"] = [];
            for (let item of this.grantedPermissions)
                data["grantedPermissions"].push(item);
        }
        return data;
    }

    clone(): RoleDto {
        const json = this.toJSON();
        let result = new RoleDto();
        result.init(json);
        return result;
    }
}

export interface IRoleDto {
    id: number;
    name: string;
    displayName: string;
    normalizedName: string | undefined;
    description: string | undefined;
    grantedPermissions: string[] | undefined;
}

export class RoleDtoListResultDto implements IRoleDtoListResultDto {
    items: RoleDto[] | undefined;

    constructor(data?: IRoleDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(RoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): RoleDtoListResultDto {
        const json = this.toJSON();
        let result = new RoleDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IRoleDtoListResultDto {
    items: RoleDto[] | undefined;
}

export class RoleDtoPagedResultDto implements IRoleDtoPagedResultDto {
    items: RoleDto[] | undefined;
    totalCount: number;

    constructor(data?: IRoleDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(RoleDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): RoleDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): RoleDtoPagedResultDto {
        const json = this.toJSON();
        let result = new RoleDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IRoleDtoPagedResultDto {
    items: RoleDto[] | undefined;
    totalCount: number;
}

export class RoleEditDto implements IRoleEditDto {
    id: number;
    name: string;
    displayName: string;
    description: string | undefined;
    isStatic: boolean;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.isStatic = _data["isStatic"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isStatic"] = this.isStatic;
        return data;
    }

    clone(): RoleEditDto {
        const json = this.toJSON();
        let result = new RoleEditDto();
        result.init(json);
        return result;
    }
}

export interface IRoleEditDto {
    id: number;
    name: string;
    displayName: string;
    description: string | undefined;
    isStatic: boolean;
}

export class RoleListDto implements IRoleListDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isStatic = _data["isStatic"];
            this.isDefault = _data["isDefault"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): RoleListDto {
        const json = this.toJSON();
        let result = new RoleListDto();
        result.init(json);
        return result;
    }
}

export interface IRoleListDto {
    id: number;
    name: string | undefined;
    displayName: string | undefined;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
}

export class RoleListDtoListResultDto implements IRoleListDtoListResultDto {
    items: RoleListDto[] | undefined;

    constructor(data?: IRoleListDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleListDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): RoleListDtoListResultDto {
        const json = this.toJSON();
        let result = new RoleListDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IRoleListDtoListResultDto {
    items: RoleListDto[] | undefined;
}

export class SangkatCommuneDetailDto implements ISangkatCommuneDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictId: string | undefined;
    khanDistrictName: string | undefined;

    constructor(data?: ISangkatCommuneDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.cityProvinceId = _data["cityProvinceId"];
            this.cityProvinceName = _data["cityProvinceName"];
            this.khanDistrictId = _data["khanDistrictId"];
            this.khanDistrictName = _data["khanDistrictName"];
        }
    }

    static fromJS(data: any): SangkatCommuneDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new SangkatCommuneDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["cityProvinceId"] = this.cityProvinceId;
        data["cityProvinceName"] = this.cityProvinceName;
        data["khanDistrictId"] = this.khanDistrictId;
        data["khanDistrictName"] = this.khanDistrictName;
        return data;
    }

    clone(): SangkatCommuneDetailDto {
        const json = this.toJSON();
        let result = new SangkatCommuneDetailDto();
        result.init(json);
        return result;
    }
}

export interface ISangkatCommuneDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictId: string | undefined;
    khanDistrictName: string | undefined;
}

export class SangkatCommuneListDto implements ISangkatCommuneListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;

    constructor(data?: ISangkatCommuneListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.cityProvinceName = _data["cityProvinceName"];
            this.khanDistrictName = _data["khanDistrictName"];
        }
    }

    static fromJS(data: any): SangkatCommuneListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SangkatCommuneListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["cityProvinceName"] = this.cityProvinceName;
        data["khanDistrictName"] = this.khanDistrictName;
        return data;
    }

    clone(): SangkatCommuneListDto {
        const json = this.toJSON();
        let result = new SangkatCommuneListDto();
        result.init(json);
        return result;
    }
}

export interface ISangkatCommuneListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;
}

export class SangkatCommuneListDtoPagedResultDto implements ISangkatCommuneListDtoPagedResultDto {
    items: SangkatCommuneListDto[] | undefined;
    totalCount: number;

    constructor(data?: ISangkatCommuneListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(SangkatCommuneListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): SangkatCommuneListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new SangkatCommuneListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): SangkatCommuneListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new SangkatCommuneListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ISangkatCommuneListDtoPagedResultDto {
    items: SangkatCommuneListDto[] | undefined;
    totalCount: number;
}

export class ScreenDetailDto implements IScreenDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IScreenDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ScreenDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScreenDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ScreenDetailDto {
        const json = this.toJSON();
        let result = new ScreenDetailDto();
        result.init(json);
        return result;
    }
}

export interface IScreenDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ScreenListDto implements IScreenListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IScreenListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ScreenListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScreenListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): ScreenListDto {
        const json = this.toJSON();
        let result = new ScreenListDto();
        result.init(json);
        return result;
    }
}

export interface IScreenListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class ScreenListDtoPagedResultDto implements IScreenListDtoPagedResultDto {
    items: ScreenListDto[] | undefined;
    totalCount: number;

    constructor(data?: IScreenListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ScreenListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ScreenListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScreenListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): ScreenListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new ScreenListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IScreenListDtoPagedResultDto {
    items: ScreenListDto[] | undefined;
    totalCount: number;
}

export class SecuritySettingsEditDto implements ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;

    constructor(data?: ISecuritySettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.useDefaultPasswordComplexitySettings = _data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = _data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(_data["passwordComplexity"]) : <any>undefined;
            this.defaultPasswordComplexity = _data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(_data["defaultPasswordComplexity"]) : <any>undefined;
            this.userLockOut = _data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(_data["userLockOut"]) : <any>undefined;
            this.twoFactorLogin = _data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(_data["twoFactorLogin"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : <any>undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : <any>undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : <any>undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : <any>undefined;
        return data;
    }

    clone(): SecuritySettingsEditDto {
        const json = this.toJSON();
        let result = new SecuritySettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
}

export class SendPasswordResetCodeInput implements ISendPasswordResetCodeInput {
    emailAddress: string;
    captchaResponse: string | undefined;

    constructor(data?: ISendPasswordResetCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.captchaResponse = _data["captchaResponse"];
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["captchaResponse"] = this.captchaResponse;
        return data;
    }

    clone(): SendPasswordResetCodeInput {
        const json = this.toJSON();
        let result = new SendPasswordResetCodeInput();
        result.init(json);
        return result;
    }
}

export interface ISendPasswordResetCodeInput {
    emailAddress: string;
    captchaResponse: string | undefined;
}

export class SendTestEmailInput implements ISendTestEmailInput {
    emailAddress: string;
    companyName: string | undefined;

    constructor(data?: ISendTestEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.companyName = _data["companyName"];
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendTestEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["companyName"] = this.companyName;
        return data;
    }

    clone(): SendTestEmailInput {
        const json = this.toJSON();
        let result = new SendTestEmailInput();
        result.init(json);
        return result;
    }
}

export interface ISendTestEmailInput {
    emailAddress: string;
    companyName: string | undefined;
}

export class SetDefaultLanguageInput implements ISetDefaultLanguageInput {
    name: string;

    constructor(data?: ISetDefaultLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        data = typeof data === 'object' ? data : {};
        let result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }

    clone(): SetDefaultLanguageInput {
        const json = this.toJSON();
        let result = new SetDefaultLanguageInput();
        result.init(json);
        return result;
    }
}

export interface ISetDefaultLanguageInput {
    name: string;
}

export enum SettingScopes {
    _1 = 1,
    _2 = 2,
    _4 = 4,
    _7 = 7,
}

export enum SortMode {
    _1 = 1,
    __1 = -1,
}

export class StringPagedResultDto implements IStringPagedResultDto {
    items: string[] | undefined;
    totalCount: number;

    constructor(data?: IStringPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(item);
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): StringPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StringPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item);
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): StringPagedResultDto {
        const json = this.toJSON();
        let result = new StringPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IStringPagedResultDto {
    items: string[] | undefined;
    totalCount: number;
}

export enum SubAccountType {
    _1000 = 1000,
    _1001 = 1001,
    _1002 = 1002,
    _1003 = 1003,
    _1004 = 1004,
    _1100 = 1100,
    _1101 = 1101,
    _1200 = 1200,
    _1300 = 1300,
    _1400 = 1400,
    _1401 = 1401,
    _1402 = 1402,
    _1403 = 1403,
    _1404 = 1404,
    _1405 = 1405,
    _1406 = 1406,
    _1407 = 1407,
    _1408 = 1408,
    _1409 = 1409,
    _1410 = 1410,
    _1411 = 1411,
    _1500 = 1500,
    _1501 = 1501,
    _1502 = 1502,
    _1503 = 1503,
    _1504 = 1504,
    _1505 = 1505,
    _1506 = 1506,
    _1507 = 1507,
    _1508 = 1508,
    _1509 = 1509,
    _1600 = 1600,
    _1601 = 1601,
    _1602 = 1602,
    _1603 = 1603,
    _1604 = 1604,
    _1605 = 1605,
    _1606 = 1606,
    _1607 = 1607,
    _1608 = 1608,
    _1609 = 1609,
    _1610 = 1610,
    _2000 = 2000,
    _2100 = 2100,
    _2200 = 2200,
    _2201 = 2201,
    _2202 = 2202,
    _2203 = 2203,
    _2204 = 2204,
    _2205 = 2205,
    _2206 = 2206,
    _2207 = 2207,
    _2208 = 2208,
    _2209 = 2209,
    _2210 = 2210,
    _2211 = 2211,
    _2212 = 2212,
    _2213 = 2213,
    _2214 = 2214,
    _2300 = 2300,
    _2301 = 2301,
    _2302 = 2302,
    _2303 = 2303,
    _2304 = 2304,
    _2305 = 2305,
    _2306 = 2306,
    _3000 = 3000,
    _3001 = 3001,
    _3002 = 3002,
    _3003 = 3003,
    _3004 = 3004,
    _3005 = 3005,
    _3006 = 3006,
    _3007 = 3007,
    _3008 = 3008,
    _3009 = 3009,
    _3010 = 3010,
    _3011 = 3011,
    _3012 = 3012,
    _3013 = 3013,
    _3014 = 3014,
    _4000 = 4000,
    _4001 = 4001,
    _4002 = 4002,
    _4003 = 4003,
    _4004 = 4004,
    _4005 = 4005,
    _4006 = 4006,
    _4007 = 4007,
    _4008 = 4008,
    _4100 = 4100,
    _4101 = 4101,
    _4102 = 4102,
    _4103 = 4103,
    _4104 = 4104,
    _4105 = 4105,
    _4106 = 4106,
    _4107 = 4107,
    _5000 = 5000,
    _5001 = 5001,
    _5002 = 5002,
    _5003 = 5003,
    _5004 = 5004,
    _5100 = 5100,
    _5101 = 5101,
    _5102 = 5102,
    _5103 = 5103,
    _5104 = 5104,
    _5105 = 5105,
    _5106 = 5106,
    _5107 = 5107,
    _5108 = 5108,
    _5109 = 5109,
    _5110 = 5110,
    _5111 = 5111,
    _5112 = 5112,
    _5113 = 5113,
    _5114 = 5114,
    _5115 = 5115,
    _5116 = 5116,
    _5117 = 5117,
    _5118 = 5118,
    _5119 = 5119,
    _5120 = 5120,
    _5121 = 5121,
    _5122 = 5122,
    _5123 = 5123,
    _5124 = 5124,
    _5125 = 5125,
    _5126 = 5126,
    _5127 = 5127,
    _5128 = 5128,
    _5129 = 5129,
    _5130 = 5130,
    _5200 = 5200,
    _5201 = 5201,
    _5202 = 5202,
    _5203 = 5203,
    _5204 = 5204,
}

export class SubAccountTypeFilterInputDto implements ISubAccountTypeFilterInputDto {
    exclude: boolean;
    ids: SubAccountType[] | undefined;

    constructor(data?: ISubAccountTypeFilterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exclude = _data["exclude"];
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids.push(item);
            }
        }
    }

    static fromJS(data: any): SubAccountTypeFilterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubAccountTypeFilterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exclude"] = this.exclude;
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data;
    }

    clone(): SubAccountTypeFilterInputDto {
        const json = this.toJSON();
        let result = new SubAccountTypeFilterInputDto();
        result.init(json);
        return result;
    }
}

export interface ISubAccountTypeFilterInputDto {
    exclude: boolean;
    ids: SubAccountType[] | undefined;
}

export class SubAccountTypeNameValueDto implements ISubAccountTypeNameValueDto {
    name: string | undefined;
    value: SubAccountType;

    constructor(data?: ISubAccountTypeNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SubAccountTypeNameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubAccountTypeNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }

    clone(): SubAccountTypeNameValueDto {
        const json = this.toJSON();
        let result = new SubAccountTypeNameValueDto();
        result.init(json);
        return result;
    }
}

export interface ISubAccountTypeNameValueDto {
    name: string | undefined;
    value: SubAccountType;
}

export class SubAccountTypeNameValueDtoListResultDto implements ISubAccountTypeNameValueDtoListResultDto {
    items: SubAccountTypeNameValueDto[] | undefined;

    constructor(data?: ISubAccountTypeNameValueDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(SubAccountTypeNameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubAccountTypeNameValueDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubAccountTypeNameValueDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): SubAccountTypeNameValueDtoListResultDto {
        const json = this.toJSON();
        let result = new SubAccountTypeNameValueDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface ISubAccountTypeNameValueDtoListResultDto {
    items: SubAccountTypeNameValueDto[] | undefined;
}

export class SwitchToLinkedAccountInput implements ISwitchToLinkedAccountInput {
    targetTenantId: number | undefined;
    targetUserId: number;

    constructor(data?: ISwitchToLinkedAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.targetTenantId = _data["targetTenantId"];
            this.targetUserId = _data["targetUserId"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data;
    }

    clone(): SwitchToLinkedAccountInput {
        const json = this.toJSON();
        let result = new SwitchToLinkedAccountInput();
        result.init(json);
        return result;
    }
}

export interface ISwitchToLinkedAccountInput {
    targetTenantId: number | undefined;
    targetUserId: number;
}

export class SwitchToLinkedAccountOutput implements ISwitchToLinkedAccountOutput {
    switchAccountToken: string | undefined;
    tenancyName: string | undefined;

    constructor(data?: ISwitchToLinkedAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.switchAccountToken = _data["switchAccountToken"];
            this.tenancyName = _data["tenancyName"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data;
    }

    clone(): SwitchToLinkedAccountOutput {
        const json = this.toJSON();
        let result = new SwitchToLinkedAccountOutput();
        result.init(json);
        return result;
    }
}

export interface ISwitchToLinkedAccountOutput {
    switchAccountToken: string | undefined;
    tenancyName: string | undefined;
}

export class SwitchedAccountAuthenticateResultModel implements ISwitchedAccountAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;

    constructor(data?: ISwitchedAccountAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data;
    }

    clone(): SwitchedAccountAuthenticateResultModel {
        const json = this.toJSON();
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface ISwitchedAccountAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
}

export class TaxDetailDto implements ITaxDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    isDefault: boolean;
    no: number;
    rate: number;
    purchaseAccountId: string | undefined;
    purchaseAccountName: string | undefined;
    saleAccountId: string | undefined;
    saleAccountName: string | undefined;

    constructor(data?: ITaxDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.rate = _data["rate"];
            this.purchaseAccountId = _data["purchaseAccountId"];
            this.purchaseAccountName = _data["purchaseAccountName"];
            this.saleAccountId = _data["saleAccountId"];
            this.saleAccountName = _data["saleAccountName"];
        }
    }

    static fromJS(data: any): TaxDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaxDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["rate"] = this.rate;
        data["purchaseAccountId"] = this.purchaseAccountId;
        data["purchaseAccountName"] = this.purchaseAccountName;
        data["saleAccountId"] = this.saleAccountId;
        data["saleAccountName"] = this.saleAccountName;
        return data;
    }

    clone(): TaxDetailDto {
        const json = this.toJSON();
        let result = new TaxDetailDto();
        result.init(json);
        return result;
    }
}

export interface ITaxDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    isDefault: boolean;
    no: number;
    rate: number;
    purchaseAccountId: string | undefined;
    purchaseAccountName: string | undefined;
    saleAccountId: string | undefined;
    saleAccountName: string | undefined;
}

export class TaxListDto implements ITaxListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    isDefault: boolean;
    no: number;
    rate: number;
    purchaseAccountName: string | undefined;
    saleAccountName: string | undefined;

    constructor(data?: ITaxListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.rate = _data["rate"];
            this.purchaseAccountName = _data["purchaseAccountName"];
            this.saleAccountName = _data["saleAccountName"];
        }
    }

    static fromJS(data: any): TaxListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaxListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["rate"] = this.rate;
        data["purchaseAccountName"] = this.purchaseAccountName;
        data["saleAccountName"] = this.saleAccountName;
        return data;
    }

    clone(): TaxListDto {
        const json = this.toJSON();
        let result = new TaxListDto();
        result.init(json);
        return result;
    }
}

export interface ITaxListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    isDefault: boolean;
    no: number;
    rate: number;
    purchaseAccountName: string | undefined;
    saleAccountName: string | undefined;
}

export class TaxListDtoPagedResultDto implements ITaxListDtoPagedResultDto {
    items: TaxListDto[] | undefined;
    totalCount: number;

    constructor(data?: ITaxListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(TaxListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): TaxListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaxListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): TaxListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new TaxListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ITaxListDtoPagedResultDto {
    items: TaxListDto[] | undefined;
    totalCount: number;
}

export enum TenantAvailabilityState {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class TenantDto implements ITenantDto {
    id: number;
    tenancyName: string;
    name: string;
    isActive: boolean;
    editionId: number | undefined;
    editionName: string | undefined;

    constructor(data?: ITenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
            this.isActive = _data["isActive"];
            this.editionId = _data["editionId"];
            this.editionName = _data["editionName"];
        }
    }

    static fromJS(data: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["isActive"] = this.isActive;
        data["editionId"] = this.editionId;
        data["editionName"] = this.editionName;
        return data;
    }

    clone(): TenantDto {
        const json = this.toJSON();
        let result = new TenantDto();
        result.init(json);
        return result;
    }
}

export interface ITenantDto {
    id: number;
    tenancyName: string;
    name: string;
    isActive: boolean;
    editionId: number | undefined;
    editionName: string | undefined;
}

export class TenantDtoPagedResultDto implements ITenantDtoPagedResultDto {
    items: TenantDto[] | undefined;
    totalCount: number;

    constructor(data?: ITenantDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(TenantDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): TenantDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): TenantDtoPagedResultDto {
        const json = this.toJSON();
        let result = new TenantDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface ITenantDtoPagedResultDto {
    items: TenantDto[] | undefined;
    totalCount: number;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    id: number;
    tenancyName: string | undefined;
    name: string | undefined;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        return data;
    }

    clone(): TenantLoginInfoDto {
        const json = this.toJSON();
        let result = new TenantLoginInfoDto();
        result.init(json);
        return result;
    }
}

export interface ITenantLoginInfoDto {
    id: number;
    tenancyName: string | undefined;
    name: string | undefined;
}

export class TenantManagementSettingsEditDto implements ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number | undefined;
    defaultEditionName: string | undefined;

    constructor(data?: ITenantManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.allowSelfRegistration = _data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = _data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnRegistration = _data["useCaptchaOnRegistration"];
            this.defaultEditionId = _data["defaultEditionId"];
            this.defaultEditionName = _data["defaultEditionName"];
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        data["defaultEditionId"] = this.defaultEditionId;
        data["defaultEditionName"] = this.defaultEditionName;
        return data;
    }

    clone(): TenantManagementSettingsEditDto {
        const json = this.toJSON();
        let result = new TenantManagementSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number | undefined;
    defaultEditionName: string | undefined;
}

export class TestModelOutput implements ITestModelOutput {
    id: string;
    date: moment.Moment;
    dateIndex: moment.Moment;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    creatorUserId: number | undefined;
    creationTime: moment.Moment;
    rowNumber: number;
    totalRecords: number;

    constructor(data?: ITestModelOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>undefined;
            this.dateIndex = _data["dateIndex"] ? moment(_data["dateIndex"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.rowNumber = _data["rowNumber"];
            this.totalRecords = _data["totalRecords"];
        }
    }

    static fromJS(data: any): TestModelOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TestModelOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dateIndex"] = this.dateIndex ? this.dateIndex.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["rowNumber"] = this.rowNumber;
        data["totalRecords"] = this.totalRecords;
        return data;
    }

    clone(): TestModelOutput {
        const json = this.toJSON();
        let result = new TestModelOutput();
        result.init(json);
        return result;
    }
}

export interface ITestModelOutput {
    id: string;
    date: moment.Moment;
    dateIndex: moment.Moment;
    name: string | undefined;
    displayName: string | undefined;
    isActive: boolean;
    creatorUserId: number | undefined;
    creationTime: moment.Moment;
    rowNumber: number;
    totalRecords: number;
}

export class TransactionNoSettingDto implements ITransactionNoSettingDto {
    id: string | undefined;
    journalType: JournalType;
    journalTypeName: string | undefined;
    customTransactionNoEnable: boolean;
    prefix: string | undefined;
    digits: number;
    start: number;
    requiredReference: boolean;

    constructor(data?: ITransactionNoSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.journalType = _data["journalType"];
            this.journalTypeName = _data["journalTypeName"];
            this.customTransactionNoEnable = _data["customTransactionNoEnable"];
            this.prefix = _data["prefix"];
            this.digits = _data["digits"];
            this.start = _data["start"];
            this.requiredReference = _data["requiredReference"];
        }
    }

    static fromJS(data: any): TransactionNoSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionNoSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["journalType"] = this.journalType;
        data["journalTypeName"] = this.journalTypeName;
        data["customTransactionNoEnable"] = this.customTransactionNoEnable;
        data["prefix"] = this.prefix;
        data["digits"] = this.digits;
        data["start"] = this.start;
        data["requiredReference"] = this.requiredReference;
        return data;
    }

    clone(): TransactionNoSettingDto {
        const json = this.toJSON();
        let result = new TransactionNoSettingDto();
        result.init(json);
        return result;
    }
}

export interface ITransactionNoSettingDto {
    id: string | undefined;
    journalType: JournalType;
    journalTypeName: string | undefined;
    customTransactionNoEnable: boolean;
    prefix: string | undefined;
    digits: number;
    start: number;
    requiredReference: boolean;
}

export class TwoFactorLoginSettingsEditDto implements ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ITwoFactorLoginSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEnabledForApplication = _data["isEnabledForApplication"];
            this.isEnabled = _data["isEnabled"];
            this.isEmailProviderEnabled = _data["isEmailProviderEnabled"];
            this.isSmsProviderEnabled = _data["isSmsProviderEnabled"];
            this.isRememberBrowserEnabled = _data["isRememberBrowserEnabled"];
            this.isGoogleAuthenticatorEnabled = _data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabledForApplication"] = this.isEnabledForApplication;
        data["isEnabled"] = this.isEnabled;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data;
    }

    clone(): TwoFactorLoginSettingsEditDto {
        const json = this.toJSON();
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;
}

export class UnitDetailDto implements IUnitDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IUnitDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UnitDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new UnitDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): UnitDetailDto {
        const json = this.toJSON();
        let result = new UnitDetailDto();
        result.init(json);
        return result;
    }
}

export interface IUnitDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class UnitListDto implements IUnitListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IUnitListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UnitListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UnitListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): UnitListDto {
        const json = this.toJSON();
        let result = new UnitListDto();
        result.init(json);
        return result;
    }
}

export interface IUnitListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class UnitListDtoPagedResultDto implements IUnitListDtoPagedResultDto {
    items: UnitListDto[] | undefined;
    totalCount: number;

    constructor(data?: IUnitListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(UnitListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): UnitListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UnitListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): UnitListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new UnitListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IUnitListDtoPagedResultDto {
    items: UnitListDto[] | undefined;
    totalCount: number;
}

export class UnlinkUserInput implements IUnlinkUserInput {
    tenantId: number | undefined;
    userId: number;

    constructor(data?: IUnlinkUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new UnlinkUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data;
    }

    clone(): UnlinkUserInput {
        const json = this.toJSON();
        let result = new UnlinkUserInput();
        result.init(json);
        return result;
    }
}

export interface IUnlinkUserInput {
    tenantId: number | undefined;
    userId: number;
}

export class UpdateGoogleAuthenticatorKeyOutput implements IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string | undefined;

    constructor(data?: IUpdateGoogleAuthenticatorKeyOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.qrCodeSetupImageUrl = _data["qrCodeSetupImageUrl"];
        }
    }

    static fromJS(data: any): UpdateGoogleAuthenticatorKeyOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGoogleAuthenticatorKeyOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        return data;
    }

    clone(): UpdateGoogleAuthenticatorKeyOutput {
        const json = this.toJSON();
        let result = new UpdateGoogleAuthenticatorKeyOutput();
        result.init(json);
        return result;
    }
}

export interface IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string | undefined;
}

export class UpdateLanguageTextInput implements IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;

    constructor(data?: IUpdateLanguageTextInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageName = _data["languageName"];
            this.sourceName = _data["sourceName"];
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }

    clone(): UpdateLanguageTextInput {
        const json = this.toJSON();
        let result = new UpdateLanguageTextInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;
}

export class UpdateLogoInput implements IUpdateLogoInput {
    logoId: string;

    constructor(data?: IUpdateLogoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.logoId = _data["logoId"];
        }
    }

    static fromJS(data: any): UpdateLogoInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLogoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logoId"] = this.logoId;
        return data;
    }

    clone(): UpdateLogoInput {
        const json = this.toJSON();
        let result = new UpdateLogoInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateLogoInput {
    logoId: string;
}

export class UpdateOrganizationUnitInput implements IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;

    constructor(data?: IUpdateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data;
    }

    clone(): UpdateOrganizationUnitInput {
        const json = this.toJSON();
        let result = new UpdateOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;
}

export class UpdateTenantFeaturesInput implements IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[];

    constructor(data?: IUpdateTenantFeaturesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.featureValues = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data;
    }

    clone(): UpdateTenantFeaturesInput {
        const json = this.toJSON();
        let result = new UpdateTenantFeaturesInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[];
}

export class UpdateUserPermissionsInput implements IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[];

    constructor(data?: IUpdateUserPermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.grantedPermissionNames = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data;
    }

    clone(): UpdateUserPermissionsInput {
        const json = this.toJSON();
        let result = new UpdateUserPermissionsInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[];
}

export class UserDto implements IUserDto {
    id: number;
    userName: string;
    name: string;
    surname: string;
    emailAddress: string;
    isActive: boolean;
    isDeactivate: boolean;
    fullName: string | undefined;
    lastLoginTime: moment.Moment | undefined;
    creationTime: moment.Moment;
    roleNames: string[] | undefined;
    useEmail: boolean;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.emailAddress = _data["emailAddress"];
            this.isActive = _data["isActive"];
            this.isDeactivate = _data["isDeactivate"];
            this.fullName = _data["fullName"];
            this.lastLoginTime = _data["lastLoginTime"] ? moment(_data["lastLoginTime"].toString()) : <any>undefined;
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of _data["roleNames"])
                    this.roleNames.push(item);
            }
            this.useEmail = _data["useEmail"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["emailAddress"] = this.emailAddress;
        data["isActive"] = this.isActive;
        data["isDeactivate"] = this.isDeactivate;
        data["fullName"] = this.fullName;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["useEmail"] = this.useEmail;
        return data;
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto {
    id: number;
    userName: string;
    name: string;
    surname: string;
    emailAddress: string;
    isActive: boolean;
    isDeactivate: boolean;
    fullName: string | undefined;
    lastLoginTime: moment.Moment | undefined;
    creationTime: moment.Moment;
    roleNames: string[] | undefined;
    useEmail: boolean;
}

export class UserDtoPagedResultDto implements IUserDtoPagedResultDto {
    items: UserDto[] | undefined;
    totalCount: number;

    constructor(data?: IUserDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(UserDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): UserDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): UserDtoPagedResultDto {
        const json = this.toJSON();
        let result = new UserDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoPagedResultDto {
    items: UserDto[] | undefined;
    totalCount: number;
}

export class UserLockOutSettingsEditDto implements IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;

    constructor(data?: IUserLockOutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEnabled = _data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = _data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = _data["defaultAccountLockoutSeconds"];
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data;
    }

    clone(): UserLockOutSettingsEditDto {
        const json = this.toJSON();
        let result = new UserLockOutSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;
}

export class UserLoginAttemptDto implements IUserLoginAttemptDto {
    tenancyName: string | undefined;
    userNameOrEmailAddress: string | undefined;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    result: string | undefined;
    creationTime: moment.Moment;

    constructor(data?: IUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
            this.clientIpAddress = _data["clientIpAddress"];
            this.clientName = _data["clientName"];
            this.browserInfo = _data["browserInfo"];
            this.result = _data["result"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): UserLoginAttemptDto {
        const json = this.toJSON();
        let result = new UserLoginAttemptDto();
        result.init(json);
        return result;
    }
}

export interface IUserLoginAttemptDto {
    tenancyName: string | undefined;
    userNameOrEmailAddress: string | undefined;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    result: string | undefined;
    creationTime: moment.Moment;
}

export class UserLoginAttemptDtoListResultDto implements IUserLoginAttemptDtoListResultDto {
    items: UserLoginAttemptDto[] | undefined;

    constructor(data?: IUserLoginAttemptDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserLoginAttemptDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginAttemptDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): UserLoginAttemptDtoListResultDto {
        const json = this.toJSON();
        let result = new UserLoginAttemptDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IUserLoginAttemptDtoListResultDto {
    items: UserLoginAttemptDto[] | undefined;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    id: number;
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    profilePictureId: string | undefined;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.profilePictureId = _data["profilePictureId"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        return data;
    }

    clone(): UserLoginInfoDto {
        const json = this.toJSON();
        let result = new UserLoginInfoDto();
        result.init(json);
        return result;
    }
}

export interface IUserLoginInfoDto {
    id: number;
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    profilePictureId: string | undefined;
}

export class UserSummaryDto implements IUserSummaryDto {
    id: number;
    userName: string | undefined;
    useEmail: boolean;
    emailAddress: string | undefined;
    fullName: string | undefined;

    constructor(data?: IUserSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.useEmail = _data["useEmail"];
            this.emailAddress = _data["emailAddress"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): UserSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["useEmail"] = this.useEmail;
        data["emailAddress"] = this.emailAddress;
        data["fullName"] = this.fullName;
        return data;
    }

    clone(): UserSummaryDto {
        const json = this.toJSON();
        let result = new UserSummaryDto();
        result.init(json);
        return result;
    }
}

export interface IUserSummaryDto {
    id: number;
    userName: string | undefined;
    useEmail: boolean;
    emailAddress: string | undefined;
    fullName: string | undefined;
}

export class UserSummaryDtoPagedResultDto implements IUserSummaryDtoPagedResultDto {
    items: UserSummaryDto[] | undefined;
    totalCount: number;

    constructor(data?: IUserSummaryDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(UserSummaryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): UserSummaryDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSummaryDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): UserSummaryDtoPagedResultDto {
        const json = this.toJSON();
        let result = new UserSummaryDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IUserSummaryDtoPagedResultDto {
    items: UserSummaryDto[] | undefined;
    totalCount: number;
}

export class UsersToOrganizationUnitInput implements IUsersToOrganizationUnitInput {
    userIds: number[] | undefined;
    organizationUnitId: number;

    constructor(data?: IUsersToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds.push(item);
            }
            this.organizationUnitId = _data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UsersToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    }

    clone(): UsersToOrganizationUnitInput {
        const json = this.toJSON();
        let result = new UsersToOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IUsersToOrganizationUnitInput {
    userIds: number[] | undefined;
    organizationUnitId: number;
}

export class VGADetailDto implements IVGADetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IVGADetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): VGADetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new VGADetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): VGADetailDto {
        const json = this.toJSON();
        let result = new VGADetailDto();
        result.init(json);
        return result;
    }
}

export interface IVGADetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class VGAListDto implements IVGAListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;

    constructor(data?: IVGAListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
            this.no = _data["no"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): VGAListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VGAListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["no"] = this.no;
        data["code"] = this.code;
        return data;
    }

    clone(): VGAListDto {
        const json = this.toJSON();
        let result = new VGAListDto();
        result.init(json);
        return result;
    }
}

export interface IVGAListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    isDefault: boolean;
    no: number;
    code: string | undefined;
}

export class VGAListDtoPagedResultDto implements IVGAListDtoPagedResultDto {
    items: VGAListDto[] | undefined;
    totalCount: number;

    constructor(data?: IVGAListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(VGAListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): VGAListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new VGAListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): VGAListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new VGAListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IVGAListDtoPagedResultDto {
    items: VGAListDto[] | undefined;
    totalCount: number;
}

export class VerifySmsCodeInputDto implements IVerifySmsCodeInputDto {
    code: string | undefined;

    constructor(data?: IVerifySmsCodeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): VerifySmsCodeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new VerifySmsCodeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data;
    }

    clone(): VerifySmsCodeInputDto {
        const json = this.toJSON();
        let result = new VerifySmsCodeInputDto();
        result.init(json);
        return result;
    }
}

export interface IVerifySmsCodeInputDto {
    code: string | undefined;
}

export class VillageDetailDto implements IVillageDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictId: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneId: string | undefined;
    sangkatCommuneName: string | undefined;

    constructor(data?: IVillageDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstId = _data["firstId"];
            this.nextId = _data["nextId"];
            this.previousId = _data["previousId"];
            this.lastId = _data["lastId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.cityProvinceId = _data["cityProvinceId"];
            this.cityProvinceName = _data["cityProvinceName"];
            this.khanDistrictId = _data["khanDistrictId"];
            this.khanDistrictName = _data["khanDistrictName"];
            this.sangkatCommuneId = _data["sangkatCommuneId"];
            this.sangkatCommuneName = _data["sangkatCommuneName"];
        }
    }

    static fromJS(data: any): VillageDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new VillageDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstId"] = this.firstId;
        data["nextId"] = this.nextId;
        data["previousId"] = this.previousId;
        data["lastId"] = this.lastId;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["cityProvinceId"] = this.cityProvinceId;
        data["cityProvinceName"] = this.cityProvinceName;
        data["khanDistrictId"] = this.khanDistrictId;
        data["khanDistrictName"] = this.khanDistrictName;
        data["sangkatCommuneId"] = this.sangkatCommuneId;
        data["sangkatCommuneName"] = this.sangkatCommuneName;
        return data;
    }

    clone(): VillageDetailDto {
        const json = this.toJSON();
        let result = new VillageDetailDto();
        result.init(json);
        return result;
    }
}

export interface IVillageDetailDto {
    id: string;
    firstId: string | undefined;
    nextId: string | undefined;
    previousId: string | undefined;
    lastId: string | undefined;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryId: string | undefined;
    countryName: string | undefined;
    cityProvinceId: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictId: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneId: string | undefined;
    sangkatCommuneName: string | undefined;
}

export class VillageListDto implements IVillageListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneName: string | undefined;

    constructor(data?: IVillageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.creatorUserName = _data["creatorUserName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.lastModifierUserName = _data["lastModifierUserName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.cannotEdit = _data["cannotEdit"];
            this.cannotDelete = _data["cannotDelete"];
            this.no = _data["no"];
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.cityProvinceName = _data["cityProvinceName"];
            this.khanDistrictName = _data["khanDistrictName"];
            this.sangkatCommuneName = _data["sangkatCommuneName"];
        }
    }

    static fromJS(data: any): VillageListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VillageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["cannotEdit"] = this.cannotEdit;
        data["cannotDelete"] = this.cannotDelete;
        data["no"] = this.no;
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["cityProvinceName"] = this.cityProvinceName;
        data["khanDistrictName"] = this.khanDistrictName;
        data["sangkatCommuneName"] = this.sangkatCommuneName;
        return data;
    }

    clone(): VillageListDto {
        const json = this.toJSON();
        let result = new VillageListDto();
        result.init(json);
        return result;
    }
}

export interface IVillageListDto {
    id: string;
    creatorUserId: number | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    isActive: boolean;
    name: string | undefined;
    displayName: string | undefined;
    cannotEdit: boolean;
    cannotDelete: boolean;
    no: number;
    code: string | undefined;
    countryName: string | undefined;
    cityProvinceName: string | undefined;
    khanDistrictName: string | undefined;
    sangkatCommuneName: string | undefined;
}

export class VillageListDtoPagedResultDto implements IVillageListDtoPagedResultDto {
    items: VillageListDto[] | undefined;
    totalCount: number;

    constructor(data?: IVillageListDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(VillageListDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): VillageListDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new VillageListDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): VillageListDtoPagedResultDto {
        const json = this.toJSON();
        let result = new VillageListDtoPagedResultDto();
        result.init(json);
        return result;
    }
}

export interface IVillageListDtoPagedResultDto {
    items: VillageListDto[] | undefined;
    totalCount: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}